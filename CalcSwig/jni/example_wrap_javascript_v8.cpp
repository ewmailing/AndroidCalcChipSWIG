/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 




#include <v8.h>

#include <errno.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

void SWIG_V8_Raise(const char* msg) {
  v8::ThrowException(v8::Exception::Error(v8::String::New(msg)));
}

/* 
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.
  
  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload', 
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char* msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    err = v8::Exception::Error(v8::String::New(msg));
    if(code != SWIG_TypeError) {
      v8::ThrowException(err);
    }
  }
  v8::Handle<v8::Value> err;
};



// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    v8::V8::AdjustAmountOfExternalAllocatedMemory(SWIGV8_AVG_OBJ_SIZE);
  };
  
  ~SWIGV8_Proxy() { 
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    handle.ClearWeak();
#else
    handle.ClearWeak(v8::Isolate::GetCurrent());
#endif

    //handle->SetInternalField(0, v8::Undefined());

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    handle.Dispose();
#else
    handle.Dispose(v8::Isolate::GetCurrent());
#endif
    handle.Clear();
    v8::V8::AdjustAmountOfExternalAllocatedMemory(-SWIGV8_AVG_OBJ_SIZE);
  }
  
  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#else
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#endif
};

v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  
  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter)
#else
void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy)
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#endif

  delete proxy;
}

void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void* ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy* cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;  
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  obj->SetPointerInInternalField(0, cdata);
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
  cdata->handle.MarkIndependent();
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#endif
}

int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;

  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

v8::Handle<v8::Object> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  v8::Handle<v8::FunctionTemplate> class_templ;


#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *iso = v8::Isolate::GetCurrent();
  
  if(info->clientdata != 0) {
    class_templ = v8::Handle<v8::FunctionTemplate>::New(iso, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Handle<v8::FunctionTemplate>::New(iso, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);
  
  return scope.Close(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)




/**
 * Creates a class template for a class with specified initialization function. 
 */
v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    v8::HandleScope scope;
    v8::Local<v8::FunctionTemplate> class_templ = v8::FunctionTemplate::New();
    class_templ->SetClassName(v8::String::NewSymbol(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    return scope.Close(class_templ);
}

/**
 * Registers a class method with given name for a given class template. 
 */
void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::InvocationCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func));    
}

/**
 * Registers a class property with given name for a given class template. 
 */
void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol, v8::InvocationCallback _func) {
  obj->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  obj->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    char buffer[256];
    char msg[512];
    int res;
    
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    
    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MyData swig_types[0]
#define SWIGTYPE_p_MyStruct swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_cpArbiter swig_types[3]
#define SWIGTYPE_p_cpArray swig_types[4]
#define SWIGTYPE_p_cpBB swig_types[5]
#define SWIGTYPE_p_cpBBTree swig_types[6]
#define SWIGTYPE_p_cpBody swig_types[7]
#define SWIGTYPE_p_cpCircleShape swig_types[8]
#define SWIGTYPE_p_cpCollisionBeginFunc swig_types[9]
#define SWIGTYPE_p_cpCollisionHandler swig_types[10]
#define SWIGTYPE_p_cpCollisionPostSolveFunc swig_types[11]
#define SWIGTYPE_p_cpCollisionPreSolveFunc swig_types[12]
#define SWIGTYPE_p_cpCollisionSeparateFunc swig_types[13]
#define SWIGTYPE_p_cpComponentNode swig_types[14]
#define SWIGTYPE_p_cpConstraint swig_types[15]
#define SWIGTYPE_p_cpConstraintClass swig_types[16]
#define SWIGTYPE_p_cpContactBufferHeader swig_types[17]
#define SWIGTYPE_p_cpDampedRotarySpring swig_types[18]
#define SWIGTYPE_p_cpDampedSpring swig_types[19]
#define SWIGTYPE_p_cpGearJoint swig_types[20]
#define SWIGTYPE_p_cpGrooveJoint swig_types[21]
#define SWIGTYPE_p_cpHashSet swig_types[22]
#define SWIGTYPE_p_cpMat2x2 swig_types[23]
#define SWIGTYPE_p_cpNearestPointQueryInfo swig_types[24]
#define SWIGTYPE_p_cpPinJoint swig_types[25]
#define SWIGTYPE_p_cpPivotJoint swig_types[26]
#define SWIGTYPE_p_cpPolyShape swig_types[27]
#define SWIGTYPE_p_cpRatchetJoint swig_types[28]
#define SWIGTYPE_p_cpRotaryLimitJoint swig_types[29]
#define SWIGTYPE_p_cpSegmentQueryInfo swig_types[30]
#define SWIGTYPE_p_cpSegmentShape swig_types[31]
#define SWIGTYPE_p_cpShape swig_types[32]
#define SWIGTYPE_p_cpShapeClass swig_types[33]
#define SWIGTYPE_p_cpShapeType swig_types[34]
#define SWIGTYPE_p_cpSimpleMotor swig_types[35]
#define SWIGTYPE_p_cpSlideJoint swig_types[36]
#define SWIGTYPE_p_cpSpace swig_types[37]
#define SWIGTYPE_p_cpSpaceHash swig_types[38]
#define SWIGTYPE_p_cpSpatialIndex swig_types[39]
#define SWIGTYPE_p_cpSpatialIndexClass swig_types[40]
#define SWIGTYPE_p_cpSplittingPlane swig_types[41]
#define SWIGTYPE_p_cpSweep1D swig_types[42]
#define SWIGTYPE_p_cpVect swig_types[43]
#define SWIGTYPE_p_f_p_cpShape_cpVect_cpVect__cpBB swig_types[44]
#define SWIGTYPE_p_f_p_struct_cpBody_float__void swig_types[45]
#define SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void swig_types[46]
#define SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void swig_types[47]
#define SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpShape_p_void__void swig_types[48]
#define SWIGTYPE_p_f_p_struct_cpBody_p_void__void swig_types[49]
#define SWIGTYPE_p_f_p_struct_cpBody_struct_cpVect_float_float__void swig_types[50]
#define SWIGTYPE_p_f_p_struct_cpConstraint__float swig_types[51]
#define SWIGTYPE_p_f_p_struct_cpConstraint_float__float swig_types[52]
#define SWIGTYPE_p_f_p_struct_cpConstraint_float__void swig_types[53]
#define SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void swig_types[54]
#define SWIGTYPE_p_f_p_struct_cpConstraint_p_void__void swig_types[55]
#define SWIGTYPE_p_f_p_struct_cpShape__void swig_types[56]
#define SWIGTYPE_p_f_p_struct_cpShape_float_struct_cpVect_p_void__void swig_types[57]
#define SWIGTYPE_p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void swig_types[58]
#define SWIGTYPE_p_f_p_struct_cpShape_p_void__void swig_types[59]
#define SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void swig_types[60]
#define SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void swig_types[61]
#define SWIGTYPE_p_f_p_struct_cpSpace_p_void_p_void__void swig_types[62]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex__int swig_types[63]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex__void swig_types[64]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void swig_types[65]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void swig_types[66]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void swig_types[67]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void swig_types[68]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int swig_types[69]
#define SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void swig_types[70]
#define SWIGTYPE_p_f_p_void__cpBB swig_types[71]
#define SWIGTYPE_p_f_p_void__cpVect swig_types[72]
#define SWIGTYPE_p_f_p_void_p_void__void swig_types[73]
#define SWIGTYPE_p_f_p_void_p_void_p_void__float swig_types[74]
#define SWIGTYPE_p_f_p_void_p_void_p_void__void swig_types[75]
#define SWIGTYPE_p_float swig_types[76]
#define SWIGTYPE_p_int swig_types[77]
#define SWIGTYPE_p_uintptr_t swig_types[78]
#define SWIGTYPE_p_unsigned_int swig_types[79]
#define SWIGTYPE_p_void swig_types[80]
static swig_type_info *swig_types[82];
static swig_module_info swig_module = {swig_types, 81, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x020006 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


 /* Includes the header in the wrapper code */
//#include "chipmunk_private.i"
 #include "example.h"

// #include "chipmunk.h"
//#include "chipmunk_types.h"
//#include <CoreGraphics/CGGeometry.h>

     //typedef struct cpVect{cpFloat x,y;} cpVect;

     
 

SWIGINTERN 
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsInt32()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();
  
  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return v8::Int32::New(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return v8::Undefined();
    } else {
      v8::Handle<v8::String> js_str = v8::String::New(carray, size);
      return js_str;
    }
  } else {
    return v8::Undefined();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN 
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();
  
  return SWIG_OK;
}


SWIGINTERN 
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return v8::Number::New(val);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





    #include "chipmunk.h"
//#include "chipmunk_types.h"
//#include <CoreGraphics/CGGeometry.h>

     //typedef struct cpVect{cpFloat x,y;} cpVect;

     
 

#include <float.h>


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN 
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val) 
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  
  long longVal = (long) obj->NumberValue();
  
  if(longVal < 0) {
      return SWIG_OverflowError;
  }
  
  if(val) *val = longVal; 
  
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return v8::Number::New(value);
}


SWIGINTERNINLINE 
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    v8::Integer::NewFromUnsigned(value) : v8::Integer::New((long)(value)); 
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGV8_ClientData _MyStruct_clientData;
SWIGV8_ClientData _MyData_clientData;
SWIGV8_ClientData _cpVect_clientData;
SWIGV8_ClientData _cpMat2x2_clientData;
SWIGV8_ClientData _cpBB_clientData;
SWIGV8_ClientData _cpSpatialIndex_clientData;
SWIGV8_ClientData _cpSpatialIndexClass_clientData;
SWIGV8_ClientData _cpComponentNode_clientData;
SWIGV8_ClientData _cpBody_clientData;
SWIGV8_ClientData _cpNearestPointQueryInfo_clientData;
SWIGV8_ClientData _cpSegmentQueryInfo_clientData;
SWIGV8_ClientData _cpShapeClass_clientData;
SWIGV8_ClientData _cpShape_clientData;
SWIGV8_ClientData _cpCircleShape_clientData;
SWIGV8_ClientData _cpSegmentShape_clientData;
SWIGV8_ClientData _cpSplittingPlane_clientData;
SWIGV8_ClientData _cpPolyShape_clientData;
SWIGV8_ClientData _cpConstraintClass_clientData;
SWIGV8_ClientData _cpConstraint_clientData;
SWIGV8_ClientData _cpPinJoint_clientData;
SWIGV8_ClientData _cpSlideJoint_clientData;
SWIGV8_ClientData _cpPivotJoint_clientData;
SWIGV8_ClientData _cpGrooveJoint_clientData;
SWIGV8_ClientData _cpDampedSpring_clientData;
SWIGV8_ClientData _cpDampedRotarySpring_clientData;
SWIGV8_ClientData _cpRotaryLimitJoint_clientData;
SWIGV8_ClientData _cpRatchetJoint_clientData;
SWIGV8_ClientData _cpGearJoint_clientData;
SWIGV8_ClientData _cpSimpleMotor_clientData;
SWIGV8_ClientData _cpSpace_clientData;


v8::Handle<v8::Value> _wrap_fact(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fact.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fact" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (int)fact(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_my_mod(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_my_mod.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "my_mod" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "my_mod" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)my_mod(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_get_time(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_time.");  
  
  result = (char *)get_time();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_MyStruct_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_x_set" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyStruct_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_MyStruct_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_x_get" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  result = (double) ((arg1)->x);
  jsresult = SWIG_From_double((double)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_MyStruct_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_y_set" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyStruct_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_MyStruct_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_y_get" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  result = (double) ((arg1)->y);
  jsresult = SWIG_From_double((double)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_MyStruct_z_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_z_set" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyStruct_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  if (arg1) (arg1)->z = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_MyStruct_z_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyStruct *arg1 = (struct MyStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_MyStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyStruct_z_get" "', argument " "1"" of type '" "struct MyStruct *""'"); 
  }
  arg1 = (struct MyStruct *)(argp1);
  result = (double) ((arg1)->z);
  jsresult = SWIG_From_double((double)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_MyStruct(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct MyStruct *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MyStruct.");  
  result = (struct MyStruct *)calloc(1, sizeof(struct MyStruct));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_MyStruct, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_MyStruct(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_MyStruct(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct MyStruct *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_MyStructMake(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  struct MyStruct result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MyStructMake.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MyStructMake" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyStructMake" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MyStructMake" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  result = MyStructMake(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((struct MyStruct *)memcpy((struct MyStruct *)malloc(sizeof(struct MyStruct)),&result,sizeof(struct MyStruct)), SWIGTYPE_p_MyStruct, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_AddStructs(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyStruct arg1 ;
  struct MyStruct arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  struct MyStruct result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AddStructs.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_MyStruct,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddStructs" "', argument " "1"" of type '" "struct MyStruct""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddStructs" "', argument " "1"" of type '" "struct MyStruct""'");
    } else {
      arg1 = *((struct MyStruct *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_MyStruct,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddStructs" "', argument " "2"" of type '" "struct MyStruct""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddStructs" "', argument " "2"" of type '" "struct MyStruct""'");
    } else {
      arg2 = *((struct MyStruct *)(argp2));
    }
  }
  result = AddStructs(arg1,arg2);
  jsresult = SWIG_NewPointerObj((struct MyStruct *)memcpy((struct MyStruct *)malloc(sizeof(struct MyStruct)),&result,sizeof(struct MyStruct)), SWIGTYPE_p_MyStruct, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_MyData(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_MyData(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct MyData *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_MyData(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class MyData can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CreateData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyData *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CreateData.");  
  
  result = (struct MyData *)CreateData();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MyData, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_FreeData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct MyData *arg1 = (struct MyData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FreeData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_MyData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeData" "', argument " "1"" of type '" "struct MyData *""'"); 
  }
  arg1 = (struct MyData *)(argp1);
  FreeData(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_emptyCall(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_emptyCall.");  
  
  emptyCall();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_returnDouble(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_returnDouble.");  
  
  result = (double)returnDouble();
  jsresult = SWIG_From_double((double)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_returnString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_returnString.");  
  
  result = (char *)returnString();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_passDouble(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_passDouble.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "passDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  passDouble(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_passString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_passString.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "passString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  passString((char const *)arg1);
  jsresult = v8::Undefined();
  if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_passAndReturnDouble(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_passAndReturnDouble.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "passAndReturnDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  result = (double)passAndReturnDouble(arg1);
  jsresult = SWIG_From_double((double)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_passAndReturnString(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_passAndReturnString.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "passAndReturnString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (char *)passAndReturnString((char const *)arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_pass2Double(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pass2Double.");  
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pass2Double" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = (double)(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pass2Double" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  pass2Double(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_pass2String(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pass2String.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pass2String" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pass2String" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  pass2String((char const *)arg1,(char const *)arg2);
  jsresult = v8::Undefined();
  if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
  if (alloc2 == SWIG_NEWOBJ) free((char*)buf2);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_measure_c_function(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_measure_c_function.");  
  
  measure_c_function();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_ALLOW_PRIVATE_ACCESS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMessage(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMessage.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMessage" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpMessage" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpMessage" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpMessage" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_AsCharPtrAndSize(args[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpMessage" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  cpMessage((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jsresult = v8::Undefined();
  if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
  if (alloc2 == SWIG_NEWOBJ) free((char*)buf2);
  
  
  
  if (alloc6 == SWIG_NEWOBJ) free((char*)buf6);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_USE_CGPOINTS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_USE_DOUBLES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_INFINITY(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)((1e1000)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_M_PI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(3.14159265358979323846264338327950288));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_M_E(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_double((double)(2.71828182845904523536028747135266250));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpfmax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpfmax.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfmax" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfmax" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = (cpFloat)cpfmax(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpfmin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpfmin.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfmin" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfmin" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = (cpFloat)cpfmin(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpfabs(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpfabs.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfabs" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  result = (cpFloat)cpfabs(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpfclamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpfclamp.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfclamp" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfclamp" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfclamp" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpFloat)cpfclamp(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpfclamp01(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpfclamp01.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfclamp01" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  result = (cpFloat)cpfclamp01(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpflerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpflerp.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpflerp" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpflerp" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpflerp" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpFloat)cpflerp(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpflerpconst(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpflerpconst.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpflerpconst" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpflerpconst" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpflerpconst" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpFloat)cpflerpconst(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpTrue(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpFalse(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpVect_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpVect *arg1 = (struct cpVect *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpVect_x_set" "', argument " "1"" of type '" "struct cpVect *""'"); 
  }
  arg1 = (struct cpVect *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpVect_x_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->x = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpVect_x_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpVect *arg1 = (struct cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpVect_x_get" "', argument " "1"" of type '" "struct cpVect *""'"); 
  }
  arg1 = (struct cpVect *)(argp1);
  result = (cpFloat) ((arg1)->x);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpVect_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpVect *arg1 = (struct cpVect *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpVect_y_set" "', argument " "1"" of type '" "struct cpVect *""'"); 
  }
  arg1 = (struct cpVect *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpVect_y_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->y = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpVect_y_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpVect *arg1 = (struct cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpVect_y_get" "', argument " "1"" of type '" "struct cpVect *""'"); 
  }
  arg1 = (struct cpVect *)(argp1);
  result = (cpFloat) ((arg1)->y);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpVect(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpVect *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpVect.");  
  result = (struct cpVect *)calloc(1, sizeof(struct cpVect));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpVect, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpVect(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpVect(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpVect *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpMat2x2_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_a_set" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMat2x2_a_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->a = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpMat2x2_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_a_get" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  result = (cpFloat) ((arg1)->a);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpMat2x2_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_b_set" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMat2x2_b_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->b = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpMat2x2_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_b_get" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  result = (cpFloat) ((arg1)->b);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpMat2x2_c_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_c_set" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMat2x2_c_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->c = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpMat2x2_c_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_c_get" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  result = (cpFloat) ((arg1)->c);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpMat2x2_d_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_d_set" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMat2x2_d_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->d = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpMat2x2_d_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpMat2x2 *arg1 = (struct cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2_d_get" "', argument " "1"" of type '" "struct cpMat2x2 *""'"); 
  }
  arg1 = (struct cpMat2x2 *)(argp1);
  result = (cpFloat) ((arg1)->d);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpMat2x2(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpMat2x2 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpMat2x2.");  
  result = (struct cpMat2x2 *)calloc(1, sizeof(struct cpMat2x2));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpMat2x2, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpMat2x2(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpMat2x2(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpMat2x2 *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_CP_BUFFER_BYTES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)((32*1024)));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvzero_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect *result = 0 ;
  
  result = (cpVect *)&cpvzero;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpv.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpv" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpv" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = cpv(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvslerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpVect result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvslerp.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvslerp" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvslerp" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvslerp" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvslerp" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpvslerp" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = cpvslerp(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvslerpconst(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpVect result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvslerpconst.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvslerpconst" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvslerpconst" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvslerpconst" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvslerpconst" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpvslerpconst" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = cpvslerpconst(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvstr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvstr.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvstr" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvstr" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = (char *)cpvstr(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpveql(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpveql.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpveql" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpveql" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpveql" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpveql" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpBool)cpveql(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvadd(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvadd.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvadd" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvadd" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvadd" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvadd" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpvadd(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvsub(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvsub.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvsub" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvsub" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvsub" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvsub" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpvsub(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvneg(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvneg.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvneg" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvneg" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = cpvneg(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvmult(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpFloat arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvmult.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvmult" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvmult" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpvmult" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = cpvmult(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvdot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvdot.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvdot" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdot" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvdot" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdot" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpFloat)cpvdot(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvcross(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvcross.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvcross" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvcross" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvcross" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvcross" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpFloat)cpvcross(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvperp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvperp.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvperp" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvperp" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = cpvperp(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvrperp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvrperp.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvrperp" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvrperp" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = cpvrperp(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvproject(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvproject.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvproject" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvproject" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvproject" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvproject" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpvproject(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvforangle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvforangle.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpvforangle" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  result = cpvforangle(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvtoangle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvtoangle.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvtoangle" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvtoangle" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = (cpFloat)cpvtoangle(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvrotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvrotate.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvrotate" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvrotate" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvrotate" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvrotate" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpvrotate(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvunrotate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvunrotate.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvunrotate" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvunrotate" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvunrotate" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvunrotate" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpvunrotate(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvlengthsq(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvlengthsq.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvlengthsq" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlengthsq" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = (cpFloat)cpvlengthsq(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvlength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvlength.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvlength" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlength" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = (cpFloat)cpvlength(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvlerp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpVect result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvlerp.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvlerp" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlerp" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvlerp" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlerp" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpvlerp" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = cpvlerp(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvnormalize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvnormalize.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvnormalize" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvnormalize" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = cpvnormalize(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvnormalize_safe(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvnormalize_safe.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvnormalize_safe" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvnormalize_safe" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  result = cpvnormalize_safe(arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvclamp(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpFloat arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvclamp.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvclamp" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvclamp" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpvclamp" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = cpvclamp(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvlerpconst(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpVect result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvlerpconst.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvlerpconst" "', argument " "1"" of type '" "cpVect""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlerpconst" "', argument " "1"" of type '" "cpVect""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvlerpconst" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvlerpconst" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpvlerpconst" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = cpvlerpconst(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvdist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvdist.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvdist" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdist" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvdist" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdist" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpFloat)cpvdist(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvdistsq(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvdistsq.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvdistsq" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdistsq" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvdistsq" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvdistsq" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpFloat)cpvdistsq(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpvnear(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpBool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpvnear.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpvnear" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvnear" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpvnear" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpvnear" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpvnear" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpBool)cpvnear(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMat2x2New(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpMat2x2 result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMat2x2New.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMat2x2New" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMat2x2New" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpMat2x2New" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpMat2x2New" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = cpMat2x2New(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((cpMat2x2 *)memcpy((cpMat2x2 *)malloc(sizeof(cpMat2x2)),&result,sizeof(cpMat2x2)), SWIGTYPE_p_cpMat2x2, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMat2x2Transform(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpMat2x2 arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMat2x2Transform.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpMat2x2,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpMat2x2Transform" "', argument " "1"" of type '" "cpMat2x2""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMat2x2Transform" "', argument " "1"" of type '" "cpMat2x2""'");
    } else {
      arg1 = *((cpMat2x2 *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpMat2x2Transform" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMat2x2Transform" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpMat2x2Transform(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBB_l_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_l_set" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBB_l_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->l = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBB_l_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_l_get" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  result = (cpFloat) ((arg1)->l);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBB_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_b_set" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBB_b_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->b = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBB_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_b_get" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  result = (cpFloat) ((arg1)->b);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBB_r_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_r_set" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBB_r_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->r = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBB_r_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_r_get" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  result = (cpFloat) ((arg1)->r);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBB_t_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_t_set" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBB_t_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->t = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBB_t_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBB *arg1 = (struct cpBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBB_t_get" "', argument " "1"" of type '" "struct cpBB *""'"); 
  }
  arg1 = (struct cpBB *)(argp1);
  result = (cpFloat) ((arg1)->t);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpBB(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpBB *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpBB.");  
  result = (struct cpBB *)calloc(1, sizeof(struct cpBB));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpBB, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpBB(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpBB(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpBB *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_cpBBNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpBB result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBNew.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpBBNew" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBBNew" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpBBNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpBBNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = cpBBNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBNewForCircle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpFloat arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpBB result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBNewForCircle.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBNewForCircle" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBNewForCircle" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBBNewForCircle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = cpBBNewForCircle(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBIntersects(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpBB arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBIntersects.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBIntersects" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBIntersects" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBIntersects" "', argument " "2"" of type '" "cpBB const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBIntersects" "', argument " "2"" of type '" "cpBB const""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = (cpBool)cpBBIntersects(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBContainsBB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpBB arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBContainsBB.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBContainsBB" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBContainsBB" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBContainsBB" "', argument " "2"" of type '" "cpBB const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBContainsBB" "', argument " "2"" of type '" "cpBB const""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = (cpBool)cpBBContainsBB(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBContainsVect(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBContainsVect.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBContainsVect" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBContainsVect" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBContainsVect" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBContainsVect" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpBool)cpBBContainsVect(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBMerge(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpBB arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBB result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBMerge.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBMerge" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBMerge" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBMerge" "', argument " "2"" of type '" "cpBB const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBMerge" "', argument " "2"" of type '" "cpBB const""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = cpBBMerge(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBExpand(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBB result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBExpand.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBExpand" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBExpand" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBExpand" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBExpand" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBBExpand(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBArea(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBArea.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBArea" "', argument " "1"" of type '" "cpBB""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBArea" "', argument " "1"" of type '" "cpBB""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  result = (cpFloat)cpBBArea(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBMergedArea(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpBB arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBMergedArea.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBMergedArea" "', argument " "1"" of type '" "cpBB""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBMergedArea" "', argument " "1"" of type '" "cpBB""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBMergedArea" "', argument " "2"" of type '" "cpBB""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBMergedArea" "', argument " "2"" of type '" "cpBB""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = (cpFloat)cpBBMergedArea(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBSegmentQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBSegmentQuery.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBSegmentQuery" "', argument " "1"" of type '" "cpBB""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBSegmentQuery" "', argument " "1"" of type '" "cpBB""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBSegmentQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBSegmentQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBBSegmentQuery" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBSegmentQuery" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = (cpFloat)cpBBSegmentQuery(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBIntersectsSegment(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpBool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBIntersectsSegment.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBIntersectsSegment" "', argument " "1"" of type '" "cpBB""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBIntersectsSegment" "', argument " "1"" of type '" "cpBB""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBIntersectsSegment" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBIntersectsSegment" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBBIntersectsSegment" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBIntersectsSegment" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = (cpBool)cpBBIntersectsSegment(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBClampVect(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBClampVect.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBClampVect" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBClampVect" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBClampVect" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBClampVect" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBBClampVect(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBWrapVect(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBB arg1 ;
  cpVect arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBWrapVect.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBWrapVect" "', argument " "1"" of type '" "cpBB const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBWrapVect" "', argument " "1"" of type '" "cpBB const""'");
    } else {
      arg1 = *((cpBB *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBWrapVect" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBBWrapVect" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBBWrapVect(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndex_klass_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  cpSpatialIndexClass *arg2 = (cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_klass_set" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpatialIndexClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndex_klass_set" "', argument " "2"" of type '" "cpSpatialIndexClass *""'"); 
  }
  arg2 = (cpSpatialIndexClass *)(argp2);
  if (arg1) (arg1)->klass = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndex_klass_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexClass *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_klass_get" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  result = (cpSpatialIndexClass *) ((arg1)->klass);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndex_bbfunc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  cpSpatialIndexBBFunc arg2 = (cpSpatialIndexBBFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_bbfunc_set" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndex_bbfunc_set" "', argument " "2"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  if (arg1) (arg1)->bbfunc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndex_bbfunc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexBBFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_bbfunc_get" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  result = (cpSpatialIndexBBFunc) ((arg1)->bbfunc);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void__cpBB);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndex_staticIndex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_staticIndex_set" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndex_staticIndex_set" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  if (arg1) (arg1)->staticIndex = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndex_staticIndex_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_staticIndex_get" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  result = (cpSpatialIndex *) ((arg1)->staticIndex);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndex_dynamicIndex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_dynamicIndex_set" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndex_dynamicIndex_set" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  if (arg1) (arg1)->dynamicIndex = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndex_dynamicIndex_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndex *arg1 = (struct cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndex_dynamicIndex_get" "', argument " "1"" of type '" "struct cpSpatialIndex *""'"); 
  }
  arg1 = (struct cpSpatialIndex *)(argp1);
  result = (cpSpatialIndex *) ((arg1)->dynamicIndex);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSpatialIndex(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSpatialIndex(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSpatialIndex *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpSpatialIndex(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpSpatialIndex can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceHashAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpaceHash *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceHashAlloc.");  
  
  result = (cpSpaceHash *)cpSpaceHashAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpaceHash, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceHashInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpaceHash *arg1 = (cpSpaceHash *) 0 ;
  cpFloat arg2 ;
  int arg3 ;
  cpSpatialIndexBBFunc arg4 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg5 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceHashInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpaceHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceHashInit" "', argument " "1"" of type '" "cpSpaceHash *""'"); 
  }
  arg1 = (cpSpaceHash *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceHashInit" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceHashInit" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args[3], (void**)(&arg4), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceHashInit" "', argument " "4"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(args[4], &argp5,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceHashInit" "', argument " "5"" of type '" "cpSpatialIndex *""'"); 
  }
  arg5 = (cpSpatialIndex *)(argp5);
  result = (cpSpatialIndex *)cpSpaceHashInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceHashNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  int arg2 ;
  cpSpatialIndexBBFunc arg3 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg4 = (cpSpatialIndex *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceHashNew.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpSpaceHashNew" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceHashNew" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceHashNew" "', argument " "3"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceHashNew" "', argument " "4"" of type '" "cpSpatialIndex *""'"); 
  }
  arg4 = (cpSpatialIndex *)(argp4);
  result = (cpSpatialIndex *)cpSpaceHashNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceHashResize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpaceHash *arg1 = (cpSpaceHash *) 0 ;
  cpFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceHashResize.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpaceHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceHashResize" "', argument " "1"" of type '" "cpSpaceHash *""'"); 
  }
  arg1 = (cpSpaceHash *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceHashResize" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceHashResize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  cpSpaceHashResize(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBTreeAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBBTree *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBTreeAlloc.");  
  
  result = (cpBBTree *)cpBBTreeAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBBTree, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBTreeInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBBTree *arg1 = (cpBBTree *) 0 ;
  cpSpatialIndexBBFunc arg2 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg3 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBTreeInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBBTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBTreeInit" "', argument " "1"" of type '" "cpBBTree *""'"); 
  }
  arg1 = (cpBBTree *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBBTreeInit" "', argument " "2"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBBTreeInit" "', argument " "3"" of type '" "cpSpatialIndex *""'"); 
  }
  arg3 = (cpSpatialIndex *)(argp3);
  result = (cpSpatialIndex *)cpBBTreeInit(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBTreeNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndexBBFunc arg1 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBTreeNew.");  
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBBTreeNew" "', argument " "1"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBBTreeNew" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  result = (cpSpatialIndex *)cpBBTreeNew(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBTreeOptimize(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBTreeOptimize.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBTreeOptimize" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  cpBBTreeOptimize(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBBTreeSetVelocityFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  cpBBTreeVelocityFunc arg2 = (cpBBTreeVelocityFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBBTreeSetVelocityFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBBTreeSetVelocityFunc" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void__cpVect);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBBTreeSetVelocityFunc" "', argument " "2"" of type '" "cpBBTreeVelocityFunc""'"); 
    }
  }
  cpBBTreeSetVelocityFunc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSweep1DAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSweep1D *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSweep1DAlloc.");  
  
  result = (cpSweep1D *)cpSweep1DAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSweep1D, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSweep1DInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSweep1D *arg1 = (cpSweep1D *) 0 ;
  cpSpatialIndexBBFunc arg2 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg3 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSweep1DInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSweep1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSweep1DInit" "', argument " "1"" of type '" "cpSweep1D *""'"); 
  }
  arg1 = (cpSweep1D *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSweep1DInit" "', argument " "2"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSweep1DInit" "', argument " "3"" of type '" "cpSpatialIndex *""'"); 
  }
  arg3 = (cpSpatialIndex *)(argp3);
  result = (cpSpatialIndex *)cpSweep1DInit(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSweep1DNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndexBBFunc arg1 = (cpSpatialIndexBBFunc) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSweep1DNew.");  
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_p_void__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSweep1DNew" "', argument " "1"" of type '" "cpSpatialIndexBBFunc""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSweep1DNew" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  result = (cpSpatialIndex *)cpSweep1DNew(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_destroy_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexDestroyImpl arg2 = (cpSpatialIndexDestroyImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_destroy_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_destroy_set" "', argument " "2"" of type '" "cpSpatialIndexDestroyImpl""'"); 
    }
  }
  if (arg1) (arg1)->destroy = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_destroy_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexDestroyImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_destroy_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexDestroyImpl) ((arg1)->destroy);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_count_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexCountImpl arg2 = (cpSpatialIndexCountImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_count_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_count_set" "', argument " "2"" of type '" "cpSpatialIndexCountImpl""'"); 
    }
  }
  if (arg1) (arg1)->count = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_count_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexCountImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_count_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexCountImpl) ((arg1)->count);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex__int);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_each_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexEachImpl arg2 = (cpSpatialIndexEachImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_each_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_each_set" "', argument " "2"" of type '" "cpSpatialIndexEachImpl""'"); 
    }
  }
  if (arg1) (arg1)->each = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_each_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexEachImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_each_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexEachImpl) ((arg1)->each);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_contains_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexContainsImpl arg2 = (cpSpatialIndexContainsImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_contains_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_contains_set" "', argument " "2"" of type '" "cpSpatialIndexContainsImpl""'"); 
    }
  }
  if (arg1) (arg1)->contains = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_contains_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexContainsImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_contains_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexContainsImpl) ((arg1)->contains);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_insert_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexInsertImpl arg2 = (cpSpatialIndexInsertImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_insert_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_insert_set" "', argument " "2"" of type '" "cpSpatialIndexInsertImpl""'"); 
    }
  }
  if (arg1) (arg1)->insert = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_insert_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexInsertImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_insert_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexInsertImpl) ((arg1)->insert);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_remove_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexRemoveImpl arg2 = (cpSpatialIndexRemoveImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_remove_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_remove_set" "', argument " "2"" of type '" "cpSpatialIndexRemoveImpl""'"); 
    }
  }
  if (arg1) (arg1)->remove = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_remove_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexRemoveImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_remove_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexRemoveImpl) ((arg1)->remove);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_reindex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexReindexImpl arg2 = (cpSpatialIndexReindexImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindex_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_reindex_set" "', argument " "2"" of type '" "cpSpatialIndexReindexImpl""'"); 
    }
  }
  if (arg1) (arg1)->reindex = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_reindex_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexReindexImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindex_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexReindexImpl) ((arg1)->reindex);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_reindexObject_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexReindexObjectImpl arg2 = (cpSpatialIndexReindexObjectImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindexObject_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_reindexObject_set" "', argument " "2"" of type '" "cpSpatialIndexReindexObjectImpl""'"); 
    }
  }
  if (arg1) (arg1)->reindexObject = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_reindexObject_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexReindexObjectImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindexObject_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexReindexObjectImpl) ((arg1)->reindexObject);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_reindexQuery_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexReindexQueryImpl arg2 = (cpSpatialIndexReindexQueryImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindexQuery_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_reindexQuery_set" "', argument " "2"" of type '" "cpSpatialIndexReindexQueryImpl""'"); 
    }
  }
  if (arg1) (arg1)->reindexQuery = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_reindexQuery_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexReindexQueryImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_reindexQuery_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexReindexQueryImpl) ((arg1)->reindexQuery);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_query_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexQueryImpl arg2 = (cpSpatialIndexQueryImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_query_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_query_set" "', argument " "2"" of type '" "cpSpatialIndexQueryImpl""'"); 
    }
  }
  if (arg1) (arg1)->query = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_query_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexQueryImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_query_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexQueryImpl) ((arg1)->query);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpatialIndexClass_segmentQuery_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  cpSpatialIndexSegmentQueryImpl arg2 = (cpSpatialIndexSegmentQueryImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_segmentQuery_set" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexClass_segmentQuery_set" "', argument " "2"" of type '" "cpSpatialIndexSegmentQueryImpl""'"); 
    }
  }
  if (arg1) (arg1)->segmentQuery = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexClass_segmentQuery_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpatialIndexClass *arg1 = (struct cpSpatialIndexClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndexSegmentQueryImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpatialIndexClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexClass_segmentQuery_get" "', argument " "1"" of type '" "struct cpSpatialIndexClass *""'"); 
  }
  arg1 = (struct cpSpatialIndexClass *)(argp1);
  result = (cpSpatialIndexSegmentQueryImpl) ((arg1)->segmentQuery);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpSpatialIndexClass(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpSpatialIndexClass *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpSpatialIndexClass.");  
  result = (struct cpSpatialIndexClass *)calloc(1, sizeof(struct cpSpatialIndexClass));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpSpatialIndexClass, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSpatialIndexClass(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSpatialIndexClass(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSpatialIndexClass *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexFree(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexFree.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexFree" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  cpSpatialIndexFree(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexCollideStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  cpSpatialIndexQueryFunc arg3 = (cpSpatialIndexQueryFunc) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res4 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexCollideStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexCollideStatic" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexCollideStatic" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_p_void_p_void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexCollideStatic" "', argument " "3"" of type '" "cpSpatialIndexQueryFunc""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpatialIndexCollideStatic" "', argument " "4"" of type '" "void *""'"); 
  }
  cpSpatialIndexCollideStatic(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexDestroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexDestroy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexDestroy" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  cpSpatialIndexDestroy(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexCount(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexCount.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexCount" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  result = (int)cpSpatialIndexCount(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexEach(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  cpSpatialIndexIteratorFunc arg2 = (cpSpatialIndexIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexEach.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexEach" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexEach" "', argument " "2"" of type '" "cpSpatialIndexIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexEach" "', argument " "3"" of type '" "void *""'"); 
  }
  cpSpatialIndexEach(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexContains(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpHashValue arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  cpBool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexContains.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexContains" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexContains" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexContains" "', argument " "3"" of type '" "cpHashValue""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexContains" "', argument " "3"" of type '" "cpHashValue""'");
    } else {
      arg3 = *((cpHashValue *)(argp3));
    }
  }
  result = (cpBool)cpSpatialIndexContains(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexInsert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpHashValue arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexInsert.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexInsert" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexInsert" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexInsert" "', argument " "3"" of type '" "cpHashValue""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexInsert" "', argument " "3"" of type '" "cpHashValue""'");
    } else {
      arg3 = *((cpHashValue *)(argp3));
    }
  }
  cpSpatialIndexInsert(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexRemove(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpHashValue arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexRemove.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexRemove" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexRemove" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexRemove" "', argument " "3"" of type '" "cpHashValue""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexRemove" "', argument " "3"" of type '" "cpHashValue""'");
    } else {
      arg3 = *((cpHashValue *)(argp3));
    }
  }
  cpSpatialIndexRemove(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexReindex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexReindex.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexReindex" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  cpSpatialIndexReindex(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexReindexObject(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpHashValue arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexReindexObject.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexReindexObject" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexReindexObject" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexReindexObject" "', argument " "3"" of type '" "cpHashValue""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexReindexObject" "', argument " "3"" of type '" "cpHashValue""'");
    } else {
      arg3 = *((cpHashValue *)(argp3));
    }
  }
  cpSpatialIndexReindexObject(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpBB arg3 ;
  cpSpatialIndexQueryFunc arg4 = (cpSpatialIndexQueryFunc) 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  int res5 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexQuery" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexQuery" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexQuery" "', argument " "3"" of type '" "cpBB""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexQuery" "', argument " "3"" of type '" "cpBB""'");
    } else {
      arg3 = *((cpBB *)(argp3));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args[3], (void**)(&arg4), SWIGTYPE_p_f_p_void_p_void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexQuery" "', argument " "4"" of type '" "cpSpatialIndexQueryFunc""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(args[4],SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpatialIndexQuery" "', argument " "5"" of type '" "void *""'"); 
  }
  cpSpatialIndexQuery(arg1,arg2,arg3,arg4,arg5);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexSegmentQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  void *arg2 = (void *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  cpFloat arg5 ;
  cpSpatialIndexSegmentQueryFunc arg6 = (cpSpatialIndexSegmentQueryFunc) 0 ;
  void *arg7 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int res7 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexSegmentQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexSegmentQuery" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpatialIndexSegmentQuery" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  {
    int res = SWIG_ConvertFunctionPtr(args[5], (void**)(&arg6), SWIGTYPE_p_f_p_void_p_void_p_void__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "6"" of type '" "cpSpatialIndexSegmentQueryFunc""'"); 
    }
  }
  res7 = SWIG_ConvertPtr(args[6],SWIG_as_voidptrptr(&arg7), 0, 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cpSpatialIndexSegmentQuery" "', argument " "7"" of type '" "void *""'"); 
  }
  cpSpatialIndexSegmentQuery(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpatialIndexReindexQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpatialIndex *arg1 = (cpSpatialIndex *) 0 ;
  cpSpatialIndexQueryFunc arg2 = (cpSpatialIndexQueryFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpatialIndexReindexQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpatialIndexReindexQuery" "', argument " "1"" of type '" "cpSpatialIndex *""'"); 
  }
  arg1 = (cpSpatialIndex *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_void_p_void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpatialIndexReindexQuery" "', argument " "2"" of type '" "cpSpatialIndexQueryFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpatialIndexReindexQuery" "', argument " "3"" of type '" "void *""'"); 
  }
  cpSpatialIndexReindexQuery(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpComponentNode_root_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_root_set" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpComponentNode_root_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->root = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpComponentNode_root_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_root_get" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  result = (cpBody *) ((arg1)->root);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpComponentNode_next_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_next_set" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpComponentNode_next_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpComponentNode_next_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_next_get" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  result = (cpBody *) ((arg1)->next);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpComponentNode_idleTime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_idleTime_set" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpComponentNode_idleTime_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->idleTime = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpComponentNode_idleTime_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpComponentNode *arg1 = (struct cpComponentNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpComponentNode_idleTime_get" "', argument " "1"" of type '" "struct cpComponentNode *""'"); 
  }
  arg1 = (struct cpComponentNode *)(argp1);
  result = (cpFloat) ((arg1)->idleTime);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpComponentNode(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpComponentNode *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpComponentNode.");  
  result = (struct cpComponentNode *)calloc(1, sizeof(struct cpComponentNode));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpComponentNode, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpComponentNode(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpComponentNode(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpComponentNode *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpBody_velocity_func_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpBodyVelocityFunc arg2 = (cpBodyVelocityFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_velocity_func_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_struct_cpVect_float_float__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBody_velocity_func_set" "', argument " "2"" of type '" "cpBodyVelocityFunc""'"); 
    }
  }
  if (arg1) (arg1)->velocity_func = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_velocity_func_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBodyVelocityFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_velocity_func_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpBodyVelocityFunc) ((arg1)->velocity_func);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpBody_struct_cpVect_float_float__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_position_func_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpBodyPositionFunc arg2 = (cpBodyPositionFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_position_func_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_float__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBody_position_func_set" "', argument " "2"" of type '" "cpBodyPositionFunc""'"); 
    }
  }
  if (arg1) (arg1)->position_func = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_position_func_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBodyPositionFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_position_func_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpBodyPositionFunc) ((arg1)->position_func);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpBody_float__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_m_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_m_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_m_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->m = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_m_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_m_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->m);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_m_inv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_m_inv_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_m_inv_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->m_inv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_m_inv_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_m_inv_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->m_inv);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_i_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_i_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_i_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->i = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_i_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_i_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->i);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_i_inv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_i_inv_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_i_inv_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->i_inv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_i_inv_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_i_inv_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->i_inv);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_p_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_p_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_p_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->p = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_p_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_p_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpVect *)& ((arg1)->p);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_v_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_v_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->v = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_v_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpVect *)& ((arg1)->v);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_f_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_f_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_f_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->f = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_f_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_f_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpVect *)& ((arg1)->f);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_a_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_a_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->a = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_a_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->a);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_w_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_w_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->w = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_w_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->w);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_t_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_t_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_t_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->t = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_t_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_t_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->t);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_rot_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_rot_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_rot_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->rot = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_rot_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_rot_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpVect *)& ((arg1)->rot);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_data_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_data_set" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_data_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_data_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpDataPointer) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_v_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_limit_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_v_limit_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->v_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_v_limit_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_limit_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->v_limit);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_w_limit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_limit_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_w_limit_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->w_limit = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_w_limit_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_limit_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->w_limit);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_v_bias_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_bias_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_v_bias_private_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->v_bias_private = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_v_bias_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_v_bias_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpVect *)& ((arg1)->v_bias_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_w_bias_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_bias_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBody_w_bias_private_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->w_bias_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_w_bias_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_w_bias_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpFloat) ((arg1)->w_bias_private);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_space_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpSpace *arg2 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_space_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_space_private_set" "', argument " "2"" of type '" "cpSpace *""'"); 
  }
  arg2 = (cpSpace *)(argp2);
  if (arg1) (arg1)->space_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_space_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_space_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpSpace *) ((arg1)->space_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_shapeList_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_shapeList_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_shapeList_private_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shapeList_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_shapeList_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_shapeList_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpShape *) ((arg1)->shapeList_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_arbiterList_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpArbiter *arg2 = (cpArbiter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_arbiterList_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArbiter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_arbiterList_private_set" "', argument " "2"" of type '" "cpArbiter *""'"); 
  }
  arg2 = (cpArbiter *)(argp2);
  if (arg1) (arg1)->arbiterList_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_arbiterList_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArbiter *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_arbiterList_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpArbiter *) ((arg1)->arbiterList_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArbiter, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_constraintList_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_constraintList_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_constraintList_private_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraintList_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_constraintList_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_constraintList_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpConstraint *) ((arg1)->constraintList_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpBody_node_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  cpComponentNode *arg2 = (cpComponentNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_node_private_set" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpComponentNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBody_node_private_set" "', argument " "2"" of type '" "cpComponentNode *""'"); 
  }
  arg2 = (cpComponentNode *)(argp2);
  if (arg1) (arg1)->node_private = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpBody_node_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpBody *arg1 = (struct cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpComponentNode *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBody_node_private_get" "', argument " "1"" of type '" "struct cpBody *""'"); 
  }
  arg1 = (struct cpBody *)(argp1);
  result = (cpComponentNode *)& ((arg1)->node_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpComponentNode, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpBody(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpBody(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpBody *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpBody(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpBody can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyAlloc.");  
  
  result = (cpBody *)cpBodyAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyInit" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodyInit" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpBodyInit" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpBody *)cpBodyInit(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyNew.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpBodyNew" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodyNew" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = (cpBody *)cpBodyNew(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyInitStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyInitStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyInitStatic" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpBody *)cpBodyInitStatic(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyNewStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyNewStatic.");  
  
  result = (cpBody *)cpBodyNewStatic();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyDestroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyDestroy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyDestroy" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  cpBodyDestroy(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyFree(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyFree.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyFree" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  cpBodyFree(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyActivate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyActivate.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyActivate" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  cpBodyActivate(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyActivateStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyActivateStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyActivateStatic" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyActivateStatic" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  cpBodyActivateStatic(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySleep(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySleep.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySleep" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  cpBodySleep(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySleepWithGroup(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySleepWithGroup.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySleepWithGroup" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodySleepWithGroup" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  cpBodySleepWithGroup(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyIsSleeping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyIsSleeping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyIsSleeping" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpBool)cpBodyIsSleeping((struct cpBody const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyIsStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyIsStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyIsStatic" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpBool)cpBodyIsStatic((struct cpBody const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyIsRogue(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyIsRogue.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyIsRogue" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpBool)cpBodyIsRogue((struct cpBody const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetSpace(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetSpace.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetSpace" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpSpace *)cpBodyGetSpace((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetMass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetMass.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetMass" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetMass((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetMass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetMass.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetMass" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetMass" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetMass(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetMoment(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetMoment.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetMoment" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetMoment((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetMoment(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetMoment.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetMoment" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetMoment" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetMoment(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetPos(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetPos.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetPos" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = cpBodyGetPos((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetPos(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetPos.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetPos" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodySetPos" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodySetPos" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpBodySetPos(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetVel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetVel.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetVel" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = cpBodyGetVel((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetVel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetVel.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetVel" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodySetVel" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodySetVel" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpBodySetVel(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetForce(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetForce.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetForce" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = cpBodyGetForce((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetForce(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetForce.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetForce" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodySetForce" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodySetForce" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpBodySetForce(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetAngle" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetAngle((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetAngle" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetAngle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetAngle(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetAngVel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetAngVel.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetAngVel" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetAngVel((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetAngVel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetAngVel.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetAngVel" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetAngVel" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetAngVel(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetTorque(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetTorque.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetTorque" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetTorque((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetTorque(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetTorque.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetTorque" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetTorque" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetTorque(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetRot(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetRot.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetRot" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = cpBodyGetRot((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetVelLimit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetVelLimit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetVelLimit" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetVelLimit((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetVelLimit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetVelLimit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetVelLimit" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetVelLimit" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetVelLimit(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetAngVelLimit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetAngVelLimit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetAngVelLimit" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyGetAngVelLimit((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetAngVelLimit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetAngVelLimit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetAngVelLimit" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodySetAngVelLimit" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodySetAngVelLimit(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetUserData" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpDataPointer)cpBodyGetUserData((struct cpBody const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodySetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) (cpDataPointer)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodySetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodySetUserData" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodySetUserData" "', argument " "2"" of type '" "cpDataPointer const""'"); 
  }
  cpBodySetUserData(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyUpdateVelocity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyUpdateVelocity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyUpdateVelocity" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyUpdateVelocity" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyUpdateVelocity" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpBodyUpdateVelocity" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpBodyUpdateVelocity" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  cpBodyUpdateVelocity(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyUpdatePosition(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyUpdatePosition.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyUpdatePosition" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBodyUpdatePosition" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpBodyUpdatePosition(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyLocal2World(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyLocal2World.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyLocal2World" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyLocal2World" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyLocal2World" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBodyLocal2World((struct cpBody const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyWorld2Local(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyWorld2Local.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyWorld2Local" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyWorld2Local" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyWorld2Local" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBodyWorld2Local((struct cpBody const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyResetForces(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyResetForces.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyResetForces" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  cpBodyResetForces(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyApplyForce(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyApplyForce.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyApplyForce" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyApplyForce" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyApplyForce" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBodyApplyForce" "', argument " "3"" of type '" "cpVect const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyApplyForce" "', argument " "3"" of type '" "cpVect const""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  cpBodyApplyForce(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyApplyImpulse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyApplyImpulse.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyApplyImpulse" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyApplyImpulse" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyApplyImpulse" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBodyApplyImpulse" "', argument " "3"" of type '" "cpVect const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyApplyImpulse" "', argument " "3"" of type '" "cpVect const""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  cpBodyApplyImpulse(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetVelAtWorldPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetVelAtWorldPoint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetVelAtWorldPoint" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyGetVelAtWorldPoint" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyGetVelAtWorldPoint" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBodyGetVelAtWorldPoint(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyGetVelAtLocalPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyGetVelAtLocalPoint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyGetVelAtLocalPoint" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBodyGetVelAtLocalPoint" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBodyGetVelAtLocalPoint" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = cpBodyGetVelAtLocalPoint(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyKineticEnergy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyKineticEnergy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyKineticEnergy" "', argument " "1"" of type '" "cpBody const *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  result = (cpFloat)cpBodyKineticEnergy((struct cpBody const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyEachShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBodyShapeIteratorFunc arg2 = (cpBodyShapeIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyEachShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyEachShape" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpShape_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBodyEachShape" "', argument " "2"" of type '" "cpBodyShapeIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBodyEachShape" "', argument " "3"" of type '" "void *""'"); 
  }
  cpBodyEachShape(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyEachConstraint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBodyConstraintIteratorFunc arg2 = (cpBodyConstraintIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyEachConstraint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyEachConstraint" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBodyEachConstraint" "', argument " "2"" of type '" "cpBodyConstraintIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBodyEachConstraint" "', argument " "3"" of type '" "void *""'"); 
  }
  cpBodyEachConstraint(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBodyEachArbiter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBodyArbiterIteratorFunc arg2 = (cpBodyArbiterIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBodyEachArbiter.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBodyEachArbiter" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpBodyEachArbiter" "', argument " "2"" of type '" "cpBodyArbiterIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBodyEachArbiter" "', argument " "3"" of type '" "void *""'"); 
  }
  cpBodyEachArbiter(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpNearestPointQueryInfo_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_shape_set" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpNearestPointQueryInfo_shape_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shape = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpNearestPointQueryInfo_shape_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_shape_get" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  result = (cpShape *) ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpNearestPointQueryInfo_p_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_p_set" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpNearestPointQueryInfo_p_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->p = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpNearestPointQueryInfo_p_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_p_get" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  result = (cpVect *)& ((arg1)->p);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpNearestPointQueryInfo_d_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_d_set" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpNearestPointQueryInfo_d_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->d = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpNearestPointQueryInfo_d_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpNearestPointQueryInfo *arg1 = (struct cpNearestPointQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpNearestPointQueryInfo_d_get" "', argument " "1"" of type '" "struct cpNearestPointQueryInfo *""'"); 
  }
  arg1 = (struct cpNearestPointQueryInfo *)(argp1);
  result = (cpFloat) ((arg1)->d);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpNearestPointQueryInfo(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpNearestPointQueryInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpNearestPointQueryInfo.");  
  result = (struct cpNearestPointQueryInfo *)calloc(1, sizeof(struct cpNearestPointQueryInfo));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpNearestPointQueryInfo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpNearestPointQueryInfo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpNearestPointQueryInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpNearestPointQueryInfo *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpSegmentQueryInfo_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_shape_set" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentQueryInfo_shape_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shape = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentQueryInfo_shape_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_shape_get" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  result = (cpShape *) ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentQueryInfo_t_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_t_set" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSegmentQueryInfo_t_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->t = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentQueryInfo_t_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_t_get" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  result = (cpFloat) ((arg1)->t);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentQueryInfo_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_n_set" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentQueryInfo_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentQueryInfo_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentQueryInfo *arg1 = (struct cpSegmentQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryInfo_n_get" "', argument " "1"" of type '" "struct cpSegmentQueryInfo *""'"); 
  }
  arg1 = (struct cpSegmentQueryInfo *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpSegmentQueryInfo(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpSegmentQueryInfo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpSegmentQueryInfo.");  
  result = (struct cpSegmentQueryInfo *)calloc(1, sizeof(struct cpSegmentQueryInfo));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpSegmentQueryInfo, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSegmentQueryInfo(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSegmentQueryInfo(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSegmentQueryInfo *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_CP_CIRCLE_SHAPE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(CP_CIRCLE_SHAPE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_SEGMENT_SHAPE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(CP_SEGMENT_SHAPE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_POLY_SHAPE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(CP_POLY_SHAPE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_NUM_SHAPES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(CP_NUM_SHAPES));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShapeClass_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  cpShapeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_type_set" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShapeClass_type_set" "', argument " "2"" of type '" "cpShapeType""'");
  } 
  arg2 = (cpShapeType)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShapeClass_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeType result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_type_get" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  result = (cpShapeType) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShapeClass_cacheData_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  cpShapeCacheDataImpl arg2 = (cpShapeCacheDataImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_cacheData_set" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_cpShape_cpVect_cpVect__cpBB);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpShapeClass_cacheData_set" "', argument " "2"" of type '" "cpShapeCacheDataImpl""'"); 
    }
  }
  if (arg1) (arg1)->cacheData = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShapeClass_cacheData_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeCacheDataImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_cacheData_get" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  result = (cpShapeCacheDataImpl) ((arg1)->cacheData);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_cpShape_cpVect_cpVect__cpBB);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShapeClass_destroy_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  cpShapeDestroyImpl arg2 = (cpShapeDestroyImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_destroy_set" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpShape__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpShapeClass_destroy_set" "', argument " "2"" of type '" "cpShapeDestroyImpl""'"); 
    }
  }
  if (arg1) (arg1)->destroy = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShapeClass_destroy_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeDestroyImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_destroy_get" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  result = (cpShapeDestroyImpl) ((arg1)->destroy);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpShape__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShapeClass_nearestPointQuery_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  cpShapeNearestPointQueryImpl arg2 = (cpShapeNearestPointQueryImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_nearestPointQuery_set" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpShapeClass_nearestPointQuery_set" "', argument " "2"" of type '" "cpShapeNearestPointQueryImpl""'"); 
    }
  }
  if (arg1) (arg1)->nearestPointQuery = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShapeClass_nearestPointQuery_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeNearestPointQueryImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_nearestPointQuery_get" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  result = (cpShapeNearestPointQueryImpl) ((arg1)->nearestPointQuery);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShapeClass_segmentQuery_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  cpShapeSegmentQueryImpl arg2 = (cpShapeSegmentQueryImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_segmentQuery_set" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpShapeClass_segmentQuery_set" "', argument " "2"" of type '" "cpShapeSegmentQueryImpl""'"); 
    }
  }
  if (arg1) (arg1)->segmentQuery = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShapeClass_segmentQuery_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShapeClass *arg1 = (struct cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeSegmentQueryImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShapeClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeClass_segmentQuery_get" "', argument " "1"" of type '" "struct cpShapeClass *""'"); 
  }
  arg1 = (struct cpShapeClass *)(argp1);
  result = (cpShapeSegmentQueryImpl) ((arg1)->segmentQuery);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpShapeClass(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpShapeClass *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpShapeClass.");  
  result = (struct cpShapeClass *)calloc(1, sizeof(struct cpShapeClass));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpShapeClass, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpShapeClass(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpShapeClass(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpShapeClass *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpShape_klass_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpShapeClass *arg2 = (cpShapeClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_klass_private_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShapeClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_klass_private_set" "', argument " "2"" of type '" "cpShapeClass const *""'"); 
  }
  arg2 = (cpShapeClass *)(argp2);
  if (arg1) (arg1)->klass_private = (cpShapeClass const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_klass_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShapeClass *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_klass_private_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpShapeClass *) ((arg1)->klass_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShapeClass, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_body_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_body_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_body_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->body = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_body_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_body_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpBody *) ((arg1)->body);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_bb_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpBB *arg2 = (cpBB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_bb_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_bb_set" "', argument " "2"" of type '" "cpBB *""'"); 
  }
  arg2 = (cpBB *)(argp2);
  if (arg1) (arg1)->bb = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_bb_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBB *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_bb_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpBB *)& ((arg1)->bb);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBB, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_sensor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpBool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_sensor_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShape_sensor_set" "', argument " "2"" of type '" "cpBool""'");
  } 
  arg2 = (cpBool)(val2);
  if (arg1) (arg1)->sensor = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_sensor_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_sensor_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpBool) ((arg1)->sensor);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_e_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_e_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShape_e_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->e = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_e_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_e_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpFloat) ((arg1)->e);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_u_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_u_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShape_u_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->u = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_u_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_u_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpFloat) ((arg1)->u);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_surface_v_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_surface_v_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_surface_v_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->surface_v = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_surface_v_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_surface_v_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpVect *)& ((arg1)->surface_v);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_data_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_data_set" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_data_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_data_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpDataPointer) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_collision_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpCollisionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_collision_type_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_collision_type_set" "', argument " "2"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShape_collision_type_set" "', argument " "2"" of type '" "cpCollisionType""'");
    } else {
      arg2 = *((cpCollisionType *)(argp2));
    }
  }
  if (arg1) (arg1)->collision_type = arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_collision_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpCollisionType result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_collision_type_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result =  ((arg1)->collision_type);
  jsresult = SWIG_NewPointerObj((cpCollisionType *)memcpy((cpCollisionType *)malloc(sizeof(cpCollisionType)),&result,sizeof(cpCollisionType)), SWIGTYPE_p_uintptr_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_group_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpGroup arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_group_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_group_set" "', argument " "2"" of type '" "cpGroup""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShape_group_set" "', argument " "2"" of type '" "cpGroup""'");
    } else {
      arg2 = *((cpGroup *)(argp2));
    }
  }
  if (arg1) (arg1)->group = arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_group_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpGroup result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_group_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result =  ((arg1)->group);
  jsresult = SWIG_NewPointerObj((cpGroup *)memcpy((cpGroup *)malloc(sizeof(cpGroup)),&result,sizeof(cpGroup)), SWIGTYPE_p_uintptr_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_layers_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpLayers arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_layers_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShape_layers_set" "', argument " "2"" of type '" "cpLayers""'");
  } 
  arg2 = (cpLayers)(val2);
  if (arg1) (arg1)->layers = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_layers_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpLayers result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_layers_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpLayers) ((arg1)->layers);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_space_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpSpace *arg2 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_space_private_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_space_private_set" "', argument " "2"" of type '" "cpSpace *""'"); 
  }
  arg2 = (cpSpace *)(argp2);
  if (arg1) (arg1)->space_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_space_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_space_private_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpSpace *) ((arg1)->space_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_next_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_next_private_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_next_private_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->next_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_next_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_next_private_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpShape *) ((arg1)->next_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_prev_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_prev_private_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_prev_private_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->prev_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_prev_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_prev_private_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result = (cpShape *) ((arg1)->prev_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpShape_hashid_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  cpHashValue arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_hashid_private_set" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShape_hashid_private_set" "', argument " "2"" of type '" "cpHashValue""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShape_hashid_private_set" "', argument " "2"" of type '" "cpHashValue""'");
    } else {
      arg2 = *((cpHashValue *)(argp2));
    }
  }
  if (arg1) (arg1)->hashid_private = arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpShape_hashid_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpShape *arg1 = (struct cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpHashValue result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShape_hashid_private_get" "', argument " "1"" of type '" "struct cpShape *""'"); 
  }
  arg1 = (struct cpShape *)(argp1);
  result =  ((arg1)->hashid_private);
  jsresult = SWIG_NewPointerObj((cpHashValue *)memcpy((cpHashValue *)malloc(sizeof(cpHashValue)),&result,sizeof(cpHashValue)), SWIGTYPE_p_uintptr_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpShape(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpShape(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpShape *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpShape(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpShape can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeDestroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeDestroy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeDestroy" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  cpShapeDestroy(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeFree(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeFree.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeFree" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  cpShapeFree(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeCacheBB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBB result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeCacheBB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeCacheBB" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpShapeCacheBB(arg1);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeUpdate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpBB result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeUpdate.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeUpdate" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeUpdate" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeUpdate" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpShapeUpdate" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeUpdate" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = cpShapeUpdate(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapePointQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapePointQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapePointQuery" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapePointQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapePointQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  result = (cpBool)cpShapePointQuery(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSegmentQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  cpSegmentQueryInfo *arg4 = (cpSegmentQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  cpBool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSegmentQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSegmentQuery" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSegmentQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeSegmentQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpShapeSegmentQuery" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeSegmentQuery" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpShapeSegmentQuery" "', argument " "4"" of type '" "cpSegmentQueryInfo *""'"); 
  }
  arg4 = (cpSegmentQueryInfo *)(argp4);
  result = (cpBool)cpShapeSegmentQuery(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentQueryHitPoint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpSegmentQueryInfo arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpVect result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentQueryHitPoint.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryHitPoint" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitPoint" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentQueryHitPoint" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitPoint" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpSegmentQueryInfo,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSegmentQueryHitPoint" "', argument " "3"" of type '" "cpSegmentQueryInfo const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitPoint" "', argument " "3"" of type '" "cpSegmentQueryInfo const""'");
    } else {
      arg3 = *((cpSegmentQueryInfo *)(argp3));
    }
  }
  result = cpSegmentQueryHitPoint(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentQueryHitDist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpSegmentQueryInfo arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentQueryHitDist.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentQueryHitDist" "', argument " "1"" of type '" "cpVect const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitDist" "', argument " "1"" of type '" "cpVect const""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentQueryHitDist" "', argument " "2"" of type '" "cpVect const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitDist" "', argument " "2"" of type '" "cpVect const""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpSegmentQueryInfo,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSegmentQueryHitDist" "', argument " "3"" of type '" "cpSegmentQueryInfo const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentQueryHitDist" "', argument " "3"" of type '" "cpSegmentQueryInfo const""'");
    } else {
      arg3 = *((cpSegmentQueryInfo *)(argp3));
    }
  }
  result = (cpFloat)cpSegmentQueryHitDist(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetSpace(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetSpace.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetSpace" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpSpace *)cpShapeGetSpace((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetBody" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpBody *)cpShapeGetBody((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetBody" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSetBody" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  cpShapeSetBody(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetBB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBB result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetBB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetBB" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpShapeGetBB((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpBB *)memcpy((cpBB *)malloc(sizeof(cpBB)),&result,sizeof(cpBB)), SWIGTYPE_p_cpBB, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetSensor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetSensor.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetSensor" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpBool)cpShapeGetSensor((struct cpShape const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetSensor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpBool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetSensor.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetSensor" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShapeSetSensor" "', argument " "2"" of type '" "cpBool""'");
  } 
  arg2 = (cpBool)(val2);
  cpShapeSetSensor(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetElasticity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetElasticity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetElasticity" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpFloat)cpShapeGetElasticity((struct cpShape const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetElasticity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetElasticity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetElasticity" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShapeSetElasticity" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpShapeSetElasticity(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetFriction(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetFriction.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetFriction" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpFloat)cpShapeGetFriction((struct cpShape const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetFriction(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetFriction.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetFriction" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShapeSetFriction" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpShapeSetFriction(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetSurfaceVelocity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetSurfaceVelocity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetSurfaceVelocity" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpShapeGetSurfaceVelocity((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetSurfaceVelocity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetSurfaceVelocity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetSurfaceVelocity" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSetSurfaceVelocity" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeSetSurfaceVelocity" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpShapeSetSurfaceVelocity(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetUserData" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpDataPointer)cpShapeGetUserData((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetUserData" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSetUserData" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  cpShapeSetUserData(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetCollisionType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpCollisionType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetCollisionType.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetCollisionType" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpShapeGetCollisionType((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpCollisionType *)memcpy((cpCollisionType *)malloc(sizeof(cpCollisionType)),&result,sizeof(cpCollisionType)), SWIGTYPE_p_uintptr_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetCollisionType(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpCollisionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetCollisionType.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetCollisionType" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSetCollisionType" "', argument " "2"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeSetCollisionType" "', argument " "2"" of type '" "cpCollisionType""'");
    } else {
      arg2 = *((cpCollisionType *)(argp2));
    }
  }
  cpShapeSetCollisionType(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetGroup(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpGroup result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetGroup.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetGroup" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpShapeGetGroup((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpGroup *)memcpy((cpGroup *)malloc(sizeof(cpGroup)),&result,sizeof(cpGroup)), SWIGTYPE_p_uintptr_t, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetGroup(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpGroup arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetGroup.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetGroup" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpShapeSetGroup" "', argument " "2"" of type '" "cpGroup""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpShapeSetGroup" "', argument " "2"" of type '" "cpGroup""'");
    } else {
      arg2 = *((cpGroup *)(argp2));
    }
  }
  cpShapeSetGroup(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeGetLayers(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpLayers result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeGetLayers.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeGetLayers" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpLayers)cpShapeGetLayers((struct cpShape const *)arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpShapeSetLayers(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpLayers arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpShapeSetLayers.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpShapeSetLayers" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpShapeSetLayers" "', argument " "2"" of type '" "cpLayers""'");
  } 
  arg2 = (cpLayers)(val2);
  cpShapeSetLayers(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpResetShapeIdCounter(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpResetShapeIdCounter.");  
  
  cpResetShapeIdCounter();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpCircleShape_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_shape_set" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpCircleShape_shape_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shape = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpCircleShape_shape_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_shape_get" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  result = (cpShape *)& ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpCircleShape_c_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_c_set" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpCircleShape_c_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->c = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpCircleShape_c_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_c_get" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  result = (cpVect *)& ((arg1)->c);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpCircleShape_tc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_tc_set" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpCircleShape_tc_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->tc = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpCircleShape_tc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_tc_get" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  result = (cpVect *)& ((arg1)->tc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpCircleShape_r_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_r_set" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpCircleShape_r_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->r = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpCircleShape_r_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpCircleShape *arg1 = (struct cpCircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShape_r_get" "', argument " "1"" of type '" "struct cpCircleShape *""'"); 
  }
  arg1 = (struct cpCircleShape *)(argp1);
  result = (cpFloat) ((arg1)->r);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpCircleShape(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpCircleShape(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpCircleShape *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpCircleShape(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpCircleShape can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCircleShapeAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpCircleShape *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCircleShapeAlloc.");  
  
  result = (cpCircleShape *)cpCircleShapeAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpCircleShape, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCircleShapeInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpCircleShape *arg1 = (cpCircleShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpVect arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpCircleShape *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCircleShapeInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpCircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShapeInit" "', argument " "1"" of type '" "cpCircleShape *""'"); 
  }
  arg1 = (cpCircleShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpCircleShapeInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpCircleShapeInit" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpCircleShapeInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpCircleShapeInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpCircleShape *)cpCircleShapeInit(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpCircleShape, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCircleShapeNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCircleShapeNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShapeNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpCircleShapeNew" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpCircleShapeNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpCircleShapeNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = (cpShape *)cpCircleShapeNew(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCircleShapeGetOffset(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCircleShapeGetOffset.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShapeGetOffset" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpCircleShapeGetOffset((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCircleShapeGetRadius(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCircleShapeGetRadius.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpCircleShapeGetRadius" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpFloat)cpCircleShapeGetRadius((struct cpShape const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_shape_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_shape_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shape = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_shape_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_shape_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpShape *)& ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_a_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_a_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->a = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_a_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->a);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_b_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_b_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->b = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_b_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->b);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_n_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_n_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_ta_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_ta_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_ta_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->ta = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_ta_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_ta_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->ta);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_tb_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_tb_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_tb_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->tb = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_tb_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_tb_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->tb);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_tn_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_tn_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_tn_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->tn = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_tn_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_tn_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->tn);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_r_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_r_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSegmentShape_r_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->r = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_r_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_r_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpFloat) ((arg1)->r);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_a_tangent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_a_tangent_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_a_tangent_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->a_tangent = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_a_tangent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_a_tangent_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->a_tangent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSegmentShape_b_tangent_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_b_tangent_set" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShape_b_tangent_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->b_tangent = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSegmentShape_b_tangent_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSegmentShape *arg1 = (struct cpSegmentShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShape_b_tangent_get" "', argument " "1"" of type '" "struct cpSegmentShape *""'"); 
  }
  arg1 = (struct cpSegmentShape *)(argp1);
  result = (cpVect *)& ((arg1)->b_tangent);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSegmentShape(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSegmentShape(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSegmentShape *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpSegmentShape(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpSegmentShape can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSegmentShape *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeAlloc.");  
  
  result = (cpSegmentShape *)cpSegmentShapeAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSegmentShape, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSegmentShape *arg1 = (cpSegmentShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  cpFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  cpSegmentShape *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeInit" "', argument " "1"" of type '" "cpSegmentShape *""'"); 
  }
  arg1 = (cpSegmentShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShapeInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSegmentShapeInit" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeInit" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSegmentShapeInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpSegmentShapeInit" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (cpSegmentShape *)cpSegmentShapeInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSegmentShape, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShapeNew" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeNew" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSegmentShapeNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSegmentShapeNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpShape *)cpSegmentShapeNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeSetNeighbors(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeSetNeighbors.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeSetNeighbors" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSegmentShapeSetNeighbors" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeSetNeighbors" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSegmentShapeSetNeighbors" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSegmentShapeSetNeighbors" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  cpSegmentShapeSetNeighbors(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeGetA(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeGetA.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeGetA" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpSegmentShapeGetA((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeGetB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeGetB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeGetB" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpSegmentShapeGetB((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeGetNormal(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeGetNormal.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeGetNormal" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = cpSegmentShapeGetNormal((struct cpShape const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSegmentShapeGetRadius(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSegmentShapeGetRadius.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSegmentShapeGetRadius" "', argument " "1"" of type '" "cpShape const *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (cpFloat)cpSegmentShapeGetRadius((struct cpShape const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSplittingPlane_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSplittingPlane *arg1 = (struct cpSplittingPlane *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSplittingPlane_n_set" "', argument " "1"" of type '" "struct cpSplittingPlane *""'"); 
  }
  arg1 = (struct cpSplittingPlane *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSplittingPlane_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSplittingPlane_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSplittingPlane *arg1 = (struct cpSplittingPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSplittingPlane_n_get" "', argument " "1"" of type '" "struct cpSplittingPlane *""'"); 
  }
  arg1 = (struct cpSplittingPlane *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSplittingPlane_d_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSplittingPlane *arg1 = (struct cpSplittingPlane *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSplittingPlane_d_set" "', argument " "1"" of type '" "struct cpSplittingPlane *""'"); 
  }
  arg1 = (struct cpSplittingPlane *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSplittingPlane_d_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->d = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSplittingPlane_d_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSplittingPlane *arg1 = (struct cpSplittingPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSplittingPlane_d_get" "', argument " "1"" of type '" "struct cpSplittingPlane *""'"); 
  }
  arg1 = (struct cpSplittingPlane *)(argp1);
  result = (cpFloat) ((arg1)->d);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpSplittingPlane(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpSplittingPlane *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpSplittingPlane.");  
  result = (struct cpSplittingPlane *)calloc(1, sizeof(struct cpSplittingPlane));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpSplittingPlane, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSplittingPlane(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSplittingPlane(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSplittingPlane *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpPolyShape_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_shape_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShape_shape_set" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  if (arg1) (arg1)->shape = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_shape_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_shape_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (cpShape *)& ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPolyShape_numVerts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_numVerts_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPolyShape_numVerts_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->numVerts = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_numVerts_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_numVerts_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (int) ((arg1)->numVerts);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPolyShape_verts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_verts_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShape_verts_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->verts = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_verts_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_verts_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (cpVect *) ((arg1)->verts);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPolyShape_tVerts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_tVerts_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShape_tVerts_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->tVerts = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_tVerts_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_tVerts_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (cpVect *) ((arg1)->tVerts);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPolyShape_planes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  cpSplittingPlane *arg2 = (cpSplittingPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_planes_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSplittingPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShape_planes_set" "', argument " "2"" of type '" "cpSplittingPlane *""'"); 
  }
  arg2 = (cpSplittingPlane *)(argp2);
  if (arg1) (arg1)->planes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_planes_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSplittingPlane *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_planes_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (cpSplittingPlane *) ((arg1)->planes);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPolyShape_tPlanes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  cpSplittingPlane *arg2 = (cpSplittingPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_tPlanes_set" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSplittingPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShape_tPlanes_set" "', argument " "2"" of type '" "cpSplittingPlane *""'"); 
  }
  arg2 = (cpSplittingPlane *)(argp2);
  if (arg1) (arg1)->tPlanes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPolyShape_tPlanes_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPolyShape *arg1 = (struct cpPolyShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSplittingPlane *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShape_tPlanes_get" "', argument " "1"" of type '" "struct cpPolyShape *""'"); 
  }
  arg1 = (struct cpPolyShape *)(argp1);
  result = (cpSplittingPlane *) ((arg1)->tPlanes);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSplittingPlane, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpPolyShape(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpPolyShape(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpPolyShape *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpPolyShape(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpPolyShape can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyShapeAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPolyShape *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyShapeAlloc.");  
  
  result = (cpPolyShape *)cpPolyShapeAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPolyShape, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyShapeInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPolyShape *arg1 = (cpPolyShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  int arg3 ;
  cpVect *arg4 = (cpVect *) 0 ;
  cpVect arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  cpPolyShape *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyShapeInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShapeInit" "', argument " "1"" of type '" "cpPolyShape *""'"); 
  }
  arg1 = (cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPolyShapeInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpPolyShapeInit" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPolyShapeInit" "', argument " "4"" of type '" "cpVect const *""'"); 
  }
  arg4 = (cpVect *)(argp4);
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpPolyShapeInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPolyShapeInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  result = (cpPolyShape *)cpPolyShapeInit(arg1,arg2,arg3,(struct cpVect const *)arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPolyShape, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyShapeNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  int arg2 ;
  cpVect *arg3 = (cpVect *) 0 ;
  cpVect arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyShapeNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShapeNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPolyShapeNew" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPolyShapeNew" "', argument " "3"" of type '" "cpVect *""'"); 
  }
  arg3 = (cpVect *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPolyShapeNew" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPolyShapeNew" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpShape *)cpPolyShapeNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBoxShapeInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPolyShape *arg1 = (cpPolyShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpPolyShape *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBoxShapeInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBoxShapeInit" "', argument " "1"" of type '" "cpPolyShape *""'"); 
  }
  arg1 = (cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBoxShapeInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpBoxShapeInit" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpBoxShapeInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpPolyShape *)cpBoxShapeInit(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPolyShape, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBoxShapeInit2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPolyShape *arg1 = (cpPolyShape *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBB arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpPolyShape *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBoxShapeInit2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpPolyShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBoxShapeInit2" "', argument " "1"" of type '" "cpPolyShape *""'"); 
  }
  arg1 = (cpPolyShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBoxShapeInit2" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpBoxShapeInit2" "', argument " "3"" of type '" "cpBB""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBoxShapeInit2" "', argument " "3"" of type '" "cpBB""'");
    } else {
      arg3 = *((cpBB *)(argp3));
    }
  }
  result = (cpPolyShape *)cpBoxShapeInit2(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPolyShape, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBoxShapeNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBoxShapeNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBoxShapeNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpBoxShapeNew" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpBoxShapeNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpShape *)cpBoxShapeNew(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpBoxShapeNew2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBB arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpBoxShapeNew2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpBoxShapeNew2" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpBoxShapeNew2" "', argument " "2"" of type '" "cpBB""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpBoxShapeNew2" "', argument " "2"" of type '" "cpBB""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = (cpShape *)cpBoxShapeNew2(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyValidate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect *arg1 = (cpVect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyValidate.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyValidate" "', argument " "1"" of type '" "cpVect const *""'"); 
  }
  arg1 = (cpVect *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPolyValidate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (cpBool)cpPolyValidate((struct cpVect const *)arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyShapeGetNumVerts(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyShapeGetNumVerts.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShapeGetNumVerts" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  result = (int)cpPolyShapeGetNumVerts(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPolyShapeGetVert(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpShape *arg1 = (cpShape *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPolyShapeGetVert.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPolyShapeGetVert" "', argument " "1"" of type '" "cpShape *""'"); 
  }
  arg1 = (cpShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPolyShapeGetVert" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = cpPolyShapeGetVert(arg1,arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraintClass_preStep_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  cpConstraintPreStepImpl arg2 = (cpConstraintPreStepImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_preStep_set" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintClass_preStep_set" "', argument " "2"" of type '" "cpConstraintPreStepImpl""'"); 
    }
  }
  if (arg1) (arg1)->preStep = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraintClass_preStep_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintPreStepImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_preStep_get" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  result = (cpConstraintPreStepImpl) ((arg1)->preStep);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraintClass_applyCachedImpulse_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  cpConstraintApplyCachedImpulseImpl arg2 = (cpConstraintApplyCachedImpulseImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_applyCachedImpulse_set" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintClass_applyCachedImpulse_set" "', argument " "2"" of type '" "cpConstraintApplyCachedImpulseImpl""'"); 
    }
  }
  if (arg1) (arg1)->applyCachedImpulse = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraintClass_applyCachedImpulse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintApplyCachedImpulseImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_applyCachedImpulse_get" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  result = (cpConstraintApplyCachedImpulseImpl) ((arg1)->applyCachedImpulse);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraintClass_applyImpulse_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  cpConstraintApplyImpulseImpl arg2 = (cpConstraintApplyImpulseImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_applyImpulse_set" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintClass_applyImpulse_set" "', argument " "2"" of type '" "cpConstraintApplyImpulseImpl""'"); 
    }
  }
  if (arg1) (arg1)->applyImpulse = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraintClass_applyImpulse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintApplyImpulseImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_applyImpulse_get" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  result = (cpConstraintApplyImpulseImpl) ((arg1)->applyImpulse);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraintClass_getImpulse_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  cpConstraintGetImpulseImpl arg2 = (cpConstraintGetImpulseImpl) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_getImpulse_set" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintClass_getImpulse_set" "', argument " "2"" of type '" "cpConstraintGetImpulseImpl""'"); 
    }
  }
  if (arg1) (arg1)->getImpulse = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraintClass_getImpulse_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraintClass *arg1 = (struct cpConstraintClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintGetImpulseImpl result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintClass_getImpulse_get" "', argument " "1"" of type '" "struct cpConstraintClass *""'"); 
  }
  arg1 = (struct cpConstraintClass *)(argp1);
  result = (cpConstraintGetImpulseImpl) ((arg1)->getImpulse);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint__float);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_cpConstraintClass(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpConstraintClass *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpConstraintClass.");  
  result = (struct cpConstraintClass *)calloc(1, sizeof(struct cpConstraintClass));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpConstraintClass, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpConstraintClass(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpConstraintClass(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpConstraintClass *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


void _wrap_cpConstraint_klass_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpConstraintClass *arg2 = (cpConstraintClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_klass_private_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraintClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_klass_private_set" "', argument " "2"" of type '" "cpConstraintClass const *""'"); 
  }
  arg2 = (cpConstraintClass *)(argp2);
  if (arg1) (arg1)->klass_private = (cpConstraintClass const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_klass_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintClass *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_klass_private_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpConstraintClass *) ((arg1)->klass_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_a_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_a_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->a = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_a_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpBody *) ((arg1)->a);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_b_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_b_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->b = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_b_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpBody *) ((arg1)->b);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_space_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpSpace *arg2 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_space_private_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_space_private_set" "', argument " "2"" of type '" "cpSpace *""'"); 
  }
  arg2 = (cpSpace *)(argp2);
  if (arg1) (arg1)->space_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_space_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_space_private_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpSpace *) ((arg1)->space_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_next_a_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_next_a_private_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_next_a_private_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->next_a_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_next_a_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_next_a_private_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpConstraint *) ((arg1)->next_a_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_next_b_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_next_b_private_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_next_b_private_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->next_b_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_next_b_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_next_b_private_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpConstraint *) ((arg1)->next_b_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_maxForce_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_maxForce_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraint_maxForce_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->maxForce = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_maxForce_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_maxForce_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpFloat) ((arg1)->maxForce);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_errorBias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_errorBias_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraint_errorBias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->errorBias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_errorBias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_errorBias_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpFloat) ((arg1)->errorBias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_maxBias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_maxBias_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraint_maxBias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->maxBias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_maxBias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_maxBias_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpFloat) ((arg1)->maxBias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_preSolve_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpConstraintPreSolveFunc arg2 = (cpConstraintPreSolveFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_preSolve_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraint_preSolve_set" "', argument " "2"" of type '" "cpConstraintPreSolveFunc""'"); 
    }
  }
  if (arg1) (arg1)->preSolve = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_preSolve_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintPreSolveFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_preSolve_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpConstraintPreSolveFunc) ((arg1)->preSolve);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_postSolve_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpConstraintPostSolveFunc arg2 = (cpConstraintPostSolveFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_postSolve_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraint_postSolve_set" "', argument " "2"" of type '" "cpConstraintPostSolveFunc""'"); 
    }
  }
  if (arg1) (arg1)->postSolve = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_postSolve_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintPostSolveFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_postSolve_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpConstraintPostSolveFunc) ((arg1)->postSolve);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpConstraint_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_data_set" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraint_data_set" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpConstraint_data_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpConstraint *arg1 = (struct cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraint_data_get" "', argument " "1"" of type '" "struct cpConstraint *""'"); 
  }
  arg1 = (struct cpConstraint *)(argp1);
  result = (cpDataPointer) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpConstraint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpConstraint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpConstraint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpConstraint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpConstraint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintDestroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintDestroy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintDestroy" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  cpConstraintDestroy(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintFree(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintFree.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintFree" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  cpConstraintFree(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintActivateBodies(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintActivateBodies.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintActivateBodies" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  cpConstraintActivateBodies(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetSpace(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetSpace.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetSpace" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpSpace *)cpConstraintGetSpace((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetA(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetA.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetA" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpBody *)cpConstraintGetA((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetB" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpBody *)cpConstraintGetB((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetMaxForce(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetMaxForce.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetMaxForce" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpConstraintGetMaxForce((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetMaxForce(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetMaxForce.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetMaxForce" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraintSetMaxForce" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpConstraintSetMaxForce(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetErrorBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetErrorBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetErrorBias" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpConstraintGetErrorBias((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetErrorBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetErrorBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetErrorBias" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraintSetErrorBias" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpConstraintSetErrorBias(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetMaxBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetMaxBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetMaxBias" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpConstraintGetMaxBias((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetMaxBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetMaxBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetMaxBias" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpConstraintSetMaxBias" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpConstraintSetMaxBias(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetPreSolveFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintPreSolveFunc result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetPreSolveFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetPreSolveFunc" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpConstraintPreSolveFunc)cpConstraintGetPreSolveFunc((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetPreSolveFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpConstraintPreSolveFunc arg2 = (cpConstraintPreSolveFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetPreSolveFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetPreSolveFunc" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintSetPreSolveFunc" "', argument " "2"" of type '" "cpConstraintPreSolveFunc""'"); 
    }
  }
  cpConstraintSetPreSolveFunc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetPostSolveFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraintPostSolveFunc result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetPostSolveFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetPostSolveFunc" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpConstraintPostSolveFunc)cpConstraintGetPostSolveFunc((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetPostSolveFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpConstraintPostSolveFunc arg2 = (cpConstraintPostSolveFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetPostSolveFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetPostSolveFunc" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_p_struct_cpSpace__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpConstraintSetPostSolveFunc" "', argument " "2"" of type '" "cpConstraintPostSolveFunc""'"); 
    }
  }
  cpConstraintSetPostSolveFunc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetUserData" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpDataPointer)cpConstraintGetUserData((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintSetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintSetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintSetUserData" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConstraintSetUserData" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  cpConstraintSetUserData(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConstraintGetImpulse(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConstraintGetImpulse.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpConstraintGetImpulse" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpConstraintGetImpulse(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointGetClass.");  
  
  result = (cpConstraintClass *)cpPinJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_constraint_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_constraint_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_anchr1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_anchr1_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_anchr1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_anchr1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_anchr1_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_anchr2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_anchr2_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_anchr2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_anchr2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_anchr2_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_dist_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_dist_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPinJoint_dist_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->dist = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_dist_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_dist_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpFloat) ((arg1)->dist);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_r1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_r1_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_r1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_r1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_r1_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_r2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_r2_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_r2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_r2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_r2_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_n_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJoint_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_n_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_nMass_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_nMass_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPinJoint_nMass_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->nMass = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_nMass_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_nMass_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpFloat) ((arg1)->nMass);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_jnAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_jnAcc_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPinJoint_jnAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jnAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_jnAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_jnAcc_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpFloat) ((arg1)->jnAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPinJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_bias_set" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPinJoint_bias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->bias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPinJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPinJoint *arg1 = (struct cpPinJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJoint_bias_get" "', argument " "1"" of type '" "struct cpPinJoint *""'"); 
  }
  arg1 = (struct cpPinJoint *)(argp1);
  result = (cpFloat) ((arg1)->bias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpPinJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpPinJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpPinJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpPinJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpPinJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPinJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointAlloc.");  
  
  result = (cpPinJoint *)cpPinJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPinJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPinJoint *arg1 = (cpPinJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpVect arg4 ;
  cpVect arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  cpPinJoint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpPinJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointInit" "', argument " "1"" of type '" "cpPinJoint *""'"); 
  }
  arg1 = (cpPinJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPinJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPinJointInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpPinJointInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  result = (cpPinJoint *)cpPinJointInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPinJoint, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPinJointNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPinJointNew" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointNew" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpConstraint *)cpPinJointNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointGetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointGetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointGetAnchr1" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpPinJointGetAnchr1((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointSetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointSetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointSetAnchr1" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpPinJointSetAnchr1(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointGetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointGetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointGetAnchr2" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpPinJointGetAnchr2((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointSetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointSetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointSetAnchr2" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPinJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPinJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpPinJointSetAnchr2(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointGetDist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointGetDist.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointGetDist" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpPinJointGetDist((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPinJointSetDist(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPinJointSetDist.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPinJointSetDist" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpPinJointSetDist" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpPinJointSetDist(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointGetClass.");  
  
  result = (cpConstraintClass *)cpSlideJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_constraint_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_constraint_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_anchr1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_anchr1_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_anchr1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_anchr1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_anchr1_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_anchr2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_anchr2_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_anchr2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_anchr2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_anchr2_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_min_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJoint_min_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->min = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_min_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_min_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpFloat) ((arg1)->min);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_max_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJoint_max_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->max = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_max_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_max_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpFloat) ((arg1)->max);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_r1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_r1_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_r1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_r1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_r1_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_r2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_r2_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_r2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_r2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_r2_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_n_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJoint_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_n_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_nMass_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_nMass_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJoint_nMass_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->nMass = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_nMass_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_nMass_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpFloat) ((arg1)->nMass);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_jnAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_jnAcc_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJoint_jnAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jnAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_jnAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_jnAcc_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpFloat) ((arg1)->jnAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSlideJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_bias_set" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJoint_bias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->bias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSlideJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSlideJoint *arg1 = (struct cpSlideJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJoint_bias_get" "', argument " "1"" of type '" "struct cpSlideJoint *""'"); 
  }
  arg1 = (struct cpSlideJoint *)(argp1);
  result = (cpFloat) ((arg1)->bias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSlideJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSlideJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSlideJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpSlideJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpSlideJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSlideJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointAlloc.");  
  
  result = (cpSlideJoint *)cpSlideJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSlideJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSlideJoint *arg1 = (cpSlideJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpVect arg4 ;
  cpVect arg5 ;
  cpFloat arg6 ;
  cpFloat arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  cpSlideJoint *result = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointInit" "', argument " "1"" of type '" "cpSlideJoint *""'"); 
  }
  arg1 = (cpSlideJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSlideJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSlideJointInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSlideJointInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cpSlideJointInit" "', argument " "6"" of type '" "cpFloat""'");
  } 
  arg6 = (cpFloat)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cpSlideJointInit" "', argument " "7"" of type '" "cpFloat""'");
  } 
  arg7 = (cpFloat)(val7);
  result = (cpSlideJoint *)cpSlideJointInit(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSlideJoint, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  cpFloat arg5 ;
  cpFloat arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSlideJointNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSlideJointNew" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointNew" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpSlideJointNew" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cpSlideJointNew" "', argument " "6"" of type '" "cpFloat""'");
  } 
  arg6 = (cpFloat)(val6);
  result = (cpConstraint *)cpSlideJointNew(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointGetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointGetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointGetAnchr1" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpSlideJointGetAnchr1((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointSetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointSetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointSetAnchr1" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpSlideJointSetAnchr1(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointGetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointGetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointGetAnchr2" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpSlideJointGetAnchr2((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointSetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointSetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointSetAnchr2" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSlideJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSlideJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpSlideJointSetAnchr2(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointGetMin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointGetMin.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointGetMin" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpSlideJointGetMin((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointSetMin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointSetMin.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointSetMin" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJointSetMin" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSlideJointSetMin(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointGetMax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointGetMax.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointGetMax" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpSlideJointGetMax((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSlideJointSetMax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSlideJointSetMax.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSlideJointSetMax" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSlideJointSetMax" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSlideJointSetMax(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointGetClass.");  
  
  result = (cpConstraintClass *)cpPivotJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_constraint_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_constraint_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_anchr1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_anchr1_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_anchr1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_anchr1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_anchr1_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_anchr2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_anchr2_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_anchr2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_anchr2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_anchr2_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_r1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_r1_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_r1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_r1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_r1_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_r2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_r2_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_r2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_r2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_r2_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_k_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpMat2x2 *arg2 = (cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_k_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_k_set" "', argument " "2"" of type '" "cpMat2x2 *""'"); 
  }
  arg2 = (cpMat2x2 *)(argp2);
  if (arg1) (arg1)->k = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_k_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpMat2x2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_k_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpMat2x2 *)& ((arg1)->k);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpMat2x2, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_jAcc_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_jAcc_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->jAcc = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_jAcc_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->jAcc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpPivotJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_bias_set" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJoint_bias_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->bias = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpPivotJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpPivotJoint *arg1 = (struct cpPivotJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJoint_bias_get" "', argument " "1"" of type '" "struct cpPivotJoint *""'"); 
  }
  arg1 = (struct cpPivotJoint *)(argp1);
  result = (cpVect *)& ((arg1)->bias);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpPivotJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpPivotJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpPivotJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpPivotJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpPivotJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPivotJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointAlloc.");  
  
  result = (cpPivotJoint *)cpPivotJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPivotJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpPivotJoint *arg1 = (cpPivotJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpVect arg4 ;
  cpVect arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  cpPivotJoint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointInit" "', argument " "1"" of type '" "cpPivotJoint *""'"); 
  }
  arg1 = (cpPivotJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPivotJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPivotJointInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpPivotJointInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  result = (cpPivotJoint *)cpPivotJointInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpPivotJoint, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPivotJointNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = (cpConstraint *)cpPivotJointNew(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointNew2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointNew2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointNew2" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJointNew2" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpPivotJointNew2" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointNew2" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpPivotJointNew2" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointNew2" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpConstraint *)cpPivotJointNew2(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointGetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointGetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointGetAnchr1" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpPivotJointGetAnchr1((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointSetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointSetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointSetAnchr1" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointSetAnchr1" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpPivotJointSetAnchr1(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointGetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointGetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointGetAnchr2" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpPivotJointGetAnchr2((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpPivotJointSetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpPivotJointSetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpPivotJointSetAnchr2" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpPivotJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpPivotJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpPivotJointSetAnchr2(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointGetClass.");  
  
  result = (cpConstraintClass *)cpGrooveJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_constraint_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_constraint_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_grv_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_n_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_grv_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->grv_n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_grv_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_n_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->grv_n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_grv_a_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_a_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_grv_a_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->grv_a = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_grv_a_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_a_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->grv_a);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_grv_b_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_b_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_grv_b_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->grv_b = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_grv_b_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_b_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->grv_b);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_anchr2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_anchr2_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_anchr2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_anchr2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_anchr2_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->anchr2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_grv_tn_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_tn_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_grv_tn_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->grv_tn = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_grv_tn_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_grv_tn_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->grv_tn);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_clamp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_clamp_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGrooveJoint_clamp_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->clamp = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_clamp_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_clamp_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpFloat) ((arg1)->clamp);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_r1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_r1_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_r1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_r1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_r1_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_r2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_r2_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_r2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_r2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_r2_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->r2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_k_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpMat2x2 *arg2 = (cpMat2x2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_k_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpMat2x2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_k_set" "', argument " "2"" of type '" "cpMat2x2 *""'"); 
  }
  arg2 = (cpMat2x2 *)(argp2);
  if (arg1) (arg1)->k = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_k_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpMat2x2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_k_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpMat2x2 *)& ((arg1)->k);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpMat2x2, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_jAcc_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_jAcc_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->jAcc = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_jAcc_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->jAcc);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGrooveJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_bias_set" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJoint_bias_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->bias = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGrooveJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGrooveJoint *arg1 = (struct cpGrooveJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJoint_bias_get" "', argument " "1"" of type '" "struct cpGrooveJoint *""'"); 
  }
  arg1 = (struct cpGrooveJoint *)(argp1);
  result = (cpVect *)& ((arg1)->bias);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpGrooveJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpGrooveJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpGrooveJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpGrooveJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpGrooveJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpGrooveJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointAlloc.");  
  
  result = (cpGrooveJoint *)cpGrooveJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpGrooveJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpGrooveJoint *arg1 = (cpGrooveJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpVect arg4 ;
  cpVect arg5 ;
  cpVect arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  cpGrooveJoint *result = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointInit" "', argument " "1"" of type '" "cpGrooveJoint *""'"); 
  }
  arg1 = (cpGrooveJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpGrooveJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpGrooveJointInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpGrooveJointInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpGrooveJointInit" "', argument " "6"" of type '" "cpVect""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointInit" "', argument " "6"" of type '" "cpVect""'");
    } else {
      arg6 = *((cpVect *)(argp6));
    }
  }
  result = (cpGrooveJoint *)cpGrooveJointInit(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpGrooveJoint, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  cpVect arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpGrooveJointNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpGrooveJointNew" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointNew" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpGrooveJointNew" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointNew" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  result = (cpConstraint *)cpGrooveJointNew(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointGetGrooveA(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointGetGrooveA.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointGetGrooveA" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpGrooveJointGetGrooveA((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointSetGrooveA(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointSetGrooveA.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointSetGrooveA" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJointSetGrooveA" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointSetGrooveA" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpGrooveJointSetGrooveA(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointGetGrooveB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointGetGrooveB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointGetGrooveB" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpGrooveJointGetGrooveB((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointSetGrooveB(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointSetGrooveB.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointSetGrooveB" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJointSetGrooveB" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointSetGrooveB" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpGrooveJointSetGrooveB(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointGetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointGetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointGetAnchr2" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpGrooveJointGetAnchr2((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGrooveJointSetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGrooveJointSetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGrooveJointSetAnchr2" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGrooveJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpGrooveJointSetAnchr2" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpGrooveJointSetAnchr2(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetClass.");  
  
  result = (cpConstraintClass *)cpDampedSpringGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_constraint_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_constraint_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_anchr1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_anchr1_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_anchr1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_anchr1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_anchr1_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpVect *)& ((arg1)->anchr1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_anchr2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_anchr2_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_anchr2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->anchr2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_anchr2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_anchr2_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpVect *)& ((arg1)->anchr2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_restLength_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_restLength_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_restLength_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->restLength = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_restLength_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_restLength_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->restLength);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_stiffness_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_stiffness_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_stiffness_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->stiffness = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_stiffness_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_stiffness_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->stiffness);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_damping_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_damping_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_damping_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->damping = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_damping_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_damping_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->damping);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_springForceFunc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpDampedSpringForceFunc arg2 = (cpDampedSpringForceFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_springForceFunc_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpDampedSpring_springForceFunc_set" "', argument " "2"" of type '" "cpDampedSpringForceFunc""'"); 
    }
  }
  if (arg1) (arg1)->springForceFunc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_springForceFunc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDampedSpringForceFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_springForceFunc_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpDampedSpringForceFunc) ((arg1)->springForceFunc);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_target_vrn_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_target_vrn_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_target_vrn_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->target_vrn = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_target_vrn_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_target_vrn_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->target_vrn);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_v_coef_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_v_coef_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_v_coef_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->v_coef = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_v_coef_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_v_coef_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->v_coef);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_r1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_r1_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_r1_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r1 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_r1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_r1_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpVect *)& ((arg1)->r1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_r2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_r2_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_r2_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->r2 = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_r2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_r2_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpVect *)& ((arg1)->r2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_nMass_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_nMass_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_nMass_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->nMass = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_nMass_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_nMass_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->nMass);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_n_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpring_n_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->n = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_n_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_n_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpVect *)& ((arg1)->n);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedSpring_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_jAcc_set" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpring_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedSpring_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedSpring *arg1 = (struct cpDampedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpring_jAcc_get" "', argument " "1"" of type '" "struct cpDampedSpring *""'"); 
  }
  arg1 = (struct cpDampedSpring *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpDampedSpring(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpDampedSpring(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpDampedSpring *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpDampedSpring(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpDampedSpring can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpDampedSpring *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringAlloc.");  
  
  result = (cpDampedSpring *)cpDampedSpringAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpDampedSpring, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpDampedSpring *arg1 = (cpDampedSpring *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpVect arg4 ;
  cpVect arg5 ;
  cpFloat arg6 ;
  cpFloat arg7 ;
  cpFloat arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  cpDampedSpring *result = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringInit" "', argument " "1"" of type '" "cpDampedSpring *""'"); 
  }
  arg1 = (cpDampedSpring *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpringInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpDampedSpringInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpDampedSpringInit" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringInit" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpDampedSpringInit" "', argument " "5"" of type '" "cpVect""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringInit" "', argument " "5"" of type '" "cpVect""'");
    } else {
      arg5 = *((cpVect *)(argp5));
    }
  }
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cpDampedSpringInit" "', argument " "6"" of type '" "cpFloat""'");
  } 
  arg6 = (cpFloat)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cpDampedSpringInit" "', argument " "7"" of type '" "cpFloat""'");
  } 
  arg7 = (cpFloat)(val7);
  ecode8 = SWIG_AsVal_float(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cpDampedSpringInit" "', argument " "8"" of type '" "cpFloat""'");
  } 
  arg8 = (cpFloat)(val8);
  result = (cpDampedSpring *)cpDampedSpringInit(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpDampedSpring, 0 |  0 );
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpVect arg3 ;
  cpVect arg4 ;
  cpFloat arg5 ;
  cpFloat arg6 ;
  cpFloat arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpringNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpDampedSpringNew" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringNew" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpDampedSpringNew" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringNew" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpDampedSpringNew" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cpDampedSpringNew" "', argument " "6"" of type '" "cpFloat""'");
  } 
  arg6 = (cpFloat)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cpDampedSpringNew" "', argument " "7"" of type '" "cpFloat""'");
  } 
  arg7 = (cpFloat)(val7);
  result = (cpConstraint *)cpDampedSpringNew(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetAnchr1" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpDampedSpringGetAnchr1((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetAnchr1(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetAnchr1.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetAnchr1" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpringSetAnchr1" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringSetAnchr1" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpDampedSpringSetAnchr1(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetAnchr2" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = cpDampedSpringGetAnchr2((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetAnchr2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetAnchr2.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetAnchr2" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedSpringSetAnchr2" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpDampedSpringSetAnchr2" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpDampedSpringSetAnchr2(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetRestLength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetRestLength.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetRestLength" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedSpringGetRestLength((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetRestLength(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetRestLength.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetRestLength" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpringSetRestLength" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedSpringSetRestLength(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetStiffness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetStiffness.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetStiffness" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedSpringGetStiffness((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetStiffness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetStiffness.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetStiffness" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpringSetStiffness" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedSpringSetStiffness(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetDamping" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedSpringGetDamping((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetDamping" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedSpringSetDamping" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedSpringSetDamping(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringGetSpringForceFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDampedSpringForceFunc result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringGetSpringForceFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringGetSpringForceFunc" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpDampedSpringForceFunc)cpDampedSpringGetSpringForceFunc((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedSpringSetSpringForceFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpDampedSpringForceFunc arg2 = (cpDampedSpringForceFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedSpringSetSpringForceFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedSpringSetSpringForceFunc" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpDampedSpringSetSpringForceFunc" "', argument " "2"" of type '" "cpDampedSpringForceFunc""'"); 
    }
  }
  cpDampedSpringSetSpringForceFunc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringGetClass.");  
  
  result = (cpConstraintClass *)cpDampedRotarySpringGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_constraint_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedRotarySpring_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_constraint_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_restAngle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_restAngle_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_restAngle_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->restAngle = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_restAngle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_restAngle_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->restAngle);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_stiffness_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_stiffness_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_stiffness_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->stiffness = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_stiffness_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_stiffness_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->stiffness);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_damping_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_damping_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_damping_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->damping = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_damping_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_damping_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->damping);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_springTorqueFunc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpDampedRotarySpringTorqueFunc arg2 = (cpDampedRotarySpringTorqueFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_springTorqueFunc_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpDampedRotarySpring_springTorqueFunc_set" "', argument " "2"" of type '" "cpDampedRotarySpringTorqueFunc""'"); 
    }
  }
  if (arg1) (arg1)->springTorqueFunc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_springTorqueFunc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDampedRotarySpringTorqueFunc result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_springTorqueFunc_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpDampedRotarySpringTorqueFunc) ((arg1)->springTorqueFunc);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_target_wrn_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_target_wrn_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_target_wrn_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->target_wrn = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_target_wrn_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_target_wrn_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->target_wrn);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_w_coef_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_w_coef_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_w_coef_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->w_coef = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_w_coef_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_w_coef_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->w_coef);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_iSum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_iSum_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_iSum_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->iSum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_iSum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_iSum_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->iSum);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpDampedRotarySpring_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_jAcc_set" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpring_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpring_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpDampedRotarySpring *arg1 = (struct cpDampedRotarySpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpring_jAcc_get" "', argument " "1"" of type '" "struct cpDampedRotarySpring *""'"); 
  }
  arg1 = (struct cpDampedRotarySpring *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpDampedRotarySpring(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpDampedRotarySpring(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpDampedRotarySpring *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpDampedRotarySpring(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpDampedRotarySpring can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpDampedRotarySpring *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringAlloc.");  
  
  result = (cpDampedRotarySpring *)cpDampedRotarySpringAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpDampedRotarySpring, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpDampedRotarySpring *arg1 = (cpDampedRotarySpring *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpFloat arg4 ;
  cpFloat arg5 ;
  cpFloat arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  cpDampedRotarySpring *result = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringInit" "', argument " "1"" of type '" "cpDampedRotarySpring *""'"); 
  }
  arg1 = (cpDampedRotarySpring *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedRotarySpringInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpDampedRotarySpringInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpDampedRotarySpringInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpDampedRotarySpringInit" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cpDampedRotarySpringInit" "', argument " "6"" of type '" "cpFloat""'");
  } 
  arg6 = (cpFloat)(val6);
  result = (cpDampedRotarySpring *)cpDampedRotarySpringInit(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpDampedRotarySpring, 0 |  0 );
  
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  cpFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpDampedRotarySpringNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpDampedRotarySpringNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpDampedRotarySpringNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpDampedRotarySpringNew" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (cpConstraint *)cpDampedRotarySpringNew(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringGetRestAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringGetRestAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringGetRestAngle" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedRotarySpringGetRestAngle((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringSetRestAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringSetRestAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringSetRestAngle" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpringSetRestAngle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedRotarySpringSetRestAngle(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringGetStiffness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringGetStiffness.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringGetStiffness" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedRotarySpringGetStiffness((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringSetStiffness(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringSetStiffness.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringSetStiffness" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpringSetStiffness" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedRotarySpringSetStiffness(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringGetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringGetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringGetDamping" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpDampedRotarySpringGetDamping((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringSetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringSetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringSetDamping" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpDampedRotarySpringSetDamping" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpDampedRotarySpringSetDamping(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringGetSpringTorqueFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDampedRotarySpringTorqueFunc result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringGetSpringTorqueFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringGetSpringTorqueFunc" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpDampedRotarySpringTorqueFunc)cpDampedRotarySpringGetSpringTorqueFunc((struct cpConstraint const *)arg1);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpDampedRotarySpringSetSpringTorqueFunc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpDampedRotarySpringTorqueFunc arg2 = (cpDampedRotarySpringTorqueFunc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpDampedRotarySpringSetSpringTorqueFunc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpDampedRotarySpringSetSpringTorqueFunc" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_float__float);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpDampedRotarySpringSetSpringTorqueFunc" "', argument " "2"" of type '" "cpDampedRotarySpringTorqueFunc""'"); 
    }
  }
  cpDampedRotarySpringSetSpringTorqueFunc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointGetClass.");  
  
  result = (cpConstraintClass *)cpRotaryLimitJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_constraint_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRotaryLimitJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_constraint_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_min_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_min_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJoint_min_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->min = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_min_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_min_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpFloat) ((arg1)->min);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_max_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_max_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJoint_max_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->max = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_max_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_max_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpFloat) ((arg1)->max);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_iSum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_iSum_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJoint_iSum_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->iSum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_iSum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_iSum_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpFloat) ((arg1)->iSum);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_bias_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJoint_bias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->bias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_bias_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpFloat) ((arg1)->bias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRotaryLimitJoint_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_jAcc_set" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJoint_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJoint_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRotaryLimitJoint *arg1 = (struct cpRotaryLimitJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJoint_jAcc_get" "', argument " "1"" of type '" "struct cpRotaryLimitJoint *""'"); 
  }
  arg1 = (struct cpRotaryLimitJoint *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpRotaryLimitJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpRotaryLimitJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpRotaryLimitJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpRotaryLimitJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpRotaryLimitJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpRotaryLimitJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointAlloc.");  
  
  result = (cpRotaryLimitJoint *)cpRotaryLimitJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpRotaryLimitJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpRotaryLimitJoint *arg1 = (cpRotaryLimitJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpFloat arg4 ;
  cpFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  cpRotaryLimitJoint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointInit" "', argument " "1"" of type '" "cpRotaryLimitJoint *""'"); 
  }
  arg1 = (cpRotaryLimitJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRotaryLimitJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpRotaryLimitJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpRotaryLimitJointInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpRotaryLimitJointInit" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (cpRotaryLimitJoint *)cpRotaryLimitJointInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpRotaryLimitJoint, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRotaryLimitJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpRotaryLimitJointNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpRotaryLimitJointNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpConstraint *)cpRotaryLimitJointNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointGetMin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointGetMin.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointGetMin" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpRotaryLimitJointGetMin((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointSetMin(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointSetMin.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointSetMin" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJointSetMin" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpRotaryLimitJointSetMin(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointGetMax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointGetMax.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointGetMax" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpRotaryLimitJointGetMax((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRotaryLimitJointSetMax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRotaryLimitJointSetMax.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRotaryLimitJointSetMax" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRotaryLimitJointSetMax" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpRotaryLimitJointSetMax(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointGetClass.");  
  
  result = (cpConstraintClass *)cpRatchetJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_constraint_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRatchetJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_constraint_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_angle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_angle_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_angle_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->angle = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_angle_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_angle_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->angle);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_phase_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_phase_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_phase_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->phase = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_phase_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_phase_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->phase);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_ratchet_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_ratchet_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_ratchet_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->ratchet = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_ratchet_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_ratchet_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->ratchet);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_iSum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_iSum_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_iSum_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->iSum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_iSum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_iSum_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->iSum);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_bias_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_bias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->bias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_bias_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->bias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpRatchetJoint_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_jAcc_set" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJoint_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpRatchetJoint_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpRatchetJoint *arg1 = (struct cpRatchetJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJoint_jAcc_get" "', argument " "1"" of type '" "struct cpRatchetJoint *""'"); 
  }
  arg1 = (struct cpRatchetJoint *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpRatchetJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpRatchetJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpRatchetJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_cpRatchetJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  struct cpRatchetJoint *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cpRatchetJoint.");  
  result = (struct cpRatchetJoint *)calloc(1, sizeof(struct cpRatchetJoint));
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_cpRatchetJoint, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpRatchetJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointAlloc.");  
  
  result = (cpRatchetJoint *)cpRatchetJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpRatchetJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpRatchetJoint *arg1 = (cpRatchetJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpFloat arg4 ;
  cpFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  cpRatchetJoint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointInit" "', argument " "1"" of type '" "cpRatchetJoint *""'"); 
  }
  arg1 = (cpRatchetJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRatchetJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpRatchetJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpRatchetJointInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpRatchetJointInit" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (cpRatchetJoint *)cpRatchetJointInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpRatchetJoint, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRatchetJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpRatchetJointNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpRatchetJointNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpConstraint *)cpRatchetJointNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointGetAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointGetAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointGetAngle" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpRatchetJointGetAngle((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointSetAngle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointSetAngle.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointSetAngle" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJointSetAngle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpRatchetJointSetAngle(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointGetPhase(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointGetPhase.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointGetPhase" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpRatchetJointGetPhase((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointSetPhase(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointSetPhase.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointSetPhase" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJointSetPhase" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpRatchetJointSetPhase(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointGetRatchet(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointGetRatchet.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointGetRatchet" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpRatchetJointGetRatchet((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRatchetJointSetRatchet(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRatchetJointSetRatchet.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpRatchetJointSetRatchet" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpRatchetJointSetRatchet" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpRatchetJointSetRatchet(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointGetClass.");  
  
  result = (cpConstraintClass *)cpGearJointGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_constraint_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGearJoint_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_constraint_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_phase_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_phase_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_phase_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->phase = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_phase_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_phase_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->phase);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_ratio_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_ratio_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_ratio_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->ratio = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_ratio_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_ratio_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->ratio);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_ratio_inv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_ratio_inv_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_ratio_inv_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->ratio_inv = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_ratio_inv_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_ratio_inv_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->ratio_inv);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_iSum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_iSum_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_iSum_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->iSum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_iSum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_iSum_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->iSum);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_bias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_bias_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_bias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->bias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_bias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_bias_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->bias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpGearJoint_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_jAcc_set" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJoint_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpGearJoint_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpGearJoint *arg1 = (struct cpGearJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJoint_jAcc_get" "', argument " "1"" of type '" "struct cpGearJoint *""'"); 
  }
  arg1 = (struct cpGearJoint *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpGearJoint(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpGearJoint(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpGearJoint *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpGearJoint(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpGearJoint can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpGearJoint *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointAlloc.");  
  
  result = (cpGearJoint *)cpGearJointAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpGearJoint, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpGearJoint *arg1 = (cpGearJoint *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpFloat arg4 ;
  cpFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  cpGearJoint *result = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpGearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointInit" "', argument " "1"" of type '" "cpGearJoint *""'"); 
  }
  arg1 = (cpGearJoint *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGearJointInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpGearJointInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpGearJointInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpGearJointInit" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (cpGearJoint *)cpGearJointInit(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpGearJoint, 0 |  0 );
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpGearJointNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpGearJointNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpGearJointNew" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpConstraint *)cpGearJointNew(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointGetPhase(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointGetPhase.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointGetPhase" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpGearJointGetPhase((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointSetPhase(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointSetPhase.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointSetPhase" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJointSetPhase" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpGearJointSetPhase(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointGetRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointGetRatio.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointGetRatio" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpGearJointGetRatio((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpGearJointSetRatio(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpGearJointSetRatio.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpGearJointSetRatio" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpGearJointSetRatio" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpGearJointSetRatio(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorGetClass(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraintClass *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorGetClass.");  
  
  result = (cpConstraintClass *)cpSimpleMotorGetClass();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraintClass, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSimpleMotor_constraint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_constraint_set" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSimpleMotor_constraint_set" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  if (arg1) (arg1)->constraint = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSimpleMotor_constraint_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpConstraint *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_constraint_get" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  result = (cpConstraint *)& ((arg1)->constraint);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSimpleMotor_rate_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_rate_set" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSimpleMotor_rate_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->rate = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSimpleMotor_rate_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_rate_get" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  result = (cpFloat) ((arg1)->rate);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSimpleMotor_iSum_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_iSum_set" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSimpleMotor_iSum_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->iSum = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSimpleMotor_iSum_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_iSum_get" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  result = (cpFloat) ((arg1)->iSum);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSimpleMotor_jAcc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_jAcc_set" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSimpleMotor_jAcc_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->jAcc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSimpleMotor_jAcc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSimpleMotor *arg1 = (struct cpSimpleMotor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotor_jAcc_get" "', argument " "1"" of type '" "struct cpSimpleMotor *""'"); 
  }
  arg1 = (struct cpSimpleMotor *)(argp1);
  result = (cpFloat) ((arg1)->jAcc);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSimpleMotor(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSimpleMotor(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSimpleMotor *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpSimpleMotor(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpSimpleMotor can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSimpleMotor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorAlloc.");  
  
  result = (cpSimpleMotor *)cpSimpleMotorAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSimpleMotor, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSimpleMotor *arg1 = (cpSimpleMotor *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpBody *arg3 = (cpBody *) 0 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  cpSimpleMotor *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotorInit" "', argument " "1"" of type '" "cpSimpleMotor *""'"); 
  }
  arg1 = (cpSimpleMotor *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSimpleMotorInit" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSimpleMotorInit" "', argument " "3"" of type '" "cpBody *""'"); 
  }
  arg3 = (cpBody *)(argp3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSimpleMotorInit" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  result = (cpSimpleMotor *)cpSimpleMotorInit(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSimpleMotor, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpBody *arg1 = (cpBody *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorNew.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotorNew" "', argument " "1"" of type '" "cpBody *""'"); 
  }
  arg1 = (cpBody *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSimpleMotorNew" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSimpleMotorNew" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpConstraint *)cpSimpleMotorNew(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorGetRate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorGetRate.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotorGetRate" "', argument " "1"" of type '" "cpConstraint const *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  result = (cpFloat)cpSimpleMotorGetRate((struct cpConstraint const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSimpleMotorSetRate(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpConstraint *arg1 = (cpConstraint *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSimpleMotorSetRate.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSimpleMotorSetRate" "', argument " "1"" of type '" "cpConstraint *""'"); 
  }
  arg1 = (cpConstraint *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSimpleMotorSetRate" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSimpleMotorSetRate(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_iterations_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_iterations_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_iterations_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->iterations = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_iterations_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_iterations_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (int) ((arg1)->iterations);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_gravity_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpVect *arg2 = (cpVect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_gravity_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_gravity_set" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  if (arg1) (arg1)->gravity = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_gravity_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_gravity_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpVect *)& ((arg1)->gravity);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpVect, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_damping_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_damping_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_damping_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->damping = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_damping_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_damping_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->damping);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_idleSpeedThreshold_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_idleSpeedThreshold_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_idleSpeedThreshold_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->idleSpeedThreshold = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_idleSpeedThreshold_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_idleSpeedThreshold_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->idleSpeedThreshold);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_sleepTimeThreshold_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_sleepTimeThreshold_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_sleepTimeThreshold_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->sleepTimeThreshold = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_sleepTimeThreshold_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_sleepTimeThreshold_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->sleepTimeThreshold);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_collisionSlop_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionSlop_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_collisionSlop_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->collisionSlop = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_collisionSlop_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionSlop_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->collisionSlop);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_collisionBias_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionBias_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_collisionBias_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->collisionBias = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_collisionBias_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionBias_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->collisionBias);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_collisionPersistence_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpTimestamp arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionPersistence_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_collisionPersistence_set" "', argument " "2"" of type '" "cpTimestamp""'");
  } 
  arg2 = (cpTimestamp)(val2);
  if (arg1) (arg1)->collisionPersistence = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_collisionPersistence_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpTimestamp result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionPersistence_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpTimestamp) ((arg1)->collisionPersistence);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_enableContactGraph_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpBool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_enableContactGraph_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_enableContactGraph_set" "', argument " "2"" of type '" "cpBool""'");
  } 
  arg2 = (cpBool)(val2);
  if (arg1) (arg1)->enableContactGraph = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_enableContactGraph_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_enableContactGraph_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpBool) ((arg1)->enableContactGraph);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_data_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_data_set" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  if (arg1) (arg1)->data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_data_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_data_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpDataPointer) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_staticBody_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_staticBody_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_staticBody_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->staticBody = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_staticBody_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_staticBody_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpBody *) ((arg1)->staticBody);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_stamp_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpTimestamp arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_stamp_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_stamp_private_set" "', argument " "2"" of type '" "cpTimestamp""'");
  } 
  arg2 = (cpTimestamp)(val2);
  if (arg1) (arg1)->stamp_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_stamp_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpTimestamp result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_stamp_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpTimestamp) ((arg1)->stamp_private);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_curr_dt_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_curr_dt_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_curr_dt_private_set" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  if (arg1) (arg1)->curr_dt_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_curr_dt_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_curr_dt_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpFloat) ((arg1)->curr_dt_private);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_bodies_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_bodies_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_bodies_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->bodies_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_bodies_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_bodies_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->bodies_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_rousedBodies_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_rousedBodies_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_rousedBodies_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->rousedBodies_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_rousedBodies_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_rousedBodies_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->rousedBodies_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_sleepingComponents_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_sleepingComponents_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_sleepingComponents_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->sleepingComponents_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_sleepingComponents_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_sleepingComponents_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->sleepingComponents_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_staticShapes_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_staticShapes_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_staticShapes_private_set" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  if (arg1) (arg1)->staticShapes_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_staticShapes_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_staticShapes_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpSpatialIndex *) ((arg1)->staticShapes_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_activeShapes_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpSpatialIndex *arg2 = (cpSpatialIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_activeShapes_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpSpatialIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_activeShapes_private_set" "', argument " "2"" of type '" "cpSpatialIndex *""'"); 
  }
  arg2 = (cpSpatialIndex *)(argp2);
  if (arg1) (arg1)->activeShapes_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_activeShapes_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpatialIndex *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_activeShapes_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpSpatialIndex *) ((arg1)->activeShapes_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpatialIndex, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_arbiters_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_arbiters_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_arbiters_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->arbiters_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_arbiters_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_arbiters_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->arbiters_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_contactBuffersHead_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpContactBufferHeader *arg2 = (cpContactBufferHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_contactBuffersHead_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpContactBufferHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_contactBuffersHead_private_set" "', argument " "2"" of type '" "cpContactBufferHeader *""'"); 
  }
  arg2 = (cpContactBufferHeader *)(argp2);
  if (arg1) (arg1)->contactBuffersHead_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_contactBuffersHead_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpContactBufferHeader *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_contactBuffersHead_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpContactBufferHeader *) ((arg1)->contactBuffersHead_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpContactBufferHeader, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_cachedArbiters_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpHashSet *arg2 = (cpHashSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_cachedArbiters_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpHashSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_cachedArbiters_private_set" "', argument " "2"" of type '" "cpHashSet *""'"); 
  }
  arg2 = (cpHashSet *)(argp2);
  if (arg1) (arg1)->cachedArbiters_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_cachedArbiters_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpHashSet *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_cachedArbiters_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpHashSet *) ((arg1)->cachedArbiters_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpHashSet, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_pooledArbiters_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_pooledArbiters_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_pooledArbiters_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->pooledArbiters_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_pooledArbiters_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_pooledArbiters_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->pooledArbiters_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_constraints_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_constraints_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_constraints_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->constraints_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_constraints_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_constraints_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->constraints_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_allocatedBuffers_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_allocatedBuffers_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_allocatedBuffers_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->allocatedBuffers_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_allocatedBuffers_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_allocatedBuffers_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->allocatedBuffers_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_locked_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_locked_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_locked_private_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->locked_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_locked_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_locked_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (int) ((arg1)->locked_private);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_collisionHandlers_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpHashSet *arg2 = (cpHashSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionHandlers_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpHashSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_collisionHandlers_private_set" "', argument " "2"" of type '" "cpHashSet *""'"); 
  }
  arg2 = (cpHashSet *)(argp2);
  if (arg1) (arg1)->collisionHandlers_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_collisionHandlers_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpHashSet *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_collisionHandlers_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpHashSet *) ((arg1)->collisionHandlers_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpHashSet, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_defaultHandler_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpCollisionHandler arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_defaultHandler_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_cpCollisionHandler,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_defaultHandler_private_set" "', argument " "2"" of type '" "cpCollisionHandler""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpace_defaultHandler_private_set" "', argument " "2"" of type '" "cpCollisionHandler""'");
    } else {
      arg2 = *((cpCollisionHandler *)(argp2));
    }
  }
  if (arg1) (arg1)->defaultHandler_private = arg2;
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_defaultHandler_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpCollisionHandler result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_defaultHandler_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result =  ((arg1)->defaultHandler_private);
  jsresult = SWIG_NewPointerObj((cpCollisionHandler *)memcpy((cpCollisionHandler *)malloc(sizeof(cpCollisionHandler)),&result,sizeof(cpCollisionHandler)), SWIGTYPE_p_cpCollisionHandler, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_skipPostStep_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpBool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_skipPostStep_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpace_skipPostStep_private_set" "', argument " "2"" of type '" "cpBool""'");
  } 
  arg2 = (cpBool)(val2);
  if (arg1) (arg1)->skipPostStep_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_skipPostStep_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_skipPostStep_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpBool) ((arg1)->skipPostStep_private);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace_postStepCallbacks_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpArray *arg2 = (cpArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_postStepCallbacks_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace_postStepCallbacks_private_set" "', argument " "2"" of type '" "cpArray *""'"); 
  }
  arg2 = (cpArray *)(argp2);
  if (arg1) (arg1)->postStepCallbacks_private = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace_postStepCallbacks_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpArray *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace_postStepCallbacks_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpArray *) ((arg1)->postStepCallbacks_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpArray, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpSpace__staticBody_private_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace__staticBody_private_set" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpace__staticBody_private_set" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  if (arg1) (arg1)->_staticBody_private = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpSpace__staticBody_private_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  struct cpSpace *arg1 = (struct cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpace__staticBody_private_get" "', argument " "1"" of type '" "struct cpSpace *""'"); 
  }
  arg1 = (struct cpSpace *)(argp1);
  result = (cpBody *)& ((arg1)->_staticBody_private);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}



#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
void _wrap_delete_cpSpace(v8::Persistent< v8::Value > object, void *parameter) 
#else
void _wrap_delete_cpSpace(v8::Isolate *isolate, v8::Persistent< v8::Object > * object, SWIGV8_Proxy *proxy) 
#endif
{
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter); 
#endif
  
  if(proxy->swigCMemOwn && proxy->swigCObject) {
#ifdef SWIGRUNTIME_DEBUG
    printf("Deleting wrapped instance: %s\n", proxy->info->name);
#endif
    delete (struct cpSpace *) proxy->swigCObject;
  }
  delete proxy;
  
  
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
  object.Clear();
  object.Dispose();
#else
  object->Clear();
  object->Dispose(isolate);
#endif
}


v8::Handle<v8::Value> _wrap_new_veto_cpSpace(const v8::Arguments& args) {
  v8::HandleScope scope;
  SWIG_exception(SWIG_ERROR, "Class cpSpace can not be instantiated");
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAlloc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAlloc.");  
  
  result = (cpSpace *)cpSpaceAlloc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceInit(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpSpace *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceInit.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceInit" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpSpace *)cpSpaceInit(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceNew(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceNew.");  
  
  result = (cpSpace *)cpSpaceNew();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpSpace, SWIG_POINTER_OWN |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceDestroy(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceDestroy.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceDestroy" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  cpSpaceDestroy(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceFree(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceFree.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceFree" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  cpSpaceFree(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetIterations(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetIterations.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetIterations" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (int)cpSpaceGetIterations((struct cpSpace const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetIterations(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetIterations.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetIterations" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetIterations" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  cpSpaceSetIterations(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetGravity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpVect result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetGravity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetGravity" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = cpSpaceGetGravity((struct cpSpace const *)arg1);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetGravity(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetGravity.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetGravity" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceSetGravity" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSetGravity" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  cpSpaceSetGravity(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetDamping" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetDamping((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetDamping(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetDamping.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetDamping" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetDamping" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceSetDamping(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetIdleSpeedThreshold(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetIdleSpeedThreshold.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetIdleSpeedThreshold" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetIdleSpeedThreshold((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetIdleSpeedThreshold(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetIdleSpeedThreshold.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetIdleSpeedThreshold" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetIdleSpeedThreshold" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceSetIdleSpeedThreshold(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetSleepTimeThreshold(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetSleepTimeThreshold.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetSleepTimeThreshold" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetSleepTimeThreshold((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetSleepTimeThreshold(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetSleepTimeThreshold.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetSleepTimeThreshold" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetSleepTimeThreshold" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceSetSleepTimeThreshold(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetCollisionSlop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetCollisionSlop.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetCollisionSlop" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetCollisionSlop((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetCollisionSlop(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetCollisionSlop.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetCollisionSlop" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetCollisionSlop" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceSetCollisionSlop(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetCollisionBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetCollisionBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetCollisionBias" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetCollisionBias((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetCollisionBias(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetCollisionBias.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetCollisionBias" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetCollisionBias" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceSetCollisionBias(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetCollisionPersistence(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpTimestamp result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetCollisionPersistence.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetCollisionPersistence" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpTimestamp)cpSpaceGetCollisionPersistence((struct cpSpace const *)arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetCollisionPersistence(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpTimestamp arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetCollisionPersistence.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetCollisionPersistence" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetCollisionPersistence" "', argument " "2"" of type '" "cpTimestamp""'");
  } 
  arg2 = (cpTimestamp)(val2);
  cpSpaceSetCollisionPersistence(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetEnableContactGraph(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetEnableContactGraph.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetEnableContactGraph" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpBool)cpSpaceGetEnableContactGraph((struct cpSpace const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetEnableContactGraph(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetEnableContactGraph.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetEnableContactGraph" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceSetEnableContactGraph" "', argument " "2"" of type '" "cpBool""'");
  } 
  arg2 = (cpBool)(val2);
  cpSpaceSetEnableContactGraph(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpDataPointer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetUserData" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpDataPointer)cpSpaceGetUserData((struct cpSpace const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetUserData(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpDataPointer arg2 = (cpDataPointer) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetUserData.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetUserData" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceSetUserData" "', argument " "2"" of type '" "cpDataPointer""'"); 
  }
  cpSpaceSetUserData(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetStaticBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetStaticBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetStaticBody" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpBody *)cpSpaceGetStaticBody((struct cpSpace const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceGetCurrentTimeStep(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpFloat result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceGetCurrentTimeStep.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceGetCurrentTimeStep" "', argument " "1"" of type '" "cpSpace const *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpFloat)cpSpaceGetCurrentTimeStep((struct cpSpace const *)arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceIsLocked(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cpBool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceIsLocked.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceIsLocked" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  result = (cpBool)cpSpaceIsLocked(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSetDefaultCollisionHandler(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpCollisionBeginFunc arg2 ;
  cpCollisionPreSolveFunc arg3 ;
  cpCollisionPostSolveFunc arg4 ;
  cpCollisionSeparateFunc arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int res6 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSetDefaultCollisionHandler.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpCollisionBeginFunc,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "2"" of type '" "cpCollisionBeginFunc""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "2"" of type '" "cpCollisionBeginFunc""'");
    } else {
      arg2 = *((cpCollisionBeginFunc *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpCollisionPreSolveFunc,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "3"" of type '" "cpCollisionPreSolveFunc""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "3"" of type '" "cpCollisionPreSolveFunc""'");
    } else {
      arg3 = *((cpCollisionPreSolveFunc *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpCollisionPostSolveFunc,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "4"" of type '" "cpCollisionPostSolveFunc""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "4"" of type '" "cpCollisionPostSolveFunc""'");
    } else {
      arg4 = *((cpCollisionPostSolveFunc *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpCollisionSeparateFunc,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "5"" of type '" "cpCollisionSeparateFunc""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "5"" of type '" "cpCollisionSeparateFunc""'");
    } else {
      arg5 = *((cpCollisionSeparateFunc *)(argp5));
    }
  }
  res6 = SWIG_ConvertPtr(args[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpaceSetDefaultCollisionHandler" "', argument " "6"" of type '" "void *""'"); 
  }
  cpSpaceSetDefaultCollisionHandler(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddCollisionHandler(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpCollisionType arg2 ;
  cpCollisionType arg3 ;
  cpCollisionBeginFunc arg4 ;
  cpCollisionPreSolveFunc arg5 ;
  cpCollisionPostSolveFunc arg6 ;
  cpCollisionSeparateFunc arg7 ;
  void *arg8 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  int res8 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddCollisionHandler.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddCollisionHandler" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceAddCollisionHandler" "', argument " "2"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "2"" of type '" "cpCollisionType""'");
    } else {
      arg2 = *((cpCollisionType *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceAddCollisionHandler" "', argument " "3"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "3"" of type '" "cpCollisionType""'");
    } else {
      arg3 = *((cpCollisionType *)(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpCollisionBeginFunc,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceAddCollisionHandler" "', argument " "4"" of type '" "cpCollisionBeginFunc""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "4"" of type '" "cpCollisionBeginFunc""'");
    } else {
      arg4 = *((cpCollisionBeginFunc *)(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_cpCollisionPreSolveFunc,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceAddCollisionHandler" "', argument " "5"" of type '" "cpCollisionPreSolveFunc""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "5"" of type '" "cpCollisionPreSolveFunc""'");
    } else {
      arg5 = *((cpCollisionPreSolveFunc *)(argp5));
    }
  }
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_cpCollisionPostSolveFunc,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpaceAddCollisionHandler" "', argument " "6"" of type '" "cpCollisionPostSolveFunc""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "6"" of type '" "cpCollisionPostSolveFunc""'");
    } else {
      arg6 = *((cpCollisionPostSolveFunc *)(argp6));
    }
  }
  {
    res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_cpCollisionSeparateFunc,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cpSpaceAddCollisionHandler" "', argument " "7"" of type '" "cpCollisionSeparateFunc""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceAddCollisionHandler" "', argument " "7"" of type '" "cpCollisionSeparateFunc""'");
    } else {
      arg7 = *((cpCollisionSeparateFunc *)(argp7));
    }
  }
  res8 = SWIG_ConvertPtr(args[7],SWIG_as_voidptrptr(&arg8), 0, 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "cpSpaceAddCollisionHandler" "', argument " "8"" of type '" "void *""'"); 
  }
  cpSpaceAddCollisionHandler(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceRemoveCollisionHandler(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpCollisionType arg2 ;
  cpCollisionType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceRemoveCollisionHandler.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceRemoveCollisionHandler" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceRemoveCollisionHandler" "', argument " "2"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceRemoveCollisionHandler" "', argument " "2"" of type '" "cpCollisionType""'");
    } else {
      arg2 = *((cpCollisionType *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceRemoveCollisionHandler" "', argument " "3"" of type '" "cpCollisionType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceRemoveCollisionHandler" "', argument " "3"" of type '" "cpCollisionType""'");
    } else {
      arg3 = *((cpCollisionType *)(argp3));
    }
  }
  cpSpaceRemoveCollisionHandler(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceAddShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  result = (cpShape *)cpSpaceAddShape(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddStaticShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddStaticShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddStaticShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceAddStaticShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  result = (cpShape *)cpSpaceAddStaticShape(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpBody *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddBody" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceAddBody" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  result = (cpBody *)cpSpaceAddBody(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpBody, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddConstraint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpConstraint *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddConstraint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddConstraint" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceAddConstraint" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  result = (cpConstraint *)cpSpaceAddConstraint(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpConstraint, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceRemoveShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceRemoveShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceRemoveShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceRemoveShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  cpSpaceRemoveShape(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceRemoveStaticShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceRemoveStaticShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceRemoveStaticShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceRemoveStaticShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  cpSpaceRemoveStaticShape(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceRemoveBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceRemoveBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceRemoveBody" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceRemoveBody" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  cpSpaceRemoveBody(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceRemoveConstraint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceRemoveConstraint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceRemoveConstraint" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceRemoveConstraint" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  cpSpaceRemoveConstraint(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceContainsShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceContainsShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceContainsShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceContainsShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  result = (cpBool)cpSpaceContainsShape(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceContainsBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceContainsBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceContainsBody" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceContainsBody" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  result = (cpBool)cpSpaceContainsBody(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceContainsConstraint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpConstraint *arg2 = (cpConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpBool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceContainsConstraint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceContainsConstraint" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpConstraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceContainsConstraint" "', argument " "2"" of type '" "cpConstraint *""'"); 
  }
  arg2 = (cpConstraint *)(argp2);
  result = (cpBool)cpSpaceContainsConstraint(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceConvertBodyToStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceConvertBodyToStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceConvertBodyToStatic" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceConvertBodyToStatic" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  cpSpaceConvertBodyToStatic(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceConvertBodyToDynamic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  cpFloat arg3 ;
  cpFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceConvertBodyToDynamic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceConvertBodyToDynamic" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceConvertBodyToDynamic" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceConvertBodyToDynamic" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSpaceConvertBodyToDynamic" "', argument " "4"" of type '" "cpFloat""'");
  } 
  arg4 = (cpFloat)(val4);
  cpSpaceConvertBodyToDynamic(arg1,arg2,arg3,arg4);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceAddPostStepCallback(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpPostStepFunc arg2 = (cpPostStepFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  int res4 ;
  cpBool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceAddPostStepCallback.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceAddPostStepCallback" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpSpace_p_void_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceAddPostStepCallback" "', argument " "2"" of type '" "cpPostStepFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceAddPostStepCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceAddPostStepCallback" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (cpBool)cpSpaceAddPostStepCallback(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpacePointQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpLayers arg3 ;
  cpGroup arg4 ;
  cpSpacePointQueryFunc arg5 = (cpSpacePointQueryFunc) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res6 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpacePointQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpacePointQuery" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpacePointQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpacePointQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpacePointQuery" "', argument " "3"" of type '" "cpLayers""'");
  } 
  arg3 = (cpLayers)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpacePointQuery" "', argument " "4"" of type '" "cpGroup""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpacePointQuery" "', argument " "4"" of type '" "cpGroup""'");
    } else {
      arg4 = *((cpGroup *)(argp4));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args[4], (void**)(&arg5), SWIGTYPE_p_f_p_struct_cpShape_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpacePointQuery" "', argument " "5"" of type '" "cpSpacePointQueryFunc""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(args[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpacePointQuery" "', argument " "6"" of type '" "void *""'"); 
  }
  cpSpacePointQuery(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpacePointQueryFirst(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpLayers arg3 ;
  cpGroup arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpacePointQueryFirst.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpacePointQueryFirst" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpacePointQueryFirst" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpacePointQueryFirst" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpacePointQueryFirst" "', argument " "3"" of type '" "cpLayers""'");
  } 
  arg3 = (cpLayers)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpacePointQueryFirst" "', argument " "4"" of type '" "cpGroup""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpacePointQueryFirst" "', argument " "4"" of type '" "cpGroup""'");
    } else {
      arg4 = *((cpGroup *)(argp4));
    }
  }
  result = (cpShape *)cpSpacePointQueryFirst(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceNearestPointQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  cpLayers arg4 ;
  cpGroup arg5 ;
  cpSpaceNearestPointQueryFunc arg6 = (cpSpaceNearestPointQueryFunc) 0 ;
  void *arg7 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int res7 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceNearestPointQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceNearestPointQuery" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceNearestPointQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceNearestPointQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceNearestPointQuery" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSpaceNearestPointQuery" "', argument " "4"" of type '" "cpLayers""'");
  } 
  arg4 = (cpLayers)(val4);
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceNearestPointQuery" "', argument " "5"" of type '" "cpGroup""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceNearestPointQuery" "', argument " "5"" of type '" "cpGroup""'");
    } else {
      arg5 = *((cpGroup *)(argp5));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args[5], (void**)(&arg6), SWIGTYPE_p_f_p_struct_cpShape_float_struct_cpVect_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceNearestPointQuery" "', argument " "6"" of type '" "cpSpaceNearestPointQueryFunc""'"); 
    }
  }
  res7 = SWIG_ConvertPtr(args[6],SWIG_as_voidptrptr(&arg7), 0, 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cpSpaceNearestPointQuery" "', argument " "7"" of type '" "void *""'"); 
  }
  cpSpaceNearestPointQuery(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceNearestPointQueryNearest(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  cpLayers arg4 ;
  cpGroup arg5 ;
  cpNearestPointQueryInfo *arg6 = (cpNearestPointQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceNearestPointQueryNearest.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "4"" of type '" "cpLayers""'");
  } 
  arg4 = (cpLayers)(val4);
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "5"" of type '" "cpGroup""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "5"" of type '" "cpGroup""'");
    } else {
      arg5 = *((cpGroup *)(argp5));
    }
  }
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_cpNearestPointQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpaceNearestPointQueryNearest" "', argument " "6"" of type '" "cpNearestPointQueryInfo *""'"); 
  }
  arg6 = (cpNearestPointQueryInfo *)(argp6);
  result = (cpShape *)cpSpaceNearestPointQueryNearest(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSegmentQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  cpLayers arg4 ;
  cpGroup arg5 ;
  cpSpaceSegmentQueryFunc arg6 = (cpSpaceSegmentQueryFunc) 0 ;
  void *arg7 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int res7 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSegmentQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSegmentQuery" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceSegmentQuery" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQuery" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceSegmentQuery" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQuery" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSpaceSegmentQuery" "', argument " "4"" of type '" "cpLayers""'");
  } 
  arg4 = (cpLayers)(val4);
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceSegmentQuery" "', argument " "5"" of type '" "cpGroup""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQuery" "', argument " "5"" of type '" "cpGroup""'");
    } else {
      arg5 = *((cpGroup *)(argp5));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args[5], (void**)(&arg6), SWIGTYPE_p_f_p_struct_cpShape_float_struct_cpVect_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceSegmentQuery" "', argument " "6"" of type '" "cpSpaceSegmentQueryFunc""'"); 
    }
  }
  res7 = SWIG_ConvertPtr(args[6],SWIG_as_voidptrptr(&arg7), 0, 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "cpSpaceSegmentQuery" "', argument " "7"" of type '" "void *""'"); 
  }
  cpSpaceSegmentQuery(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceSegmentQueryFirst(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpVect arg2 ;
  cpVect arg3 ;
  cpLayers arg4 ;
  cpGroup arg5 ;
  cpSegmentQueryInfo *arg6 = (cpSegmentQueryInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  cpShape *result = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceSegmentQueryFirst.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQueryFirst" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQueryFirst" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "4"" of type '" "cpLayers""'");
  } 
  arg4 = (cpLayers)(val4);
  {
    res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "5"" of type '" "cpGroup""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceSegmentQueryFirst" "', argument " "5"" of type '" "cpGroup""'");
    } else {
      arg5 = *((cpGroup *)(argp5));
    }
  }
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_cpSegmentQueryInfo, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpaceSegmentQueryFirst" "', argument " "6"" of type '" "cpSegmentQueryInfo *""'"); 
  }
  arg6 = (cpSegmentQueryInfo *)(argp6);
  result = (cpShape *)cpSpaceSegmentQueryFirst(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cpShape, 0 |  0 );
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceBBQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBB arg2 ;
  cpLayers arg3 ;
  cpGroup arg4 ;
  cpSpaceBBQueryFunc arg5 = (cpSpaceBBQueryFunc) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res6 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceBBQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceBBQuery" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceBBQuery" "', argument " "2"" of type '" "cpBB""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceBBQuery" "', argument " "2"" of type '" "cpBB""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceBBQuery" "', argument " "3"" of type '" "cpLayers""'");
  } 
  arg3 = (cpLayers)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_uintptr_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceBBQuery" "', argument " "4"" of type '" "cpGroup""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpSpaceBBQuery" "', argument " "4"" of type '" "cpGroup""'");
    } else {
      arg4 = *((cpGroup *)(argp4));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args[4], (void**)(&arg5), SWIGTYPE_p_f_p_struct_cpShape_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceBBQuery" "', argument " "5"" of type '" "cpSpaceBBQueryFunc""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(args[5],SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cpSpaceBBQuery" "', argument " "6"" of type '" "void *""'"); 
  }
  cpSpaceBBQuery(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = v8::Undefined();
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceShapeQuery(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  cpSpaceShapeQueryFunc arg3 = (cpSpaceShapeQueryFunc) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res4 ;
  cpBool result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceShapeQuery.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceShapeQuery" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceShapeQuery" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  {
    int res = SWIG_ConvertFunctionPtr(args[2], (void**)(&arg3), SWIGTYPE_p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceShapeQuery" "', argument " "3"" of type '" "cpSpaceShapeQueryFunc""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args[3],SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpSpaceShapeQuery" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (cpBool)cpSpaceShapeQuery(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceActivateShapesTouchingShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceActivateShapesTouchingShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceActivateShapesTouchingShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceActivateShapesTouchingShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  cpSpaceActivateShapesTouchingShape(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceEachBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpSpaceBodyIteratorFunc arg2 = (cpSpaceBodyIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceEachBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceEachBody" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpBody_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceEachBody" "', argument " "2"" of type '" "cpSpaceBodyIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceEachBody" "', argument " "3"" of type '" "void *""'"); 
  }
  cpSpaceEachBody(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceEachShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpSpaceShapeIteratorFunc arg2 = (cpSpaceShapeIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceEachShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceEachShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpShape_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceEachShape" "', argument " "2"" of type '" "cpSpaceShapeIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceEachShape" "', argument " "3"" of type '" "void *""'"); 
  }
  cpSpaceEachShape(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceEachConstraint(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpSpaceConstraintIteratorFunc arg2 = (cpSpaceConstraintIteratorFunc) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceEachConstraint.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceEachConstraint" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_struct_cpConstraint_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "cpSpaceEachConstraint" "', argument " "2"" of type '" "cpSpaceConstraintIteratorFunc""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpSpaceEachConstraint" "', argument " "3"" of type '" "void *""'"); 
  }
  cpSpaceEachConstraint(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceReindexStatic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceReindexStatic.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceReindexStatic" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  cpSpaceReindexStatic(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceReindexShape(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpShape *arg2 = (cpShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceReindexShape.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceReindexShape" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceReindexShape" "', argument " "2"" of type '" "cpShape *""'"); 
  }
  arg2 = (cpShape *)(argp2);
  cpSpaceReindexShape(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceReindexShapesForBody(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpBody *arg2 = (cpBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceReindexShapesForBody.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceReindexShapesForBody" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpSpaceReindexShapesForBody" "', argument " "2"" of type '" "cpBody *""'"); 
  }
  arg2 = (cpBody *)(argp2);
  cpSpaceReindexShapesForBody(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceUseSpatialHash(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceUseSpatialHash.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceUseSpatialHash" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceUseSpatialHash" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpSpaceUseSpatialHash" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  cpSpaceUseSpatialHash(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpSpaceStep(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpSpace *arg1 = (cpSpace *) 0 ;
  cpFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpSpaceStep.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_cpSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpSpaceStep" "', argument " "1"" of type '" "cpSpace *""'"); 
  }
  arg1 = (cpSpace *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpSpaceStep" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  cpSpaceStep(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_VERSION_MAJOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_VERSION_MINOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_CP_VERSION_RELEASE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_cpVersionString_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  res1 = SWIG_AsCharPtrAndSize(value, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpVersionString_set" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  if (arg1) {
    size_t size = strlen(arg1) + 1;
    cpVersionString = (char const *)(char *)memcpy((char *)malloc((size)*sizeof(char)), arg1, sizeof(char)*(size));
  } else {
    cpVersionString = 0;
  }
  if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_cpVersionString_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  result = (char *)cpVersionString;
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpInitChipmunk(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpInitChipmunk.");  
  
  cpInitChipmunk();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpEnableSegmentToSegmentCollisions(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpEnableSegmentToSegmentCollisions.");  
  
  cpEnableSegmentToSegmentCollisions();
  jsresult = v8::Undefined();
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMomentForCircle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  cpVect arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpFloat result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMomentForCircle.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMomentForCircle" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMomentForCircle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpMomentForCircle" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpMomentForCircle" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMomentForCircle" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpFloat)cpMomentForCircle(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpAreaForCircle(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpAreaForCircle.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpAreaForCircle" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpAreaForCircle" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  result = (cpFloat)cpAreaForCircle(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMomentForSegment(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpVect arg2 ;
  cpVect arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMomentForSegment.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMomentForSegment" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpMomentForSegment" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMomentForSegment" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpMomentForSegment" "', argument " "3"" of type '" "cpVect""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMomentForSegment" "', argument " "3"" of type '" "cpVect""'");
    } else {
      arg3 = *((cpVect *)(argp3));
    }
  }
  result = (cpFloat)cpMomentForSegment(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpAreaForSegment(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpVect arg1 ;
  cpVect arg2 ;
  cpFloat arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpAreaForSegment.");  
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpAreaForSegment" "', argument " "1"" of type '" "cpVect""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpAreaForSegment" "', argument " "1"" of type '" "cpVect""'");
    } else {
      arg1 = *((cpVect *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpAreaForSegment" "', argument " "2"" of type '" "cpVect""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpAreaForSegment" "', argument " "2"" of type '" "cpVect""'");
    } else {
      arg2 = *((cpVect *)(argp2));
    }
  }
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpAreaForSegment" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpFloat)cpAreaForSegment(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMomentForPoly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  int arg2 ;
  cpVect *arg3 = (cpVect *) 0 ;
  cpVect arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  cpFloat result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMomentForPoly.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMomentForPoly" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMomentForPoly" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpMomentForPoly" "', argument " "3"" of type '" "cpVect const *""'"); 
  }
  arg3 = (cpVect *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_cpVect,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpMomentForPoly" "', argument " "4"" of type '" "cpVect""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMomentForPoly" "', argument " "4"" of type '" "cpVect""'");
    } else {
      arg4 = *((cpVect *)(argp4));
    }
  }
  result = (cpFloat)cpMomentForPoly(arg1,arg2,(struct cpVect const *)arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpAreaForPoly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  cpVect *arg2 = (cpVect *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpAreaForPoly.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpAreaForPoly" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpAreaForPoly" "', argument " "2"" of type '" "cpVect const *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  result = (cpFloat)cpAreaForPoly(arg1,(struct cpVect const *)arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpCentroidForPoly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  cpVect *arg2 = (cpVect *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cpVect result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpCentroidForPoly.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpCentroidForPoly" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpCentroidForPoly" "', argument " "2"" of type '" "cpVect const *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  result = cpCentroidForPoly(arg1,(struct cpVect const *)arg2);
  jsresult = SWIG_NewPointerObj((cpVect *)memcpy((cpVect *)malloc(sizeof(cpVect)),&result,sizeof(cpVect)), SWIGTYPE_p_cpVect, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpRecenterPoly(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  cpVect *arg2 = (cpVect *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpRecenterPoly.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpRecenterPoly" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpRecenterPoly" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  cpRecenterPoly(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMomentForBox(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpFloat arg2 ;
  cpFloat arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  cpFloat result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMomentForBox.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMomentForBox" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpMomentForBox" "', argument " "2"" of type '" "cpFloat""'");
  } 
  arg2 = (cpFloat)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpMomentForBox" "', argument " "3"" of type '" "cpFloat""'");
  } 
  arg3 = (cpFloat)(val3);
  result = (cpFloat)cpMomentForBox(arg1,arg2,arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpMomentForBox2(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  cpFloat arg1 ;
  cpBB arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  cpFloat result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpMomentForBox2.");  
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpMomentForBox2" "', argument " "1"" of type '" "cpFloat""'");
  } 
  arg1 = (cpFloat)(val1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_cpBB,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpMomentForBox2" "', argument " "2"" of type '" "cpBB""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpMomentForBox2" "', argument " "2"" of type '" "cpBB""'");
    } else {
      arg2 = *((cpBB *)(argp2));
    }
  }
  result = (cpFloat)cpMomentForBox2(arg1,arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_cpConvexHull(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  cpVect *arg2 = (cpVect *) 0 ;
  cpVect *arg3 = (cpVect *) 0 ;
  int *arg4 = (int *) 0 ;
  cpFloat arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cpConvexHull.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpConvexHull" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpConvexHull" "', argument " "2"" of type '" "cpVect *""'"); 
  }
  arg2 = (cpVect *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_cpVect, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpConvexHull" "', argument " "3"" of type '" "cpVect *""'"); 
  }
  arg3 = (cpVect *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cpConvexHull" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = (int *)(argp4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpConvexHull" "', argument " "5"" of type '" "cpFloat""'");
  } 
  arg5 = (cpFloat)(val5);
  result = (int)cpConvexHull(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MyData = {"_p_MyData", "struct MyData *|p_MyData", 0, 0, (void*)&_MyData_clientData, 0};
static swig_type_info _swigt__p_MyStruct = {"_p_MyStruct", "struct MyStruct *|p_MyStruct", 0, 0, (void*)&_MyStruct_clientData, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpArbiter = {"_p_cpArbiter", "struct cpArbiter *|cpArbiter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpArray = {"_p_cpArray", "struct cpArray *|cpArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpBB = {"_p_cpBB", "p_cpBB|struct cpBB *|cpBB *", 0, 0, (void*)&_cpBB_clientData, 0};
static swig_type_info _swigt__p_cpBBTree = {"_p_cpBBTree", "struct cpBBTree *|cpBBTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpBody = {"_p_cpBody", "struct cpBody *|cpBody *|p_cpBody", 0, 0, (void*)&_cpBody_clientData, 0};
static swig_type_info _swigt__p_cpCircleShape = {"_p_cpCircleShape", "p_cpCircleShape|struct cpCircleShape *|cpCircleShape *", 0, 0, (void*)&_cpCircleShape_clientData, 0};
static swig_type_info _swigt__p_cpCollisionBeginFunc = {"_p_cpCollisionBeginFunc", "cpCollisionBeginFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpCollisionHandler = {"_p_cpCollisionHandler", "struct cpCollisionHandler *|cpCollisionHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpCollisionPostSolveFunc = {"_p_cpCollisionPostSolveFunc", "cpCollisionPostSolveFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpCollisionPreSolveFunc = {"_p_cpCollisionPreSolveFunc", "cpCollisionPreSolveFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpCollisionSeparateFunc = {"_p_cpCollisionSeparateFunc", "cpCollisionSeparateFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpComponentNode = {"_p_cpComponentNode", "p_cpComponentNode|struct cpComponentNode *|cpComponentNode *", 0, 0, (void*)&_cpComponentNode_clientData, 0};
static swig_type_info _swigt__p_cpConstraint = {"_p_cpConstraint", "p_cpConstraint|struct cpConstraint *|cpConstraint *", 0, 0, (void*)&_cpConstraint_clientData, 0};
static swig_type_info _swigt__p_cpConstraintClass = {"_p_cpConstraintClass", "struct cpConstraintClass *|cpConstraintClass *|p_cpConstraintClass", 0, 0, (void*)&_cpConstraintClass_clientData, 0};
static swig_type_info _swigt__p_cpContactBufferHeader = {"_p_cpContactBufferHeader", "struct cpContactBufferHeader *|cpContactBufferHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpDampedRotarySpring = {"_p_cpDampedRotarySpring", "p_cpDampedRotarySpring|struct cpDampedRotarySpring *|cpDampedRotarySpring *", 0, 0, (void*)&_cpDampedRotarySpring_clientData, 0};
static swig_type_info _swigt__p_cpDampedSpring = {"_p_cpDampedSpring", "p_cpDampedSpring|struct cpDampedSpring *|cpDampedSpring *", 0, 0, (void*)&_cpDampedSpring_clientData, 0};
static swig_type_info _swigt__p_cpGearJoint = {"_p_cpGearJoint", "struct cpGearJoint *|cpGearJoint *|p_cpGearJoint", 0, 0, (void*)&_cpGearJoint_clientData, 0};
static swig_type_info _swigt__p_cpGrooveJoint = {"_p_cpGrooveJoint", "p_cpGrooveJoint|struct cpGrooveJoint *|cpGrooveJoint *", 0, 0, (void*)&_cpGrooveJoint_clientData, 0};
static swig_type_info _swigt__p_cpHashSet = {"_p_cpHashSet", "struct cpHashSet *|cpHashSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpMat2x2 = {"_p_cpMat2x2", "struct cpMat2x2 *|cpMat2x2 *|p_cpMat2x2", 0, 0, (void*)&_cpMat2x2_clientData, 0};
static swig_type_info _swigt__p_cpNearestPointQueryInfo = {"_p_cpNearestPointQueryInfo", "struct cpNearestPointQueryInfo *|cpNearestPointQueryInfo *|p_cpNearestPointQueryInfo", 0, 0, (void*)&_cpNearestPointQueryInfo_clientData, 0};
static swig_type_info _swigt__p_cpPinJoint = {"_p_cpPinJoint", "struct cpPinJoint *|p_cpPinJoint|cpPinJoint *", 0, 0, (void*)&_cpPinJoint_clientData, 0};
static swig_type_info _swigt__p_cpPivotJoint = {"_p_cpPivotJoint", "p_cpPivotJoint|struct cpPivotJoint *|cpPivotJoint *", 0, 0, (void*)&_cpPivotJoint_clientData, 0};
static swig_type_info _swigt__p_cpPolyShape = {"_p_cpPolyShape", "p_cpPolyShape|struct cpPolyShape *|cpPolyShape *", 0, 0, (void*)&_cpPolyShape_clientData, 0};
static swig_type_info _swigt__p_cpRatchetJoint = {"_p_cpRatchetJoint", "p_cpRatchetJoint|struct cpRatchetJoint *|cpRatchetJoint *", 0, 0, (void*)&_cpRatchetJoint_clientData, 0};
static swig_type_info _swigt__p_cpRotaryLimitJoint = {"_p_cpRotaryLimitJoint", "p_cpRotaryLimitJoint|struct cpRotaryLimitJoint *|cpRotaryLimitJoint *", 0, 0, (void*)&_cpRotaryLimitJoint_clientData, 0};
static swig_type_info _swigt__p_cpSegmentQueryInfo = {"_p_cpSegmentQueryInfo", "struct cpSegmentQueryInfo *|cpSegmentQueryInfo *|p_cpSegmentQueryInfo", 0, 0, (void*)&_cpSegmentQueryInfo_clientData, 0};
static swig_type_info _swigt__p_cpSegmentShape = {"_p_cpSegmentShape", "p_cpSegmentShape|struct cpSegmentShape *|cpSegmentShape *", 0, 0, (void*)&_cpSegmentShape_clientData, 0};
static swig_type_info _swigt__p_cpShape = {"_p_cpShape", "p_cpShape|struct cpShape *|cpShape *", 0, 0, (void*)&_cpShape_clientData, 0};
static swig_type_info _swigt__p_cpShapeClass = {"_p_cpShapeClass", "p_cpShapeClass|struct cpShapeClass *|cpShapeClass *", 0, 0, (void*)&_cpShapeClass_clientData, 0};
static swig_type_info _swigt__p_cpShapeType = {"_p_cpShapeType", "enum cpShapeType *|cpShapeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpSimpleMotor = {"_p_cpSimpleMotor", "struct cpSimpleMotor *|p_cpSimpleMotor|cpSimpleMotor *", 0, 0, (void*)&_cpSimpleMotor_clientData, 0};
static swig_type_info _swigt__p_cpSlideJoint = {"_p_cpSlideJoint", "p_cpSlideJoint|struct cpSlideJoint *|cpSlideJoint *", 0, 0, (void*)&_cpSlideJoint_clientData, 0};
static swig_type_info _swigt__p_cpSpace = {"_p_cpSpace", "struct cpSpace *|cpSpace *|p_cpSpace", 0, 0, (void*)&_cpSpace_clientData, 0};
static swig_type_info _swigt__p_cpSpaceHash = {"_p_cpSpaceHash", "struct cpSpaceHash *|cpSpaceHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpSpatialIndex = {"_p_cpSpatialIndex", "struct cpSpatialIndex *|cpSpatialIndex *|p_cpSpatialIndex", 0, 0, (void*)&_cpSpatialIndex_clientData, 0};
static swig_type_info _swigt__p_cpSpatialIndexClass = {"_p_cpSpatialIndexClass", "struct cpSpatialIndexClass *|cpSpatialIndexClass *|p_cpSpatialIndexClass", 0, 0, (void*)&_cpSpatialIndexClass_clientData, 0};
static swig_type_info _swigt__p_cpSplittingPlane = {"_p_cpSplittingPlane", "p_cpSplittingPlane|struct cpSplittingPlane *|cpSplittingPlane *", 0, 0, (void*)&_cpSplittingPlane_clientData, 0};
static swig_type_info _swigt__p_cpSweep1D = {"_p_cpSweep1D", "struct cpSweep1D *|cpSweep1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpVect = {"_p_cpVect", "p_cpVect|struct cpVect *|cpVect *", 0, 0, (void*)&_cpVect_clientData, 0};
static swig_type_info _swigt__p_f_p_cpShape_cpVect_cpVect__cpBB = {"_p_f_p_cpShape_cpVect_cpVect__cpBB", "cpShapeCacheDataImpl|struct cpBB (*)(cpShape *,cpVect,cpVect)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_float__void = {"_p_f_p_struct_cpBody_float__void", "void (*)(struct cpBody *,float)|cpBodyPositionFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void = {"_p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void", "cpBodyArbiterIteratorFunc|void (*)(struct cpBody *,struct cpArbiter *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void = {"_p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void", "cpBodyConstraintIteratorFunc|void (*)(struct cpBody *,struct cpConstraint *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_p_struct_cpShape_p_void__void = {"_p_f_p_struct_cpBody_p_struct_cpShape_p_void__void", "cpBodyShapeIteratorFunc|void (*)(struct cpBody *,struct cpShape *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_p_void__void = {"_p_f_p_struct_cpBody_p_void__void", "cpSpaceBodyIteratorFunc|void (*)(struct cpBody *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpBody_struct_cpVect_float_float__void = {"_p_f_p_struct_cpBody_struct_cpVect_float_float__void", "void (*)(struct cpBody *,struct cpVect,float,float)|cpBodyVelocityFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpConstraint__float = {"_p_f_p_struct_cpConstraint__float", "float (*)(struct cpConstraint *)|cpConstraintGetImpulseImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpConstraint_float__float = {"_p_f_p_struct_cpConstraint_float__float", "cpDampedSpringForceFunc|cpDampedRotarySpringTorqueFunc|float (*)(struct cpConstraint *,float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpConstraint_float__void = {"_p_f_p_struct_cpConstraint_float__void", "void (*)(struct cpConstraint *,float)|cpConstraintApplyCachedImpulseImpl|cpConstraintApplyImpulseImpl|cpConstraintPreStepImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpConstraint_p_struct_cpSpace__void = {"_p_f_p_struct_cpConstraint_p_struct_cpSpace__void", "void (*)(struct cpConstraint *,struct cpSpace *)|cpConstraintPreSolveFunc|cpConstraintPostSolveFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpConstraint_p_void__void = {"_p_f_p_struct_cpConstraint_p_void__void", "cpSpaceConstraintIteratorFunc|void (*)(struct cpConstraint *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape__void = {"_p_f_p_struct_cpShape__void", "cpShapeDestroyImpl|void (*)(struct cpShape *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape_float_struct_cpVect_p_void__void = {"_p_f_p_struct_cpShape_float_struct_cpVect_p_void__void", "void (*)(struct cpShape *,float,struct cpVect,void *)|cpSpaceNearestPointQueryFunc|cpSpaceSegmentQueryFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void = {"_p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void", "void (*)(struct cpShape *,cpContactPointSet *,void *)|cpSpaceShapeQueryFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape_p_void__void = {"_p_f_p_struct_cpShape_p_void__void", "cpSpaceShapeIteratorFunc|void (*)(struct cpShape *,void *)|cpSpacePointQueryFunc|cpSpaceBBQueryFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void = {"_p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void", "void (*)(struct cpShape *,struct cpVect,struct cpNearestPointQueryInfo *)|cpShapeNearestPointQueryImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void = {"_p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void", "void (*)(struct cpShape *,struct cpVect,struct cpVect,struct cpSegmentQueryInfo *)|cpShapeSegmentQueryImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpace_p_void_p_void__void = {"_p_f_p_struct_cpSpace_p_void_p_void__void", "cpPostStepFunc|void (*)(struct cpSpace *,void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex__int = {"_p_f_p_struct_cpSpatialIndex__int", "int (*)(struct cpSpatialIndex *)|cpSpatialIndexCountImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex__void = {"_p_f_p_struct_cpSpatialIndex__void", "void (*)(struct cpSpatialIndex *)|cpSpatialIndexReindexImpl|cpSpatialIndexDestroyImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void = {"_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void", "void (*)(struct cpSpatialIndex *,void (*)(void *,void *),void *)|cpSpatialIndexEachImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void = {"_p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void", "void (*)(struct cpSpatialIndex *,void (*)(void *,void *,void *),void *)|cpSpatialIndexReindexQueryImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void = {"_p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void", "cpSpatialIndexQueryImpl|void (*)(struct cpSpatialIndex *,void *,struct cpBB,void (*)(void *,void *,void *),void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void = {"_p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void", "void (*)(struct cpSpatialIndex *,void *,struct cpVect,struct cpVect,float,float (*)(void *,void *,void *),void *)|cpSpatialIndexSegmentQueryImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int = {"_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int", "int (*)(struct cpSpatialIndex *,void *,uintptr_t)|cpSpatialIndexContainsImpl", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void = {"_p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void", "cpSpatialIndexRemoveImpl|cpSpatialIndexReindexObjectImpl|cpSpatialIndexInsertImpl|void (*)(struct cpSpatialIndex *,void *,uintptr_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__cpBB = {"_p_f_p_void__cpBB", "struct cpBB (*)(void *)|cpSpatialIndexBBFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__cpVect = {"_p_f_p_void__cpVect", "cpBBTreeVelocityFunc|struct cpVect (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void__void = {"_p_f_p_void_p_void__void", "cpSpatialIndexIteratorFunc|void (*)(void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void_p_void__float = {"_p_f_p_void_p_void_p_void__float", "float (*)(void *,void *,void *)|cpSpatialIndexSegmentQueryFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void_p_void__void = {"_p_f_p_void_p_void_p_void__void", "void (*)(void *,void *,void *)|cpSpatialIndexQueryFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|cpFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "cpBool *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uintptr_t = {"_p_uintptr_t", "uintptr_t *|cpCollisionType *|cpHashValue *|cpGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "cpTimestamp *|unsigned int *|cpLayers *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "cpDataPointer|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MyData,
  &_swigt__p_MyStruct,
  &_swigt__p_char,
  &_swigt__p_cpArbiter,
  &_swigt__p_cpArray,
  &_swigt__p_cpBB,
  &_swigt__p_cpBBTree,
  &_swigt__p_cpBody,
  &_swigt__p_cpCircleShape,
  &_swigt__p_cpCollisionBeginFunc,
  &_swigt__p_cpCollisionHandler,
  &_swigt__p_cpCollisionPostSolveFunc,
  &_swigt__p_cpCollisionPreSolveFunc,
  &_swigt__p_cpCollisionSeparateFunc,
  &_swigt__p_cpComponentNode,
  &_swigt__p_cpConstraint,
  &_swigt__p_cpConstraintClass,
  &_swigt__p_cpContactBufferHeader,
  &_swigt__p_cpDampedRotarySpring,
  &_swigt__p_cpDampedSpring,
  &_swigt__p_cpGearJoint,
  &_swigt__p_cpGrooveJoint,
  &_swigt__p_cpHashSet,
  &_swigt__p_cpMat2x2,
  &_swigt__p_cpNearestPointQueryInfo,
  &_swigt__p_cpPinJoint,
  &_swigt__p_cpPivotJoint,
  &_swigt__p_cpPolyShape,
  &_swigt__p_cpRatchetJoint,
  &_swigt__p_cpRotaryLimitJoint,
  &_swigt__p_cpSegmentQueryInfo,
  &_swigt__p_cpSegmentShape,
  &_swigt__p_cpShape,
  &_swigt__p_cpShapeClass,
  &_swigt__p_cpShapeType,
  &_swigt__p_cpSimpleMotor,
  &_swigt__p_cpSlideJoint,
  &_swigt__p_cpSpace,
  &_swigt__p_cpSpaceHash,
  &_swigt__p_cpSpatialIndex,
  &_swigt__p_cpSpatialIndexClass,
  &_swigt__p_cpSplittingPlane,
  &_swigt__p_cpSweep1D,
  &_swigt__p_cpVect,
  &_swigt__p_f_p_cpShape_cpVect_cpVect__cpBB,
  &_swigt__p_f_p_struct_cpBody_float__void,
  &_swigt__p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void,
  &_swigt__p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void,
  &_swigt__p_f_p_struct_cpBody_p_struct_cpShape_p_void__void,
  &_swigt__p_f_p_struct_cpBody_p_void__void,
  &_swigt__p_f_p_struct_cpBody_struct_cpVect_float_float__void,
  &_swigt__p_f_p_struct_cpConstraint__float,
  &_swigt__p_f_p_struct_cpConstraint_float__float,
  &_swigt__p_f_p_struct_cpConstraint_float__void,
  &_swigt__p_f_p_struct_cpConstraint_p_struct_cpSpace__void,
  &_swigt__p_f_p_struct_cpConstraint_p_void__void,
  &_swigt__p_f_p_struct_cpShape__void,
  &_swigt__p_f_p_struct_cpShape_float_struct_cpVect_p_void__void,
  &_swigt__p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void,
  &_swigt__p_f_p_struct_cpShape_p_void__void,
  &_swigt__p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void,
  &_swigt__p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void,
  &_swigt__p_f_p_struct_cpSpace_p_void_p_void__void,
  &_swigt__p_f_p_struct_cpSpatialIndex__int,
  &_swigt__p_f_p_struct_cpSpatialIndex__void,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int,
  &_swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void,
  &_swigt__p_f_p_void__cpBB,
  &_swigt__p_f_p_void__cpVect,
  &_swigt__p_f_p_void_p_void__void,
  &_swigt__p_f_p_void_p_void_p_void__float,
  &_swigt__p_f_p_void_p_void_p_void__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_uintptr_t,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_MyData[] = {  {&_swigt__p_MyData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MyStruct[] = {  {&_swigt__p_MyStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpArbiter[] = {  {&_swigt__p_cpArbiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpArray[] = {  {&_swigt__p_cpArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpBB[] = {  {&_swigt__p_cpBB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpBBTree[] = {  {&_swigt__p_cpBBTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpBody[] = {  {&_swigt__p_cpBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCircleShape[] = {  {&_swigt__p_cpCircleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCollisionBeginFunc[] = {  {&_swigt__p_cpCollisionBeginFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCollisionHandler[] = {  {&_swigt__p_cpCollisionHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCollisionPostSolveFunc[] = {  {&_swigt__p_cpCollisionPostSolveFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCollisionPreSolveFunc[] = {  {&_swigt__p_cpCollisionPreSolveFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpCollisionSeparateFunc[] = {  {&_swigt__p_cpCollisionSeparateFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpComponentNode[] = {  {&_swigt__p_cpComponentNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpConstraint[] = {  {&_swigt__p_cpConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpConstraintClass[] = {  {&_swigt__p_cpConstraintClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpContactBufferHeader[] = {  {&_swigt__p_cpContactBufferHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpDampedRotarySpring[] = {  {&_swigt__p_cpDampedRotarySpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpDampedSpring[] = {  {&_swigt__p_cpDampedSpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpGearJoint[] = {  {&_swigt__p_cpGearJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpGrooveJoint[] = {  {&_swigt__p_cpGrooveJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpHashSet[] = {  {&_swigt__p_cpHashSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpMat2x2[] = {  {&_swigt__p_cpMat2x2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpNearestPointQueryInfo[] = {  {&_swigt__p_cpNearestPointQueryInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpPinJoint[] = {  {&_swigt__p_cpPinJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpPivotJoint[] = {  {&_swigt__p_cpPivotJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpPolyShape[] = {  {&_swigt__p_cpPolyShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpRatchetJoint[] = {  {&_swigt__p_cpRatchetJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpRotaryLimitJoint[] = {  {&_swigt__p_cpRotaryLimitJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSegmentQueryInfo[] = {  {&_swigt__p_cpSegmentQueryInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSegmentShape[] = {  {&_swigt__p_cpSegmentShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpShape[] = {  {&_swigt__p_cpShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpShapeClass[] = {  {&_swigt__p_cpShapeClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpShapeType[] = {  {&_swigt__p_cpShapeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSimpleMotor[] = {  {&_swigt__p_cpSimpleMotor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSlideJoint[] = {  {&_swigt__p_cpSlideJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSpace[] = {  {&_swigt__p_cpSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSpaceHash[] = {  {&_swigt__p_cpSpaceHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSpatialIndex[] = {  {&_swigt__p_cpSpatialIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSpatialIndexClass[] = {  {&_swigt__p_cpSpatialIndexClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSplittingPlane[] = {  {&_swigt__p_cpSplittingPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpSweep1D[] = {  {&_swigt__p_cpSweep1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpVect[] = {  {&_swigt__p_cpVect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_cpShape_cpVect_cpVect__cpBB[] = {  {&_swigt__p_f_p_cpShape_cpVect_cpVect__cpBB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_float__void[] = {  {&_swigt__p_f_p_struct_cpBody_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void[] = {  {&_swigt__p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void[] = {  {&_swigt__p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_p_struct_cpShape_p_void__void[] = {  {&_swigt__p_f_p_struct_cpBody_p_struct_cpShape_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_p_void__void[] = {  {&_swigt__p_f_p_struct_cpBody_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpBody_struct_cpVect_float_float__void[] = {  {&_swigt__p_f_p_struct_cpBody_struct_cpVect_float_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpConstraint__float[] = {  {&_swigt__p_f_p_struct_cpConstraint__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpConstraint_float__float[] = {  {&_swigt__p_f_p_struct_cpConstraint_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpConstraint_float__void[] = {  {&_swigt__p_f_p_struct_cpConstraint_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpConstraint_p_struct_cpSpace__void[] = {  {&_swigt__p_f_p_struct_cpConstraint_p_struct_cpSpace__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpConstraint_p_void__void[] = {  {&_swigt__p_f_p_struct_cpConstraint_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape__void[] = {  {&_swigt__p_f_p_struct_cpShape__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape_float_struct_cpVect_p_void__void[] = {  {&_swigt__p_f_p_struct_cpShape_float_struct_cpVect_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void[] = {  {&_swigt__p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape_p_void__void[] = {  {&_swigt__p_f_p_struct_cpShape_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void[] = {  {&_swigt__p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void[] = {  {&_swigt__p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpace_p_void_p_void__void[] = {  {&_swigt__p_f_p_struct_cpSpace_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex__int[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void[] = {  {&_swigt__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__cpBB[] = {  {&_swigt__p_f_p_void__cpBB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__cpVect[] = {  {&_swigt__p_f_p_void__cpVect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void__void[] = {  {&_swigt__p_f_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void_p_void__float[] = {  {&_swigt__p_f_p_void_p_void_p_void__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void_p_void__void[] = {  {&_swigt__p_f_p_void_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uintptr_t[] = {  {&_swigt__p_uintptr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MyData,
  _swigc__p_MyStruct,
  _swigc__p_char,
  _swigc__p_cpArbiter,
  _swigc__p_cpArray,
  _swigc__p_cpBB,
  _swigc__p_cpBBTree,
  _swigc__p_cpBody,
  _swigc__p_cpCircleShape,
  _swigc__p_cpCollisionBeginFunc,
  _swigc__p_cpCollisionHandler,
  _swigc__p_cpCollisionPostSolveFunc,
  _swigc__p_cpCollisionPreSolveFunc,
  _swigc__p_cpCollisionSeparateFunc,
  _swigc__p_cpComponentNode,
  _swigc__p_cpConstraint,
  _swigc__p_cpConstraintClass,
  _swigc__p_cpContactBufferHeader,
  _swigc__p_cpDampedRotarySpring,
  _swigc__p_cpDampedSpring,
  _swigc__p_cpGearJoint,
  _swigc__p_cpGrooveJoint,
  _swigc__p_cpHashSet,
  _swigc__p_cpMat2x2,
  _swigc__p_cpNearestPointQueryInfo,
  _swigc__p_cpPinJoint,
  _swigc__p_cpPivotJoint,
  _swigc__p_cpPolyShape,
  _swigc__p_cpRatchetJoint,
  _swigc__p_cpRotaryLimitJoint,
  _swigc__p_cpSegmentQueryInfo,
  _swigc__p_cpSegmentShape,
  _swigc__p_cpShape,
  _swigc__p_cpShapeClass,
  _swigc__p_cpShapeType,
  _swigc__p_cpSimpleMotor,
  _swigc__p_cpSlideJoint,
  _swigc__p_cpSpace,
  _swigc__p_cpSpaceHash,
  _swigc__p_cpSpatialIndex,
  _swigc__p_cpSpatialIndexClass,
  _swigc__p_cpSplittingPlane,
  _swigc__p_cpSweep1D,
  _swigc__p_cpVect,
  _swigc__p_f_p_cpShape_cpVect_cpVect__cpBB,
  _swigc__p_f_p_struct_cpBody_float__void,
  _swigc__p_f_p_struct_cpBody_p_struct_cpArbiter_p_void__void,
  _swigc__p_f_p_struct_cpBody_p_struct_cpConstraint_p_void__void,
  _swigc__p_f_p_struct_cpBody_p_struct_cpShape_p_void__void,
  _swigc__p_f_p_struct_cpBody_p_void__void,
  _swigc__p_f_p_struct_cpBody_struct_cpVect_float_float__void,
  _swigc__p_f_p_struct_cpConstraint__float,
  _swigc__p_f_p_struct_cpConstraint_float__float,
  _swigc__p_f_p_struct_cpConstraint_float__void,
  _swigc__p_f_p_struct_cpConstraint_p_struct_cpSpace__void,
  _swigc__p_f_p_struct_cpConstraint_p_void__void,
  _swigc__p_f_p_struct_cpShape__void,
  _swigc__p_f_p_struct_cpShape_float_struct_cpVect_p_void__void,
  _swigc__p_f_p_struct_cpShape_p_cpContactPointSet_p_void__void,
  _swigc__p_f_p_struct_cpShape_p_void__void,
  _swigc__p_f_p_struct_cpShape_struct_cpVect_p_struct_cpNearestPointQueryInfo__void,
  _swigc__p_f_p_struct_cpShape_struct_cpVect_struct_cpVect_p_struct_cpSegmentQueryInfo__void,
  _swigc__p_f_p_struct_cpSpace_p_void_p_void__void,
  _swigc__p_f_p_struct_cpSpatialIndex__int,
  _swigc__p_f_p_struct_cpSpatialIndex__void,
  _swigc__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void__void_p_void__void,
  _swigc__p_f_p_struct_cpSpatialIndex_p_f_p_void_p_void_p_void__void_p_void__void,
  _swigc__p_f_p_struct_cpSpatialIndex_p_void_struct_cpBB_p_f_p_void_p_void_p_void__void_p_void__void,
  _swigc__p_f_p_struct_cpSpatialIndex_p_void_struct_cpVect_struct_cpVect_float_p_f_p_void_p_void_p_void__float_p_void__void,
  _swigc__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__int,
  _swigc__p_f_p_struct_cpSpatialIndex_p_void_uintptr_t__void,
  _swigc__p_f_p_void__cpBB,
  _swigc__p_f_p_void__cpVect,
  _swigc__p_f_p_void_p_void__void,
  _swigc__p_f_p_void_p_void_p_void__float,
  _swigc__p_f_p_void_p_void_p_void__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_uintptr_t,
  _swigc__p_unsigned_int,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */





SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::External> mod = v8::External::New(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(v8::String::New("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = v8::Context::GetCurrent()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(v8::String::New("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);
 
  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/************  BEGIN: "swiginit.swg" *******************/ 
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/************  END:   "swiginit.swg" *******************/ 

extern "C" {
#if defined(BUILDING_NODE_EXTENSION)
  void example_initialize(v8::Handle<v8::Object> global_obj, v8::Handle<v8::Object> /*module*/)
#else
  void example_initialize(v8::Handle<v8::Object> global_obj)
#endif
  {
    SWIG_InitializeModule(static_cast<void *>(&global_obj));
    
    v8::HandleScope scope;
    
    // a class template for creating proxies of undefined types
    
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    SWIGV8_SWIGTYPE_Proxy_class_templ = v8::Persistent<v8::FunctionTemplate>::New(SWIGV8_CreateClassTemplate("SwigProxy"));
#else
    SWIGV8_SWIGTYPE_Proxy_class_templ.Reset(v8::Isolate::GetCurrent(), SWIGV8_CreateClassTemplate("SwigProxy"));
#endif
    
    
    /* create objects for namespaces */
    v8::Handle<v8::Object> example_obj = v8::Object::New();
    
    
    /* create class templates */
    v8::Handle<v8::FunctionTemplate> _MyStruct_class = SWIGV8_CreateClassTemplate("_MyStruct");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _MyStruct_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_MyStruct_class);
#else
    _MyStruct_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _MyStruct_class);
#endif
    _MyStruct_clientData.dtor = _wrap_delete_MyStruct;  
    SWIGTYPE_p_MyStruct->clientdata = &_MyStruct_clientData;
    v8::Handle<v8::FunctionTemplate> _MyData_class = SWIGV8_CreateClassTemplate("_MyData");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _MyData_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_MyData_class);
#else
    _MyData_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _MyData_class);
#endif
    _MyData_clientData.dtor = _wrap_delete_MyData;  
    SWIGTYPE_p_MyData->clientdata = &_MyData_clientData;
    v8::Handle<v8::FunctionTemplate> _cpVect_class = SWIGV8_CreateClassTemplate("_cpVect");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpVect_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpVect_class);
#else
    _cpVect_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpVect_class);
#endif
    _cpVect_clientData.dtor = _wrap_delete_cpVect;  
    SWIGTYPE_p_cpVect->clientdata = &_cpVect_clientData;
    v8::Handle<v8::FunctionTemplate> _cpMat2x2_class = SWIGV8_CreateClassTemplate("_cpMat2x2");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpMat2x2_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpMat2x2_class);
#else
    _cpMat2x2_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpMat2x2_class);
#endif
    _cpMat2x2_clientData.dtor = _wrap_delete_cpMat2x2;  
    SWIGTYPE_p_cpMat2x2->clientdata = &_cpMat2x2_clientData;
    v8::Handle<v8::FunctionTemplate> _cpBB_class = SWIGV8_CreateClassTemplate("_cpBB");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpBB_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpBB_class);
#else
    _cpBB_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpBB_class);
#endif
    _cpBB_clientData.dtor = _wrap_delete_cpBB;  
    SWIGTYPE_p_cpBB->clientdata = &_cpBB_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSpatialIndex_class = SWIGV8_CreateClassTemplate("_cpSpatialIndex");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSpatialIndex_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSpatialIndex_class);
#else
    _cpSpatialIndex_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSpatialIndex_class);
#endif
    _cpSpatialIndex_clientData.dtor = _wrap_delete_cpSpatialIndex;  
    SWIGTYPE_p_cpSpatialIndex->clientdata = &_cpSpatialIndex_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSpatialIndexClass_class = SWIGV8_CreateClassTemplate("_cpSpatialIndexClass");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSpatialIndexClass_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSpatialIndexClass_class);
#else
    _cpSpatialIndexClass_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSpatialIndexClass_class);
#endif
    _cpSpatialIndexClass_clientData.dtor = _wrap_delete_cpSpatialIndexClass;  
    SWIGTYPE_p_cpSpatialIndexClass->clientdata = &_cpSpatialIndexClass_clientData;
    v8::Handle<v8::FunctionTemplate> _cpComponentNode_class = SWIGV8_CreateClassTemplate("_cpComponentNode");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpComponentNode_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpComponentNode_class);
#else
    _cpComponentNode_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpComponentNode_class);
#endif
    _cpComponentNode_clientData.dtor = _wrap_delete_cpComponentNode;  
    SWIGTYPE_p_cpComponentNode->clientdata = &_cpComponentNode_clientData;
    v8::Handle<v8::FunctionTemplate> _cpBody_class = SWIGV8_CreateClassTemplate("_cpBody");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpBody_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpBody_class);
#else
    _cpBody_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpBody_class);
#endif
    _cpBody_clientData.dtor = _wrap_delete_cpBody;  
    SWIGTYPE_p_cpBody->clientdata = &_cpBody_clientData;
    v8::Handle<v8::FunctionTemplate> _cpNearestPointQueryInfo_class = SWIGV8_CreateClassTemplate("_cpNearestPointQueryInfo");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpNearestPointQueryInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpNearestPointQueryInfo_class);
#else
    _cpNearestPointQueryInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpNearestPointQueryInfo_class);
#endif
    _cpNearestPointQueryInfo_clientData.dtor = _wrap_delete_cpNearestPointQueryInfo;  
    SWIGTYPE_p_cpNearestPointQueryInfo->clientdata = &_cpNearestPointQueryInfo_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSegmentQueryInfo_class = SWIGV8_CreateClassTemplate("_cpSegmentQueryInfo");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSegmentQueryInfo_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSegmentQueryInfo_class);
#else
    _cpSegmentQueryInfo_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSegmentQueryInfo_class);
#endif
    _cpSegmentQueryInfo_clientData.dtor = _wrap_delete_cpSegmentQueryInfo;  
    SWIGTYPE_p_cpSegmentQueryInfo->clientdata = &_cpSegmentQueryInfo_clientData;
    v8::Handle<v8::FunctionTemplate> _cpShapeClass_class = SWIGV8_CreateClassTemplate("_cpShapeClass");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpShapeClass_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpShapeClass_class);
#else
    _cpShapeClass_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpShapeClass_class);
#endif
    _cpShapeClass_clientData.dtor = _wrap_delete_cpShapeClass;  
    SWIGTYPE_p_cpShapeClass->clientdata = &_cpShapeClass_clientData;
    v8::Handle<v8::FunctionTemplate> _cpShape_class = SWIGV8_CreateClassTemplate("_cpShape");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpShape_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpShape_class);
#else
    _cpShape_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpShape_class);
#endif
    _cpShape_clientData.dtor = _wrap_delete_cpShape;  
    SWIGTYPE_p_cpShape->clientdata = &_cpShape_clientData;
    v8::Handle<v8::FunctionTemplate> _cpCircleShape_class = SWIGV8_CreateClassTemplate("_cpCircleShape");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpCircleShape_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpCircleShape_class);
#else
    _cpCircleShape_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpCircleShape_class);
#endif
    _cpCircleShape_clientData.dtor = _wrap_delete_cpCircleShape;  
    SWIGTYPE_p_cpCircleShape->clientdata = &_cpCircleShape_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSegmentShape_class = SWIGV8_CreateClassTemplate("_cpSegmentShape");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSegmentShape_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSegmentShape_class);
#else
    _cpSegmentShape_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSegmentShape_class);
#endif
    _cpSegmentShape_clientData.dtor = _wrap_delete_cpSegmentShape;  
    SWIGTYPE_p_cpSegmentShape->clientdata = &_cpSegmentShape_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSplittingPlane_class = SWIGV8_CreateClassTemplate("_cpSplittingPlane");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSplittingPlane_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSplittingPlane_class);
#else
    _cpSplittingPlane_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSplittingPlane_class);
#endif
    _cpSplittingPlane_clientData.dtor = _wrap_delete_cpSplittingPlane;  
    SWIGTYPE_p_cpSplittingPlane->clientdata = &_cpSplittingPlane_clientData;
    v8::Handle<v8::FunctionTemplate> _cpPolyShape_class = SWIGV8_CreateClassTemplate("_cpPolyShape");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpPolyShape_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpPolyShape_class);
#else
    _cpPolyShape_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpPolyShape_class);
#endif
    _cpPolyShape_clientData.dtor = _wrap_delete_cpPolyShape;  
    SWIGTYPE_p_cpPolyShape->clientdata = &_cpPolyShape_clientData;
    v8::Handle<v8::FunctionTemplate> _cpConstraintClass_class = SWIGV8_CreateClassTemplate("_cpConstraintClass");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpConstraintClass_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpConstraintClass_class);
#else
    _cpConstraintClass_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpConstraintClass_class);
#endif
    _cpConstraintClass_clientData.dtor = _wrap_delete_cpConstraintClass;  
    SWIGTYPE_p_cpConstraintClass->clientdata = &_cpConstraintClass_clientData;
    v8::Handle<v8::FunctionTemplate> _cpConstraint_class = SWIGV8_CreateClassTemplate("_cpConstraint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpConstraint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpConstraint_class);
#else
    _cpConstraint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpConstraint_class);
#endif
    _cpConstraint_clientData.dtor = _wrap_delete_cpConstraint;  
    SWIGTYPE_p_cpConstraint->clientdata = &_cpConstraint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpPinJoint_class = SWIGV8_CreateClassTemplate("_cpPinJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpPinJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpPinJoint_class);
#else
    _cpPinJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpPinJoint_class);
#endif
    _cpPinJoint_clientData.dtor = _wrap_delete_cpPinJoint;  
    SWIGTYPE_p_cpPinJoint->clientdata = &_cpPinJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSlideJoint_class = SWIGV8_CreateClassTemplate("_cpSlideJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSlideJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSlideJoint_class);
#else
    _cpSlideJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSlideJoint_class);
#endif
    _cpSlideJoint_clientData.dtor = _wrap_delete_cpSlideJoint;  
    SWIGTYPE_p_cpSlideJoint->clientdata = &_cpSlideJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpPivotJoint_class = SWIGV8_CreateClassTemplate("_cpPivotJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpPivotJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpPivotJoint_class);
#else
    _cpPivotJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpPivotJoint_class);
#endif
    _cpPivotJoint_clientData.dtor = _wrap_delete_cpPivotJoint;  
    SWIGTYPE_p_cpPivotJoint->clientdata = &_cpPivotJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpGrooveJoint_class = SWIGV8_CreateClassTemplate("_cpGrooveJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpGrooveJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpGrooveJoint_class);
#else
    _cpGrooveJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpGrooveJoint_class);
#endif
    _cpGrooveJoint_clientData.dtor = _wrap_delete_cpGrooveJoint;  
    SWIGTYPE_p_cpGrooveJoint->clientdata = &_cpGrooveJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpDampedSpring_class = SWIGV8_CreateClassTemplate("_cpDampedSpring");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpDampedSpring_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpDampedSpring_class);
#else
    _cpDampedSpring_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpDampedSpring_class);
#endif
    _cpDampedSpring_clientData.dtor = _wrap_delete_cpDampedSpring;  
    SWIGTYPE_p_cpDampedSpring->clientdata = &_cpDampedSpring_clientData;
    v8::Handle<v8::FunctionTemplate> _cpDampedRotarySpring_class = SWIGV8_CreateClassTemplate("_cpDampedRotarySpring");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpDampedRotarySpring_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpDampedRotarySpring_class);
#else
    _cpDampedRotarySpring_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpDampedRotarySpring_class);
#endif
    _cpDampedRotarySpring_clientData.dtor = _wrap_delete_cpDampedRotarySpring;  
    SWIGTYPE_p_cpDampedRotarySpring->clientdata = &_cpDampedRotarySpring_clientData;
    v8::Handle<v8::FunctionTemplate> _cpRotaryLimitJoint_class = SWIGV8_CreateClassTemplate("_cpRotaryLimitJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpRotaryLimitJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpRotaryLimitJoint_class);
#else
    _cpRotaryLimitJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpRotaryLimitJoint_class);
#endif
    _cpRotaryLimitJoint_clientData.dtor = _wrap_delete_cpRotaryLimitJoint;  
    SWIGTYPE_p_cpRotaryLimitJoint->clientdata = &_cpRotaryLimitJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpRatchetJoint_class = SWIGV8_CreateClassTemplate("_cpRatchetJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpRatchetJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpRatchetJoint_class);
#else
    _cpRatchetJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpRatchetJoint_class);
#endif
    _cpRatchetJoint_clientData.dtor = _wrap_delete_cpRatchetJoint;  
    SWIGTYPE_p_cpRatchetJoint->clientdata = &_cpRatchetJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpGearJoint_class = SWIGV8_CreateClassTemplate("_cpGearJoint");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpGearJoint_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpGearJoint_class);
#else
    _cpGearJoint_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpGearJoint_class);
#endif
    _cpGearJoint_clientData.dtor = _wrap_delete_cpGearJoint;  
    SWIGTYPE_p_cpGearJoint->clientdata = &_cpGearJoint_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSimpleMotor_class = SWIGV8_CreateClassTemplate("_cpSimpleMotor");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSimpleMotor_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSimpleMotor_class);
#else
    _cpSimpleMotor_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSimpleMotor_class);
#endif
    _cpSimpleMotor_clientData.dtor = _wrap_delete_cpSimpleMotor;  
    SWIGTYPE_p_cpSimpleMotor->clientdata = &_cpSimpleMotor_clientData;
    v8::Handle<v8::FunctionTemplate> _cpSpace_class = SWIGV8_CreateClassTemplate("_cpSpace");
#if defined(BUILDING_NODE_EXTENSION) || defined(V8_3_14)
    _cpSpace_clientData.class_templ = v8::Persistent<v8::FunctionTemplate>::New(_cpSpace_class);
#else
    _cpSpace_clientData.class_templ.Reset(v8::Isolate::GetCurrent(), _cpSpace_class);
#endif
    _cpSpace_clientData.dtor = _wrap_delete_cpSpace;  
    SWIGTYPE_p_cpSpace->clientdata = &_cpSpace_clientData;
    
    
    /* register wrapper functions */
    SWIGV8_AddMemberVariable(_MyStruct_class, "x", _wrap_MyStruct_x_get, _wrap_MyStruct_x_set);
    SWIGV8_AddMemberVariable(_MyStruct_class, "y", _wrap_MyStruct_y_get, _wrap_MyStruct_y_set);
    SWIGV8_AddMemberVariable(_MyStruct_class, "z", _wrap_MyStruct_z_get, _wrap_MyStruct_z_set);
    SWIGV8_AddStaticVariable(example_obj, "CP_ALLOW_PRIVATE_ACCESS", _wrap_CP_ALLOW_PRIVATE_ACCESS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_USE_CGPOINTS", _wrap_CP_USE_CGPOINTS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_USE_DOUBLES", _wrap_CP_USE_DOUBLES, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "INFINITY", _wrap_INFINITY, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "M_PI", _wrap_M_PI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "M_E", _wrap_M_E, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "cpTrue", _wrap_cpTrue, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "cpFalse", _wrap_cpFalse, JS_veto_set_variable);
    SWIGV8_AddMemberVariable(_cpVect_class, "x", _wrap_cpVect_x_get, _wrap_cpVect_x_set);
    SWIGV8_AddMemberVariable(_cpVect_class, "y", _wrap_cpVect_y_get, _wrap_cpVect_y_set);
    SWIGV8_AddMemberVariable(_cpMat2x2_class, "a", _wrap_cpMat2x2_a_get, _wrap_cpMat2x2_a_set);
    SWIGV8_AddMemberVariable(_cpMat2x2_class, "b", _wrap_cpMat2x2_b_get, _wrap_cpMat2x2_b_set);
    SWIGV8_AddMemberVariable(_cpMat2x2_class, "c", _wrap_cpMat2x2_c_get, _wrap_cpMat2x2_c_set);
    SWIGV8_AddMemberVariable(_cpMat2x2_class, "d", _wrap_cpMat2x2_d_get, _wrap_cpMat2x2_d_set);
    SWIGV8_AddStaticVariable(example_obj, "CP_BUFFER_BYTES", _wrap_CP_BUFFER_BYTES, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "cpvzero", _wrap_cpvzero_get, JS_veto_set_variable);
    SWIGV8_AddMemberVariable(_cpBB_class, "l", _wrap_cpBB_l_get, _wrap_cpBB_l_set);
    SWIGV8_AddMemberVariable(_cpBB_class, "b", _wrap_cpBB_b_get, _wrap_cpBB_b_set);
    SWIGV8_AddMemberVariable(_cpBB_class, "r", _wrap_cpBB_r_get, _wrap_cpBB_r_set);
    SWIGV8_AddMemberVariable(_cpBB_class, "t", _wrap_cpBB_t_get, _wrap_cpBB_t_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndex_class, "klass", _wrap_cpSpatialIndex_klass_get, _wrap_cpSpatialIndex_klass_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndex_class, "bbfunc", _wrap_cpSpatialIndex_bbfunc_get, _wrap_cpSpatialIndex_bbfunc_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndex_class, "staticIndex", _wrap_cpSpatialIndex_staticIndex_get, _wrap_cpSpatialIndex_staticIndex_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndex_class, "dynamicIndex", _wrap_cpSpatialIndex_dynamicIndex_get, _wrap_cpSpatialIndex_dynamicIndex_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "destroy", _wrap_cpSpatialIndexClass_destroy_get, _wrap_cpSpatialIndexClass_destroy_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "count", _wrap_cpSpatialIndexClass_count_get, _wrap_cpSpatialIndexClass_count_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "each", _wrap_cpSpatialIndexClass_each_get, _wrap_cpSpatialIndexClass_each_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "contains", _wrap_cpSpatialIndexClass_contains_get, _wrap_cpSpatialIndexClass_contains_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "insert", _wrap_cpSpatialIndexClass_insert_get, _wrap_cpSpatialIndexClass_insert_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "remove", _wrap_cpSpatialIndexClass_remove_get, _wrap_cpSpatialIndexClass_remove_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "reindex", _wrap_cpSpatialIndexClass_reindex_get, _wrap_cpSpatialIndexClass_reindex_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "reindexObject", _wrap_cpSpatialIndexClass_reindexObject_get, _wrap_cpSpatialIndexClass_reindexObject_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "reindexQuery", _wrap_cpSpatialIndexClass_reindexQuery_get, _wrap_cpSpatialIndexClass_reindexQuery_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "query", _wrap_cpSpatialIndexClass_query_get, _wrap_cpSpatialIndexClass_query_set);
    SWIGV8_AddMemberVariable(_cpSpatialIndexClass_class, "segmentQuery", _wrap_cpSpatialIndexClass_segmentQuery_get, _wrap_cpSpatialIndexClass_segmentQuery_set);
    SWIGV8_AddMemberVariable(_cpComponentNode_class, "root", _wrap_cpComponentNode_root_get, _wrap_cpComponentNode_root_set);
    SWIGV8_AddMemberVariable(_cpComponentNode_class, "next", _wrap_cpComponentNode_next_get, _wrap_cpComponentNode_next_set);
    SWIGV8_AddMemberVariable(_cpComponentNode_class, "idleTime", _wrap_cpComponentNode_idleTime_get, _wrap_cpComponentNode_idleTime_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "velocity_func", _wrap_cpBody_velocity_func_get, _wrap_cpBody_velocity_func_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "position_func", _wrap_cpBody_position_func_get, _wrap_cpBody_position_func_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "m", _wrap_cpBody_m_get, _wrap_cpBody_m_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "m_inv", _wrap_cpBody_m_inv_get, _wrap_cpBody_m_inv_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "i", _wrap_cpBody_i_get, _wrap_cpBody_i_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "i_inv", _wrap_cpBody_i_inv_get, _wrap_cpBody_i_inv_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "p", _wrap_cpBody_p_get, _wrap_cpBody_p_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "v", _wrap_cpBody_v_get, _wrap_cpBody_v_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "f", _wrap_cpBody_f_get, _wrap_cpBody_f_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "a", _wrap_cpBody_a_get, _wrap_cpBody_a_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "w", _wrap_cpBody_w_get, _wrap_cpBody_w_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "t", _wrap_cpBody_t_get, _wrap_cpBody_t_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "rot", _wrap_cpBody_rot_get, _wrap_cpBody_rot_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "data", _wrap_cpBody_data_get, _wrap_cpBody_data_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "v_limit", _wrap_cpBody_v_limit_get, _wrap_cpBody_v_limit_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "w_limit", _wrap_cpBody_w_limit_get, _wrap_cpBody_w_limit_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "v_bias_private", _wrap_cpBody_v_bias_private_get, _wrap_cpBody_v_bias_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "w_bias_private", _wrap_cpBody_w_bias_private_get, _wrap_cpBody_w_bias_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "space_private", _wrap_cpBody_space_private_get, _wrap_cpBody_space_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "shapeList_private", _wrap_cpBody_shapeList_private_get, _wrap_cpBody_shapeList_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "arbiterList_private", _wrap_cpBody_arbiterList_private_get, _wrap_cpBody_arbiterList_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "constraintList_private", _wrap_cpBody_constraintList_private_get, _wrap_cpBody_constraintList_private_set);
    SWIGV8_AddMemberVariable(_cpBody_class, "node_private", _wrap_cpBody_node_private_get, _wrap_cpBody_node_private_set);
    SWIGV8_AddMemberVariable(_cpNearestPointQueryInfo_class, "shape", _wrap_cpNearestPointQueryInfo_shape_get, _wrap_cpNearestPointQueryInfo_shape_set);
    SWIGV8_AddMemberVariable(_cpNearestPointQueryInfo_class, "p", _wrap_cpNearestPointQueryInfo_p_get, _wrap_cpNearestPointQueryInfo_p_set);
    SWIGV8_AddMemberVariable(_cpNearestPointQueryInfo_class, "d", _wrap_cpNearestPointQueryInfo_d_get, _wrap_cpNearestPointQueryInfo_d_set);
    SWIGV8_AddMemberVariable(_cpSegmentQueryInfo_class, "shape", _wrap_cpSegmentQueryInfo_shape_get, _wrap_cpSegmentQueryInfo_shape_set);
    SWIGV8_AddMemberVariable(_cpSegmentQueryInfo_class, "t", _wrap_cpSegmentQueryInfo_t_get, _wrap_cpSegmentQueryInfo_t_set);
    SWIGV8_AddMemberVariable(_cpSegmentQueryInfo_class, "n", _wrap_cpSegmentQueryInfo_n_get, _wrap_cpSegmentQueryInfo_n_set);
    SWIGV8_AddStaticVariable(example_obj, "CP_CIRCLE_SHAPE", _wrap_CP_CIRCLE_SHAPE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_SEGMENT_SHAPE", _wrap_CP_SEGMENT_SHAPE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_POLY_SHAPE", _wrap_CP_POLY_SHAPE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_NUM_SHAPES", _wrap_CP_NUM_SHAPES, JS_veto_set_variable);
    SWIGV8_AddMemberVariable(_cpShapeClass_class, "type", _wrap_cpShapeClass_type_get, _wrap_cpShapeClass_type_set);
    SWIGV8_AddMemberVariable(_cpShapeClass_class, "cacheData", _wrap_cpShapeClass_cacheData_get, _wrap_cpShapeClass_cacheData_set);
    SWIGV8_AddMemberVariable(_cpShapeClass_class, "destroy", _wrap_cpShapeClass_destroy_get, _wrap_cpShapeClass_destroy_set);
    SWIGV8_AddMemberVariable(_cpShapeClass_class, "nearestPointQuery", _wrap_cpShapeClass_nearestPointQuery_get, _wrap_cpShapeClass_nearestPointQuery_set);
    SWIGV8_AddMemberVariable(_cpShapeClass_class, "segmentQuery", _wrap_cpShapeClass_segmentQuery_get, _wrap_cpShapeClass_segmentQuery_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "klass_private", _wrap_cpShape_klass_private_get, _wrap_cpShape_klass_private_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "body", _wrap_cpShape_body_get, _wrap_cpShape_body_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "bb", _wrap_cpShape_bb_get, _wrap_cpShape_bb_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "sensor", _wrap_cpShape_sensor_get, _wrap_cpShape_sensor_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "e", _wrap_cpShape_e_get, _wrap_cpShape_e_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "u", _wrap_cpShape_u_get, _wrap_cpShape_u_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "surface_v", _wrap_cpShape_surface_v_get, _wrap_cpShape_surface_v_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "data", _wrap_cpShape_data_get, _wrap_cpShape_data_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "collision_type", _wrap_cpShape_collision_type_get, _wrap_cpShape_collision_type_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "group", _wrap_cpShape_group_get, _wrap_cpShape_group_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "layers", _wrap_cpShape_layers_get, _wrap_cpShape_layers_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "space_private", _wrap_cpShape_space_private_get, _wrap_cpShape_space_private_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "next_private", _wrap_cpShape_next_private_get, _wrap_cpShape_next_private_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "prev_private", _wrap_cpShape_prev_private_get, _wrap_cpShape_prev_private_set);
    SWIGV8_AddMemberVariable(_cpShape_class, "hashid_private", _wrap_cpShape_hashid_private_get, _wrap_cpShape_hashid_private_set);
    SWIGV8_AddMemberVariable(_cpCircleShape_class, "shape", _wrap_cpCircleShape_shape_get, _wrap_cpCircleShape_shape_set);
    SWIGV8_AddMemberVariable(_cpCircleShape_class, "c", _wrap_cpCircleShape_c_get, _wrap_cpCircleShape_c_set);
    SWIGV8_AddMemberVariable(_cpCircleShape_class, "tc", _wrap_cpCircleShape_tc_get, _wrap_cpCircleShape_tc_set);
    SWIGV8_AddMemberVariable(_cpCircleShape_class, "r", _wrap_cpCircleShape_r_get, _wrap_cpCircleShape_r_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "shape", _wrap_cpSegmentShape_shape_get, _wrap_cpSegmentShape_shape_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "a", _wrap_cpSegmentShape_a_get, _wrap_cpSegmentShape_a_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "b", _wrap_cpSegmentShape_b_get, _wrap_cpSegmentShape_b_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "n", _wrap_cpSegmentShape_n_get, _wrap_cpSegmentShape_n_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "ta", _wrap_cpSegmentShape_ta_get, _wrap_cpSegmentShape_ta_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "tb", _wrap_cpSegmentShape_tb_get, _wrap_cpSegmentShape_tb_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "tn", _wrap_cpSegmentShape_tn_get, _wrap_cpSegmentShape_tn_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "r", _wrap_cpSegmentShape_r_get, _wrap_cpSegmentShape_r_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "a_tangent", _wrap_cpSegmentShape_a_tangent_get, _wrap_cpSegmentShape_a_tangent_set);
    SWIGV8_AddMemberVariable(_cpSegmentShape_class, "b_tangent", _wrap_cpSegmentShape_b_tangent_get, _wrap_cpSegmentShape_b_tangent_set);
    SWIGV8_AddMemberVariable(_cpSplittingPlane_class, "n", _wrap_cpSplittingPlane_n_get, _wrap_cpSplittingPlane_n_set);
    SWIGV8_AddMemberVariable(_cpSplittingPlane_class, "d", _wrap_cpSplittingPlane_d_get, _wrap_cpSplittingPlane_d_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "shape", _wrap_cpPolyShape_shape_get, _wrap_cpPolyShape_shape_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "numVerts", _wrap_cpPolyShape_numVerts_get, _wrap_cpPolyShape_numVerts_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "verts", _wrap_cpPolyShape_verts_get, _wrap_cpPolyShape_verts_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "tVerts", _wrap_cpPolyShape_tVerts_get, _wrap_cpPolyShape_tVerts_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "planes", _wrap_cpPolyShape_planes_get, _wrap_cpPolyShape_planes_set);
    SWIGV8_AddMemberVariable(_cpPolyShape_class, "tPlanes", _wrap_cpPolyShape_tPlanes_get, _wrap_cpPolyShape_tPlanes_set);
    SWIGV8_AddMemberVariable(_cpConstraintClass_class, "preStep", _wrap_cpConstraintClass_preStep_get, _wrap_cpConstraintClass_preStep_set);
    SWIGV8_AddMemberVariable(_cpConstraintClass_class, "applyCachedImpulse", _wrap_cpConstraintClass_applyCachedImpulse_get, _wrap_cpConstraintClass_applyCachedImpulse_set);
    SWIGV8_AddMemberVariable(_cpConstraintClass_class, "applyImpulse", _wrap_cpConstraintClass_applyImpulse_get, _wrap_cpConstraintClass_applyImpulse_set);
    SWIGV8_AddMemberVariable(_cpConstraintClass_class, "getImpulse", _wrap_cpConstraintClass_getImpulse_get, _wrap_cpConstraintClass_getImpulse_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "klass_private", _wrap_cpConstraint_klass_private_get, _wrap_cpConstraint_klass_private_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "a", _wrap_cpConstraint_a_get, _wrap_cpConstraint_a_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "b", _wrap_cpConstraint_b_get, _wrap_cpConstraint_b_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "space_private", _wrap_cpConstraint_space_private_get, _wrap_cpConstraint_space_private_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "next_a_private", _wrap_cpConstraint_next_a_private_get, _wrap_cpConstraint_next_a_private_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "next_b_private", _wrap_cpConstraint_next_b_private_get, _wrap_cpConstraint_next_b_private_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "maxForce", _wrap_cpConstraint_maxForce_get, _wrap_cpConstraint_maxForce_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "errorBias", _wrap_cpConstraint_errorBias_get, _wrap_cpConstraint_errorBias_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "maxBias", _wrap_cpConstraint_maxBias_get, _wrap_cpConstraint_maxBias_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "preSolve", _wrap_cpConstraint_preSolve_get, _wrap_cpConstraint_preSolve_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "postSolve", _wrap_cpConstraint_postSolve_get, _wrap_cpConstraint_postSolve_set);
    SWIGV8_AddMemberVariable(_cpConstraint_class, "data", _wrap_cpConstraint_data_get, _wrap_cpConstraint_data_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "constraint", _wrap_cpPinJoint_constraint_get, _wrap_cpPinJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "anchr1", _wrap_cpPinJoint_anchr1_get, _wrap_cpPinJoint_anchr1_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "anchr2", _wrap_cpPinJoint_anchr2_get, _wrap_cpPinJoint_anchr2_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "dist", _wrap_cpPinJoint_dist_get, _wrap_cpPinJoint_dist_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "r1", _wrap_cpPinJoint_r1_get, _wrap_cpPinJoint_r1_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "r2", _wrap_cpPinJoint_r2_get, _wrap_cpPinJoint_r2_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "n", _wrap_cpPinJoint_n_get, _wrap_cpPinJoint_n_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "nMass", _wrap_cpPinJoint_nMass_get, _wrap_cpPinJoint_nMass_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "jnAcc", _wrap_cpPinJoint_jnAcc_get, _wrap_cpPinJoint_jnAcc_set);
    SWIGV8_AddMemberVariable(_cpPinJoint_class, "bias", _wrap_cpPinJoint_bias_get, _wrap_cpPinJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "constraint", _wrap_cpSlideJoint_constraint_get, _wrap_cpSlideJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "anchr1", _wrap_cpSlideJoint_anchr1_get, _wrap_cpSlideJoint_anchr1_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "anchr2", _wrap_cpSlideJoint_anchr2_get, _wrap_cpSlideJoint_anchr2_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "min", _wrap_cpSlideJoint_min_get, _wrap_cpSlideJoint_min_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "max", _wrap_cpSlideJoint_max_get, _wrap_cpSlideJoint_max_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "r1", _wrap_cpSlideJoint_r1_get, _wrap_cpSlideJoint_r1_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "r2", _wrap_cpSlideJoint_r2_get, _wrap_cpSlideJoint_r2_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "n", _wrap_cpSlideJoint_n_get, _wrap_cpSlideJoint_n_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "nMass", _wrap_cpSlideJoint_nMass_get, _wrap_cpSlideJoint_nMass_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "jnAcc", _wrap_cpSlideJoint_jnAcc_get, _wrap_cpSlideJoint_jnAcc_set);
    SWIGV8_AddMemberVariable(_cpSlideJoint_class, "bias", _wrap_cpSlideJoint_bias_get, _wrap_cpSlideJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "constraint", _wrap_cpPivotJoint_constraint_get, _wrap_cpPivotJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "anchr1", _wrap_cpPivotJoint_anchr1_get, _wrap_cpPivotJoint_anchr1_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "anchr2", _wrap_cpPivotJoint_anchr2_get, _wrap_cpPivotJoint_anchr2_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "r1", _wrap_cpPivotJoint_r1_get, _wrap_cpPivotJoint_r1_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "r2", _wrap_cpPivotJoint_r2_get, _wrap_cpPivotJoint_r2_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "k", _wrap_cpPivotJoint_k_get, _wrap_cpPivotJoint_k_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "jAcc", _wrap_cpPivotJoint_jAcc_get, _wrap_cpPivotJoint_jAcc_set);
    SWIGV8_AddMemberVariable(_cpPivotJoint_class, "bias", _wrap_cpPivotJoint_bias_get, _wrap_cpPivotJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "constraint", _wrap_cpGrooveJoint_constraint_get, _wrap_cpGrooveJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "grv_n", _wrap_cpGrooveJoint_grv_n_get, _wrap_cpGrooveJoint_grv_n_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "grv_a", _wrap_cpGrooveJoint_grv_a_get, _wrap_cpGrooveJoint_grv_a_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "grv_b", _wrap_cpGrooveJoint_grv_b_get, _wrap_cpGrooveJoint_grv_b_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "anchr2", _wrap_cpGrooveJoint_anchr2_get, _wrap_cpGrooveJoint_anchr2_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "grv_tn", _wrap_cpGrooveJoint_grv_tn_get, _wrap_cpGrooveJoint_grv_tn_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "clamp", _wrap_cpGrooveJoint_clamp_get, _wrap_cpGrooveJoint_clamp_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "r1", _wrap_cpGrooveJoint_r1_get, _wrap_cpGrooveJoint_r1_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "r2", _wrap_cpGrooveJoint_r2_get, _wrap_cpGrooveJoint_r2_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "k", _wrap_cpGrooveJoint_k_get, _wrap_cpGrooveJoint_k_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "jAcc", _wrap_cpGrooveJoint_jAcc_get, _wrap_cpGrooveJoint_jAcc_set);
    SWIGV8_AddMemberVariable(_cpGrooveJoint_class, "bias", _wrap_cpGrooveJoint_bias_get, _wrap_cpGrooveJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "constraint", _wrap_cpDampedSpring_constraint_get, _wrap_cpDampedSpring_constraint_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "anchr1", _wrap_cpDampedSpring_anchr1_get, _wrap_cpDampedSpring_anchr1_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "anchr2", _wrap_cpDampedSpring_anchr2_get, _wrap_cpDampedSpring_anchr2_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "restLength", _wrap_cpDampedSpring_restLength_get, _wrap_cpDampedSpring_restLength_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "stiffness", _wrap_cpDampedSpring_stiffness_get, _wrap_cpDampedSpring_stiffness_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "damping", _wrap_cpDampedSpring_damping_get, _wrap_cpDampedSpring_damping_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "springForceFunc", _wrap_cpDampedSpring_springForceFunc_get, _wrap_cpDampedSpring_springForceFunc_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "target_vrn", _wrap_cpDampedSpring_target_vrn_get, _wrap_cpDampedSpring_target_vrn_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "v_coef", _wrap_cpDampedSpring_v_coef_get, _wrap_cpDampedSpring_v_coef_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "r1", _wrap_cpDampedSpring_r1_get, _wrap_cpDampedSpring_r1_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "r2", _wrap_cpDampedSpring_r2_get, _wrap_cpDampedSpring_r2_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "nMass", _wrap_cpDampedSpring_nMass_get, _wrap_cpDampedSpring_nMass_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "n", _wrap_cpDampedSpring_n_get, _wrap_cpDampedSpring_n_set);
    SWIGV8_AddMemberVariable(_cpDampedSpring_class, "jAcc", _wrap_cpDampedSpring_jAcc_get, _wrap_cpDampedSpring_jAcc_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "constraint", _wrap_cpDampedRotarySpring_constraint_get, _wrap_cpDampedRotarySpring_constraint_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "restAngle", _wrap_cpDampedRotarySpring_restAngle_get, _wrap_cpDampedRotarySpring_restAngle_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "stiffness", _wrap_cpDampedRotarySpring_stiffness_get, _wrap_cpDampedRotarySpring_stiffness_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "damping", _wrap_cpDampedRotarySpring_damping_get, _wrap_cpDampedRotarySpring_damping_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "springTorqueFunc", _wrap_cpDampedRotarySpring_springTorqueFunc_get, _wrap_cpDampedRotarySpring_springTorqueFunc_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "target_wrn", _wrap_cpDampedRotarySpring_target_wrn_get, _wrap_cpDampedRotarySpring_target_wrn_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "w_coef", _wrap_cpDampedRotarySpring_w_coef_get, _wrap_cpDampedRotarySpring_w_coef_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "iSum", _wrap_cpDampedRotarySpring_iSum_get, _wrap_cpDampedRotarySpring_iSum_set);
    SWIGV8_AddMemberVariable(_cpDampedRotarySpring_class, "jAcc", _wrap_cpDampedRotarySpring_jAcc_get, _wrap_cpDampedRotarySpring_jAcc_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "constraint", _wrap_cpRotaryLimitJoint_constraint_get, _wrap_cpRotaryLimitJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "min", _wrap_cpRotaryLimitJoint_min_get, _wrap_cpRotaryLimitJoint_min_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "max", _wrap_cpRotaryLimitJoint_max_get, _wrap_cpRotaryLimitJoint_max_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "iSum", _wrap_cpRotaryLimitJoint_iSum_get, _wrap_cpRotaryLimitJoint_iSum_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "bias", _wrap_cpRotaryLimitJoint_bias_get, _wrap_cpRotaryLimitJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpRotaryLimitJoint_class, "jAcc", _wrap_cpRotaryLimitJoint_jAcc_get, _wrap_cpRotaryLimitJoint_jAcc_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "constraint", _wrap_cpRatchetJoint_constraint_get, _wrap_cpRatchetJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "angle", _wrap_cpRatchetJoint_angle_get, _wrap_cpRatchetJoint_angle_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "phase", _wrap_cpRatchetJoint_phase_get, _wrap_cpRatchetJoint_phase_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "ratchet", _wrap_cpRatchetJoint_ratchet_get, _wrap_cpRatchetJoint_ratchet_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "iSum", _wrap_cpRatchetJoint_iSum_get, _wrap_cpRatchetJoint_iSum_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "bias", _wrap_cpRatchetJoint_bias_get, _wrap_cpRatchetJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpRatchetJoint_class, "jAcc", _wrap_cpRatchetJoint_jAcc_get, _wrap_cpRatchetJoint_jAcc_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "constraint", _wrap_cpGearJoint_constraint_get, _wrap_cpGearJoint_constraint_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "phase", _wrap_cpGearJoint_phase_get, _wrap_cpGearJoint_phase_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "ratio", _wrap_cpGearJoint_ratio_get, _wrap_cpGearJoint_ratio_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "ratio_inv", _wrap_cpGearJoint_ratio_inv_get, _wrap_cpGearJoint_ratio_inv_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "iSum", _wrap_cpGearJoint_iSum_get, _wrap_cpGearJoint_iSum_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "bias", _wrap_cpGearJoint_bias_get, _wrap_cpGearJoint_bias_set);
    SWIGV8_AddMemberVariable(_cpGearJoint_class, "jAcc", _wrap_cpGearJoint_jAcc_get, _wrap_cpGearJoint_jAcc_set);
    SWIGV8_AddMemberVariable(_cpSimpleMotor_class, "constraint", _wrap_cpSimpleMotor_constraint_get, _wrap_cpSimpleMotor_constraint_set);
    SWIGV8_AddMemberVariable(_cpSimpleMotor_class, "rate", _wrap_cpSimpleMotor_rate_get, _wrap_cpSimpleMotor_rate_set);
    SWIGV8_AddMemberVariable(_cpSimpleMotor_class, "iSum", _wrap_cpSimpleMotor_iSum_get, _wrap_cpSimpleMotor_iSum_set);
    SWIGV8_AddMemberVariable(_cpSimpleMotor_class, "jAcc", _wrap_cpSimpleMotor_jAcc_get, _wrap_cpSimpleMotor_jAcc_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "iterations", _wrap_cpSpace_iterations_get, _wrap_cpSpace_iterations_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "gravity", _wrap_cpSpace_gravity_get, _wrap_cpSpace_gravity_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "damping", _wrap_cpSpace_damping_get, _wrap_cpSpace_damping_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "idleSpeedThreshold", _wrap_cpSpace_idleSpeedThreshold_get, _wrap_cpSpace_idleSpeedThreshold_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "sleepTimeThreshold", _wrap_cpSpace_sleepTimeThreshold_get, _wrap_cpSpace_sleepTimeThreshold_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "collisionSlop", _wrap_cpSpace_collisionSlop_get, _wrap_cpSpace_collisionSlop_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "collisionBias", _wrap_cpSpace_collisionBias_get, _wrap_cpSpace_collisionBias_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "collisionPersistence", _wrap_cpSpace_collisionPersistence_get, _wrap_cpSpace_collisionPersistence_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "enableContactGraph", _wrap_cpSpace_enableContactGraph_get, _wrap_cpSpace_enableContactGraph_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "data", _wrap_cpSpace_data_get, _wrap_cpSpace_data_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "staticBody", _wrap_cpSpace_staticBody_get, _wrap_cpSpace_staticBody_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "stamp_private", _wrap_cpSpace_stamp_private_get, _wrap_cpSpace_stamp_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "curr_dt_private", _wrap_cpSpace_curr_dt_private_get, _wrap_cpSpace_curr_dt_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "bodies_private", _wrap_cpSpace_bodies_private_get, _wrap_cpSpace_bodies_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "rousedBodies_private", _wrap_cpSpace_rousedBodies_private_get, _wrap_cpSpace_rousedBodies_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "sleepingComponents_private", _wrap_cpSpace_sleepingComponents_private_get, _wrap_cpSpace_sleepingComponents_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "staticShapes_private", _wrap_cpSpace_staticShapes_private_get, _wrap_cpSpace_staticShapes_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "activeShapes_private", _wrap_cpSpace_activeShapes_private_get, _wrap_cpSpace_activeShapes_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "arbiters_private", _wrap_cpSpace_arbiters_private_get, _wrap_cpSpace_arbiters_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "contactBuffersHead_private", _wrap_cpSpace_contactBuffersHead_private_get, _wrap_cpSpace_contactBuffersHead_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "cachedArbiters_private", _wrap_cpSpace_cachedArbiters_private_get, _wrap_cpSpace_cachedArbiters_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "pooledArbiters_private", _wrap_cpSpace_pooledArbiters_private_get, _wrap_cpSpace_pooledArbiters_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "constraints_private", _wrap_cpSpace_constraints_private_get, _wrap_cpSpace_constraints_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "allocatedBuffers_private", _wrap_cpSpace_allocatedBuffers_private_get, _wrap_cpSpace_allocatedBuffers_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "locked_private", _wrap_cpSpace_locked_private_get, _wrap_cpSpace_locked_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "collisionHandlers_private", _wrap_cpSpace_collisionHandlers_private_get, _wrap_cpSpace_collisionHandlers_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "defaultHandler_private", _wrap_cpSpace_defaultHandler_private_get, _wrap_cpSpace_defaultHandler_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "skipPostStep_private", _wrap_cpSpace_skipPostStep_private_get, _wrap_cpSpace_skipPostStep_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "postStepCallbacks_private", _wrap_cpSpace_postStepCallbacks_private_get, _wrap_cpSpace_postStepCallbacks_private_set);
    SWIGV8_AddMemberVariable(_cpSpace_class, "_staticBody_private", _wrap_cpSpace__staticBody_private_get, _wrap_cpSpace__staticBody_private_set);
    SWIGV8_AddStaticVariable(example_obj, "CP_VERSION_MAJOR", _wrap_CP_VERSION_MAJOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_VERSION_MINOR", _wrap_CP_VERSION_MINOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "CP_VERSION_RELEASE", _wrap_CP_VERSION_RELEASE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(example_obj, "cpVersionString", _wrap_cpVersionString_get, _wrap_cpVersionString_set);
    
    
    /* setup inheritances */
    
    
    /* class instances */
    v8::Handle<v8::FunctionTemplate> _MyStruct_class_0 = SWIGV8_CreateClassTemplate("MyStruct");
    _MyStruct_class_0->SetCallHandler(_wrap_new_MyStruct);
    _MyStruct_class_0->Inherit(_MyStruct_class);
    _MyStruct_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _MyStruct_obj = _MyStruct_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _MyData_class_0 = SWIGV8_CreateClassTemplate("MyData");
    _MyData_class_0->SetCallHandler(_wrap_new_veto_MyData);
    _MyData_class_0->Inherit(_MyData_class);
    _MyData_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _MyData_obj = _MyData_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpVect_class_0 = SWIGV8_CreateClassTemplate("cpVect");
    _cpVect_class_0->SetCallHandler(_wrap_new_cpVect);
    _cpVect_class_0->Inherit(_cpVect_class);
    _cpVect_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpVect_obj = _cpVect_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpMat2x2_class_0 = SWIGV8_CreateClassTemplate("cpMat2x2");
    _cpMat2x2_class_0->SetCallHandler(_wrap_new_cpMat2x2);
    _cpMat2x2_class_0->Inherit(_cpMat2x2_class);
    _cpMat2x2_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpMat2x2_obj = _cpMat2x2_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpBB_class_0 = SWIGV8_CreateClassTemplate("cpBB");
    _cpBB_class_0->SetCallHandler(_wrap_new_cpBB);
    _cpBB_class_0->Inherit(_cpBB_class);
    _cpBB_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpBB_obj = _cpBB_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSpatialIndex_class_0 = SWIGV8_CreateClassTemplate("cpSpatialIndex");
    _cpSpatialIndex_class_0->SetCallHandler(_wrap_new_veto_cpSpatialIndex);
    _cpSpatialIndex_class_0->Inherit(_cpSpatialIndex_class);
    _cpSpatialIndex_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSpatialIndex_obj = _cpSpatialIndex_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSpatialIndexClass_class_0 = SWIGV8_CreateClassTemplate("cpSpatialIndexClass");
    _cpSpatialIndexClass_class_0->SetCallHandler(_wrap_new_cpSpatialIndexClass);
    _cpSpatialIndexClass_class_0->Inherit(_cpSpatialIndexClass_class);
    _cpSpatialIndexClass_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSpatialIndexClass_obj = _cpSpatialIndexClass_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpComponentNode_class_0 = SWIGV8_CreateClassTemplate("cpComponentNode");
    _cpComponentNode_class_0->SetCallHandler(_wrap_new_cpComponentNode);
    _cpComponentNode_class_0->Inherit(_cpComponentNode_class);
    _cpComponentNode_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpComponentNode_obj = _cpComponentNode_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpBody_class_0 = SWIGV8_CreateClassTemplate("cpBody");
    _cpBody_class_0->SetCallHandler(_wrap_new_veto_cpBody);
    _cpBody_class_0->Inherit(_cpBody_class);
    _cpBody_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpBody_obj = _cpBody_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpNearestPointQueryInfo_class_0 = SWIGV8_CreateClassTemplate("cpNearestPointQueryInfo");
    _cpNearestPointQueryInfo_class_0->SetCallHandler(_wrap_new_cpNearestPointQueryInfo);
    _cpNearestPointQueryInfo_class_0->Inherit(_cpNearestPointQueryInfo_class);
    _cpNearestPointQueryInfo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpNearestPointQueryInfo_obj = _cpNearestPointQueryInfo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSegmentQueryInfo_class_0 = SWIGV8_CreateClassTemplate("cpSegmentQueryInfo");
    _cpSegmentQueryInfo_class_0->SetCallHandler(_wrap_new_cpSegmentQueryInfo);
    _cpSegmentQueryInfo_class_0->Inherit(_cpSegmentQueryInfo_class);
    _cpSegmentQueryInfo_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSegmentQueryInfo_obj = _cpSegmentQueryInfo_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpShapeClass_class_0 = SWIGV8_CreateClassTemplate("cpShapeClass");
    _cpShapeClass_class_0->SetCallHandler(_wrap_new_cpShapeClass);
    _cpShapeClass_class_0->Inherit(_cpShapeClass_class);
    _cpShapeClass_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpShapeClass_obj = _cpShapeClass_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpShape_class_0 = SWIGV8_CreateClassTemplate("cpShape");
    _cpShape_class_0->SetCallHandler(_wrap_new_veto_cpShape);
    _cpShape_class_0->Inherit(_cpShape_class);
    _cpShape_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpShape_obj = _cpShape_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpCircleShape_class_0 = SWIGV8_CreateClassTemplate("cpCircleShape");
    _cpCircleShape_class_0->SetCallHandler(_wrap_new_veto_cpCircleShape);
    _cpCircleShape_class_0->Inherit(_cpCircleShape_class);
    _cpCircleShape_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpCircleShape_obj = _cpCircleShape_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSegmentShape_class_0 = SWIGV8_CreateClassTemplate("cpSegmentShape");
    _cpSegmentShape_class_0->SetCallHandler(_wrap_new_veto_cpSegmentShape);
    _cpSegmentShape_class_0->Inherit(_cpSegmentShape_class);
    _cpSegmentShape_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSegmentShape_obj = _cpSegmentShape_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSplittingPlane_class_0 = SWIGV8_CreateClassTemplate("cpSplittingPlane");
    _cpSplittingPlane_class_0->SetCallHandler(_wrap_new_cpSplittingPlane);
    _cpSplittingPlane_class_0->Inherit(_cpSplittingPlane_class);
    _cpSplittingPlane_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSplittingPlane_obj = _cpSplittingPlane_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpPolyShape_class_0 = SWIGV8_CreateClassTemplate("cpPolyShape");
    _cpPolyShape_class_0->SetCallHandler(_wrap_new_veto_cpPolyShape);
    _cpPolyShape_class_0->Inherit(_cpPolyShape_class);
    _cpPolyShape_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpPolyShape_obj = _cpPolyShape_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpConstraintClass_class_0 = SWIGV8_CreateClassTemplate("cpConstraintClass");
    _cpConstraintClass_class_0->SetCallHandler(_wrap_new_cpConstraintClass);
    _cpConstraintClass_class_0->Inherit(_cpConstraintClass_class);
    _cpConstraintClass_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpConstraintClass_obj = _cpConstraintClass_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpConstraint_class_0 = SWIGV8_CreateClassTemplate("cpConstraint");
    _cpConstraint_class_0->SetCallHandler(_wrap_new_veto_cpConstraint);
    _cpConstraint_class_0->Inherit(_cpConstraint_class);
    _cpConstraint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpConstraint_obj = _cpConstraint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpPinJoint_class_0 = SWIGV8_CreateClassTemplate("cpPinJoint");
    _cpPinJoint_class_0->SetCallHandler(_wrap_new_veto_cpPinJoint);
    _cpPinJoint_class_0->Inherit(_cpPinJoint_class);
    _cpPinJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpPinJoint_obj = _cpPinJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSlideJoint_class_0 = SWIGV8_CreateClassTemplate("cpSlideJoint");
    _cpSlideJoint_class_0->SetCallHandler(_wrap_new_veto_cpSlideJoint);
    _cpSlideJoint_class_0->Inherit(_cpSlideJoint_class);
    _cpSlideJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSlideJoint_obj = _cpSlideJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpPivotJoint_class_0 = SWIGV8_CreateClassTemplate("cpPivotJoint");
    _cpPivotJoint_class_0->SetCallHandler(_wrap_new_veto_cpPivotJoint);
    _cpPivotJoint_class_0->Inherit(_cpPivotJoint_class);
    _cpPivotJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpPivotJoint_obj = _cpPivotJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpGrooveJoint_class_0 = SWIGV8_CreateClassTemplate("cpGrooveJoint");
    _cpGrooveJoint_class_0->SetCallHandler(_wrap_new_veto_cpGrooveJoint);
    _cpGrooveJoint_class_0->Inherit(_cpGrooveJoint_class);
    _cpGrooveJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpGrooveJoint_obj = _cpGrooveJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpDampedSpring_class_0 = SWIGV8_CreateClassTemplate("cpDampedSpring");
    _cpDampedSpring_class_0->SetCallHandler(_wrap_new_veto_cpDampedSpring);
    _cpDampedSpring_class_0->Inherit(_cpDampedSpring_class);
    _cpDampedSpring_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpDampedSpring_obj = _cpDampedSpring_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpDampedRotarySpring_class_0 = SWIGV8_CreateClassTemplate("cpDampedRotarySpring");
    _cpDampedRotarySpring_class_0->SetCallHandler(_wrap_new_veto_cpDampedRotarySpring);
    _cpDampedRotarySpring_class_0->Inherit(_cpDampedRotarySpring_class);
    _cpDampedRotarySpring_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpDampedRotarySpring_obj = _cpDampedRotarySpring_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpRotaryLimitJoint_class_0 = SWIGV8_CreateClassTemplate("cpRotaryLimitJoint");
    _cpRotaryLimitJoint_class_0->SetCallHandler(_wrap_new_veto_cpRotaryLimitJoint);
    _cpRotaryLimitJoint_class_0->Inherit(_cpRotaryLimitJoint_class);
    _cpRotaryLimitJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpRotaryLimitJoint_obj = _cpRotaryLimitJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpRatchetJoint_class_0 = SWIGV8_CreateClassTemplate("cpRatchetJoint");
    _cpRatchetJoint_class_0->SetCallHandler(_wrap_new_cpRatchetJoint);
    _cpRatchetJoint_class_0->Inherit(_cpRatchetJoint_class);
    _cpRatchetJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpRatchetJoint_obj = _cpRatchetJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpGearJoint_class_0 = SWIGV8_CreateClassTemplate("cpGearJoint");
    _cpGearJoint_class_0->SetCallHandler(_wrap_new_veto_cpGearJoint);
    _cpGearJoint_class_0->Inherit(_cpGearJoint_class);
    _cpGearJoint_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpGearJoint_obj = _cpGearJoint_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSimpleMotor_class_0 = SWIGV8_CreateClassTemplate("cpSimpleMotor");
    _cpSimpleMotor_class_0->SetCallHandler(_wrap_new_veto_cpSimpleMotor);
    _cpSimpleMotor_class_0->Inherit(_cpSimpleMotor_class);
    _cpSimpleMotor_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSimpleMotor_obj = _cpSimpleMotor_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _cpSpace_class_0 = SWIGV8_CreateClassTemplate("cpSpace");
    _cpSpace_class_0->SetCallHandler(_wrap_new_veto_cpSpace);
    _cpSpace_class_0->Inherit(_cpSpace_class);
    _cpSpace_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _cpSpace_obj = _cpSpace_class_0->GetFunction();
    
    
    /* add static class functions and variables */
    SWIGV8_AddStaticFunction(example_obj, "fact", _wrap_fact);
    SWIGV8_AddStaticFunction(example_obj, "my_mod", _wrap_my_mod);
    SWIGV8_AddStaticFunction(example_obj, "get_time", _wrap_get_time);
    SWIGV8_AddStaticFunction(example_obj, "MyStructMake", _wrap_MyStructMake);
    SWIGV8_AddStaticFunction(example_obj, "AddStructs", _wrap_AddStructs);
    SWIGV8_AddStaticFunction(example_obj, "CreateData", _wrap_CreateData);
    SWIGV8_AddStaticFunction(example_obj, "FreeData", _wrap_FreeData);
    SWIGV8_AddStaticFunction(example_obj, "emptyCall", _wrap_emptyCall);
    SWIGV8_AddStaticFunction(example_obj, "returnDouble", _wrap_returnDouble);
    SWIGV8_AddStaticFunction(example_obj, "returnString", _wrap_returnString);
    SWIGV8_AddStaticFunction(example_obj, "passDouble", _wrap_passDouble);
    SWIGV8_AddStaticFunction(example_obj, "passString", _wrap_passString);
    SWIGV8_AddStaticFunction(example_obj, "passAndReturnDouble", _wrap_passAndReturnDouble);
    SWIGV8_AddStaticFunction(example_obj, "passAndReturnString", _wrap_passAndReturnString);
    SWIGV8_AddStaticFunction(example_obj, "pass2Double", _wrap_pass2Double);
    SWIGV8_AddStaticFunction(example_obj, "pass2String", _wrap_pass2String);
    SWIGV8_AddStaticFunction(example_obj, "measure_c_function", _wrap_measure_c_function);
    SWIGV8_AddStaticFunction(example_obj, "cpMessage", _wrap_cpMessage);
    SWIGV8_AddStaticFunction(example_obj, "cpfmax", _wrap_cpfmax);
    SWIGV8_AddStaticFunction(example_obj, "cpfmin", _wrap_cpfmin);
    SWIGV8_AddStaticFunction(example_obj, "cpfabs", _wrap_cpfabs);
    SWIGV8_AddStaticFunction(example_obj, "cpfclamp", _wrap_cpfclamp);
    SWIGV8_AddStaticFunction(example_obj, "cpfclamp01", _wrap_cpfclamp01);
    SWIGV8_AddStaticFunction(example_obj, "cpflerp", _wrap_cpflerp);
    SWIGV8_AddStaticFunction(example_obj, "cpflerpconst", _wrap_cpflerpconst);
    SWIGV8_AddStaticFunction(example_obj, "cpv", _wrap_cpv);
    SWIGV8_AddStaticFunction(example_obj, "cpvslerp", _wrap_cpvslerp);
    SWIGV8_AddStaticFunction(example_obj, "cpvslerpconst", _wrap_cpvslerpconst);
    SWIGV8_AddStaticFunction(example_obj, "cpvstr", _wrap_cpvstr);
    SWIGV8_AddStaticFunction(example_obj, "cpveql", _wrap_cpveql);
    SWIGV8_AddStaticFunction(example_obj, "cpvadd", _wrap_cpvadd);
    SWIGV8_AddStaticFunction(example_obj, "cpvsub", _wrap_cpvsub);
    SWIGV8_AddStaticFunction(example_obj, "cpvneg", _wrap_cpvneg);
    SWIGV8_AddStaticFunction(example_obj, "cpvmult", _wrap_cpvmult);
    SWIGV8_AddStaticFunction(example_obj, "cpvdot", _wrap_cpvdot);
    SWIGV8_AddStaticFunction(example_obj, "cpvcross", _wrap_cpvcross);
    SWIGV8_AddStaticFunction(example_obj, "cpvperp", _wrap_cpvperp);
    SWIGV8_AddStaticFunction(example_obj, "cpvrperp", _wrap_cpvrperp);
    SWIGV8_AddStaticFunction(example_obj, "cpvproject", _wrap_cpvproject);
    SWIGV8_AddStaticFunction(example_obj, "cpvforangle", _wrap_cpvforangle);
    SWIGV8_AddStaticFunction(example_obj, "cpvtoangle", _wrap_cpvtoangle);
    SWIGV8_AddStaticFunction(example_obj, "cpvrotate", _wrap_cpvrotate);
    SWIGV8_AddStaticFunction(example_obj, "cpvunrotate", _wrap_cpvunrotate);
    SWIGV8_AddStaticFunction(example_obj, "cpvlengthsq", _wrap_cpvlengthsq);
    SWIGV8_AddStaticFunction(example_obj, "cpvlength", _wrap_cpvlength);
    SWIGV8_AddStaticFunction(example_obj, "cpvlerp", _wrap_cpvlerp);
    SWIGV8_AddStaticFunction(example_obj, "cpvnormalize", _wrap_cpvnormalize);
    SWIGV8_AddStaticFunction(example_obj, "cpvnormalize_safe", _wrap_cpvnormalize_safe);
    SWIGV8_AddStaticFunction(example_obj, "cpvclamp", _wrap_cpvclamp);
    SWIGV8_AddStaticFunction(example_obj, "cpvlerpconst", _wrap_cpvlerpconst);
    SWIGV8_AddStaticFunction(example_obj, "cpvdist", _wrap_cpvdist);
    SWIGV8_AddStaticFunction(example_obj, "cpvdistsq", _wrap_cpvdistsq);
    SWIGV8_AddStaticFunction(example_obj, "cpvnear", _wrap_cpvnear);
    SWIGV8_AddStaticFunction(example_obj, "cpMat2x2New", _wrap_cpMat2x2New);
    SWIGV8_AddStaticFunction(example_obj, "cpMat2x2Transform", _wrap_cpMat2x2Transform);
    SWIGV8_AddStaticFunction(example_obj, "cpBBNew", _wrap_cpBBNew);
    SWIGV8_AddStaticFunction(example_obj, "cpBBNewForCircle", _wrap_cpBBNewForCircle);
    SWIGV8_AddStaticFunction(example_obj, "cpBBIntersects", _wrap_cpBBIntersects);
    SWIGV8_AddStaticFunction(example_obj, "cpBBContainsBB", _wrap_cpBBContainsBB);
    SWIGV8_AddStaticFunction(example_obj, "cpBBContainsVect", _wrap_cpBBContainsVect);
    SWIGV8_AddStaticFunction(example_obj, "cpBBMerge", _wrap_cpBBMerge);
    SWIGV8_AddStaticFunction(example_obj, "cpBBExpand", _wrap_cpBBExpand);
    SWIGV8_AddStaticFunction(example_obj, "cpBBArea", _wrap_cpBBArea);
    SWIGV8_AddStaticFunction(example_obj, "cpBBMergedArea", _wrap_cpBBMergedArea);
    SWIGV8_AddStaticFunction(example_obj, "cpBBSegmentQuery", _wrap_cpBBSegmentQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpBBIntersectsSegment", _wrap_cpBBIntersectsSegment);
    SWIGV8_AddStaticFunction(example_obj, "cpBBClampVect", _wrap_cpBBClampVect);
    SWIGV8_AddStaticFunction(example_obj, "cpBBWrapVect", _wrap_cpBBWrapVect);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceHashAlloc", _wrap_cpSpaceHashAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceHashInit", _wrap_cpSpaceHashInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceHashNew", _wrap_cpSpaceHashNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceHashResize", _wrap_cpSpaceHashResize);
    SWIGV8_AddStaticFunction(example_obj, "cpBBTreeAlloc", _wrap_cpBBTreeAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpBBTreeInit", _wrap_cpBBTreeInit);
    SWIGV8_AddStaticFunction(example_obj, "cpBBTreeNew", _wrap_cpBBTreeNew);
    SWIGV8_AddStaticFunction(example_obj, "cpBBTreeOptimize", _wrap_cpBBTreeOptimize);
    SWIGV8_AddStaticFunction(example_obj, "cpBBTreeSetVelocityFunc", _wrap_cpBBTreeSetVelocityFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpSweep1DAlloc", _wrap_cpSweep1DAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSweep1DInit", _wrap_cpSweep1DInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSweep1DNew", _wrap_cpSweep1DNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexFree", _wrap_cpSpatialIndexFree);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexCollideStatic", _wrap_cpSpatialIndexCollideStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexDestroy", _wrap_cpSpatialIndexDestroy);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexCount", _wrap_cpSpatialIndexCount);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexEach", _wrap_cpSpatialIndexEach);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexContains", _wrap_cpSpatialIndexContains);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexInsert", _wrap_cpSpatialIndexInsert);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexRemove", _wrap_cpSpatialIndexRemove);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexReindex", _wrap_cpSpatialIndexReindex);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexReindexObject", _wrap_cpSpatialIndexReindexObject);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexQuery", _wrap_cpSpatialIndexQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexSegmentQuery", _wrap_cpSpatialIndexSegmentQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpatialIndexReindexQuery", _wrap_cpSpatialIndexReindexQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyAlloc", _wrap_cpBodyAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyInit", _wrap_cpBodyInit);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyNew", _wrap_cpBodyNew);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyInitStatic", _wrap_cpBodyInitStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyNewStatic", _wrap_cpBodyNewStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyDestroy", _wrap_cpBodyDestroy);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyFree", _wrap_cpBodyFree);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyActivate", _wrap_cpBodyActivate);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyActivateStatic", _wrap_cpBodyActivateStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySleep", _wrap_cpBodySleep);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySleepWithGroup", _wrap_cpBodySleepWithGroup);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyIsSleeping", _wrap_cpBodyIsSleeping);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyIsStatic", _wrap_cpBodyIsStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyIsRogue", _wrap_cpBodyIsRogue);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetSpace", _wrap_cpBodyGetSpace);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetMass", _wrap_cpBodyGetMass);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetMass", _wrap_cpBodySetMass);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetMoment", _wrap_cpBodyGetMoment);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetMoment", _wrap_cpBodySetMoment);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetPos", _wrap_cpBodyGetPos);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetPos", _wrap_cpBodySetPos);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetVel", _wrap_cpBodyGetVel);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetVel", _wrap_cpBodySetVel);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetForce", _wrap_cpBodyGetForce);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetForce", _wrap_cpBodySetForce);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetAngle", _wrap_cpBodyGetAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetAngle", _wrap_cpBodySetAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetAngVel", _wrap_cpBodyGetAngVel);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetAngVel", _wrap_cpBodySetAngVel);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetTorque", _wrap_cpBodyGetTorque);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetTorque", _wrap_cpBodySetTorque);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetRot", _wrap_cpBodyGetRot);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetVelLimit", _wrap_cpBodyGetVelLimit);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetVelLimit", _wrap_cpBodySetVelLimit);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetAngVelLimit", _wrap_cpBodyGetAngVelLimit);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetAngVelLimit", _wrap_cpBodySetAngVelLimit);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetUserData", _wrap_cpBodyGetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpBodySetUserData", _wrap_cpBodySetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyUpdateVelocity", _wrap_cpBodyUpdateVelocity);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyUpdatePosition", _wrap_cpBodyUpdatePosition);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyLocal2World", _wrap_cpBodyLocal2World);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyWorld2Local", _wrap_cpBodyWorld2Local);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyResetForces", _wrap_cpBodyResetForces);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyApplyForce", _wrap_cpBodyApplyForce);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyApplyImpulse", _wrap_cpBodyApplyImpulse);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetVelAtWorldPoint", _wrap_cpBodyGetVelAtWorldPoint);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyGetVelAtLocalPoint", _wrap_cpBodyGetVelAtLocalPoint);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyKineticEnergy", _wrap_cpBodyKineticEnergy);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyEachShape", _wrap_cpBodyEachShape);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyEachConstraint", _wrap_cpBodyEachConstraint);
    SWIGV8_AddStaticFunction(example_obj, "cpBodyEachArbiter", _wrap_cpBodyEachArbiter);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeDestroy", _wrap_cpShapeDestroy);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeFree", _wrap_cpShapeFree);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeCacheBB", _wrap_cpShapeCacheBB);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeUpdate", _wrap_cpShapeUpdate);
    SWIGV8_AddStaticFunction(example_obj, "cpShapePointQuery", _wrap_cpShapePointQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSegmentQuery", _wrap_cpShapeSegmentQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentQueryHitPoint", _wrap_cpSegmentQueryHitPoint);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentQueryHitDist", _wrap_cpSegmentQueryHitDist);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetSpace", _wrap_cpShapeGetSpace);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetBody", _wrap_cpShapeGetBody);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetBody", _wrap_cpShapeSetBody);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetBB", _wrap_cpShapeGetBB);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetSensor", _wrap_cpShapeGetSensor);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetSensor", _wrap_cpShapeSetSensor);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetElasticity", _wrap_cpShapeGetElasticity);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetElasticity", _wrap_cpShapeSetElasticity);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetFriction", _wrap_cpShapeGetFriction);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetFriction", _wrap_cpShapeSetFriction);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetSurfaceVelocity", _wrap_cpShapeGetSurfaceVelocity);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetSurfaceVelocity", _wrap_cpShapeSetSurfaceVelocity);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetUserData", _wrap_cpShapeGetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetUserData", _wrap_cpShapeSetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetCollisionType", _wrap_cpShapeGetCollisionType);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetCollisionType", _wrap_cpShapeSetCollisionType);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetGroup", _wrap_cpShapeGetGroup);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetGroup", _wrap_cpShapeSetGroup);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeGetLayers", _wrap_cpShapeGetLayers);
    SWIGV8_AddStaticFunction(example_obj, "cpShapeSetLayers", _wrap_cpShapeSetLayers);
    SWIGV8_AddStaticFunction(example_obj, "cpResetShapeIdCounter", _wrap_cpResetShapeIdCounter);
    SWIGV8_AddStaticFunction(example_obj, "cpCircleShapeAlloc", _wrap_cpCircleShapeAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpCircleShapeInit", _wrap_cpCircleShapeInit);
    SWIGV8_AddStaticFunction(example_obj, "cpCircleShapeNew", _wrap_cpCircleShapeNew);
    SWIGV8_AddStaticFunction(example_obj, "cpCircleShapeGetOffset", _wrap_cpCircleShapeGetOffset);
    SWIGV8_AddStaticFunction(example_obj, "cpCircleShapeGetRadius", _wrap_cpCircleShapeGetRadius);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeAlloc", _wrap_cpSegmentShapeAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeInit", _wrap_cpSegmentShapeInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeNew", _wrap_cpSegmentShapeNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeSetNeighbors", _wrap_cpSegmentShapeSetNeighbors);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeGetA", _wrap_cpSegmentShapeGetA);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeGetB", _wrap_cpSegmentShapeGetB);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeGetNormal", _wrap_cpSegmentShapeGetNormal);
    SWIGV8_AddStaticFunction(example_obj, "cpSegmentShapeGetRadius", _wrap_cpSegmentShapeGetRadius);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyShapeAlloc", _wrap_cpPolyShapeAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyShapeInit", _wrap_cpPolyShapeInit);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyShapeNew", _wrap_cpPolyShapeNew);
    SWIGV8_AddStaticFunction(example_obj, "cpBoxShapeInit", _wrap_cpBoxShapeInit);
    SWIGV8_AddStaticFunction(example_obj, "cpBoxShapeInit2", _wrap_cpBoxShapeInit2);
    SWIGV8_AddStaticFunction(example_obj, "cpBoxShapeNew", _wrap_cpBoxShapeNew);
    SWIGV8_AddStaticFunction(example_obj, "cpBoxShapeNew2", _wrap_cpBoxShapeNew2);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyValidate", _wrap_cpPolyValidate);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyShapeGetNumVerts", _wrap_cpPolyShapeGetNumVerts);
    SWIGV8_AddStaticFunction(example_obj, "cpPolyShapeGetVert", _wrap_cpPolyShapeGetVert);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintDestroy", _wrap_cpConstraintDestroy);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintFree", _wrap_cpConstraintFree);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintActivateBodies", _wrap_cpConstraintActivateBodies);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetSpace", _wrap_cpConstraintGetSpace);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetA", _wrap_cpConstraintGetA);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetB", _wrap_cpConstraintGetB);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetMaxForce", _wrap_cpConstraintGetMaxForce);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetMaxForce", _wrap_cpConstraintSetMaxForce);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetErrorBias", _wrap_cpConstraintGetErrorBias);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetErrorBias", _wrap_cpConstraintSetErrorBias);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetMaxBias", _wrap_cpConstraintGetMaxBias);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetMaxBias", _wrap_cpConstraintSetMaxBias);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetPreSolveFunc", _wrap_cpConstraintGetPreSolveFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetPreSolveFunc", _wrap_cpConstraintSetPreSolveFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetPostSolveFunc", _wrap_cpConstraintGetPostSolveFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetPostSolveFunc", _wrap_cpConstraintSetPostSolveFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetUserData", _wrap_cpConstraintGetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintSetUserData", _wrap_cpConstraintSetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpConstraintGetImpulse", _wrap_cpConstraintGetImpulse);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointGetClass", _wrap_cpPinJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointAlloc", _wrap_cpPinJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointInit", _wrap_cpPinJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointNew", _wrap_cpPinJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointGetAnchr1", _wrap_cpPinJointGetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointSetAnchr1", _wrap_cpPinJointSetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointGetAnchr2", _wrap_cpPinJointGetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointSetAnchr2", _wrap_cpPinJointSetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointGetDist", _wrap_cpPinJointGetDist);
    SWIGV8_AddStaticFunction(example_obj, "cpPinJointSetDist", _wrap_cpPinJointSetDist);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointGetClass", _wrap_cpSlideJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointAlloc", _wrap_cpSlideJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointInit", _wrap_cpSlideJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointNew", _wrap_cpSlideJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointGetAnchr1", _wrap_cpSlideJointGetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointSetAnchr1", _wrap_cpSlideJointSetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointGetAnchr2", _wrap_cpSlideJointGetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointSetAnchr2", _wrap_cpSlideJointSetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointGetMin", _wrap_cpSlideJointGetMin);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointSetMin", _wrap_cpSlideJointSetMin);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointGetMax", _wrap_cpSlideJointGetMax);
    SWIGV8_AddStaticFunction(example_obj, "cpSlideJointSetMax", _wrap_cpSlideJointSetMax);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointGetClass", _wrap_cpPivotJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointAlloc", _wrap_cpPivotJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointInit", _wrap_cpPivotJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointNew", _wrap_cpPivotJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointNew2", _wrap_cpPivotJointNew2);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointGetAnchr1", _wrap_cpPivotJointGetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointSetAnchr1", _wrap_cpPivotJointSetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointGetAnchr2", _wrap_cpPivotJointGetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpPivotJointSetAnchr2", _wrap_cpPivotJointSetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointGetClass", _wrap_cpGrooveJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointAlloc", _wrap_cpGrooveJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointInit", _wrap_cpGrooveJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointNew", _wrap_cpGrooveJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointGetGrooveA", _wrap_cpGrooveJointGetGrooveA);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointSetGrooveA", _wrap_cpGrooveJointSetGrooveA);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointGetGrooveB", _wrap_cpGrooveJointGetGrooveB);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointSetGrooveB", _wrap_cpGrooveJointSetGrooveB);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointGetAnchr2", _wrap_cpGrooveJointGetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpGrooveJointSetAnchr2", _wrap_cpGrooveJointSetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetClass", _wrap_cpDampedSpringGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringAlloc", _wrap_cpDampedSpringAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringInit", _wrap_cpDampedSpringInit);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringNew", _wrap_cpDampedSpringNew);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetAnchr1", _wrap_cpDampedSpringGetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetAnchr1", _wrap_cpDampedSpringSetAnchr1);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetAnchr2", _wrap_cpDampedSpringGetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetAnchr2", _wrap_cpDampedSpringSetAnchr2);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetRestLength", _wrap_cpDampedSpringGetRestLength);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetRestLength", _wrap_cpDampedSpringSetRestLength);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetStiffness", _wrap_cpDampedSpringGetStiffness);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetStiffness", _wrap_cpDampedSpringSetStiffness);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetDamping", _wrap_cpDampedSpringGetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetDamping", _wrap_cpDampedSpringSetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringGetSpringForceFunc", _wrap_cpDampedSpringGetSpringForceFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedSpringSetSpringForceFunc", _wrap_cpDampedSpringSetSpringForceFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringGetClass", _wrap_cpDampedRotarySpringGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringAlloc", _wrap_cpDampedRotarySpringAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringInit", _wrap_cpDampedRotarySpringInit);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringNew", _wrap_cpDampedRotarySpringNew);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringGetRestAngle", _wrap_cpDampedRotarySpringGetRestAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringSetRestAngle", _wrap_cpDampedRotarySpringSetRestAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringGetStiffness", _wrap_cpDampedRotarySpringGetStiffness);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringSetStiffness", _wrap_cpDampedRotarySpringSetStiffness);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringGetDamping", _wrap_cpDampedRotarySpringGetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringSetDamping", _wrap_cpDampedRotarySpringSetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringGetSpringTorqueFunc", _wrap_cpDampedRotarySpringGetSpringTorqueFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpDampedRotarySpringSetSpringTorqueFunc", _wrap_cpDampedRotarySpringSetSpringTorqueFunc);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointGetClass", _wrap_cpRotaryLimitJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointAlloc", _wrap_cpRotaryLimitJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointInit", _wrap_cpRotaryLimitJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointNew", _wrap_cpRotaryLimitJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointGetMin", _wrap_cpRotaryLimitJointGetMin);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointSetMin", _wrap_cpRotaryLimitJointSetMin);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointGetMax", _wrap_cpRotaryLimitJointGetMax);
    SWIGV8_AddStaticFunction(example_obj, "cpRotaryLimitJointSetMax", _wrap_cpRotaryLimitJointSetMax);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointGetClass", _wrap_cpRatchetJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointAlloc", _wrap_cpRatchetJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointInit", _wrap_cpRatchetJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointNew", _wrap_cpRatchetJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointGetAngle", _wrap_cpRatchetJointGetAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointSetAngle", _wrap_cpRatchetJointSetAngle);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointGetPhase", _wrap_cpRatchetJointGetPhase);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointSetPhase", _wrap_cpRatchetJointSetPhase);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointGetRatchet", _wrap_cpRatchetJointGetRatchet);
    SWIGV8_AddStaticFunction(example_obj, "cpRatchetJointSetRatchet", _wrap_cpRatchetJointSetRatchet);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointGetClass", _wrap_cpGearJointGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointAlloc", _wrap_cpGearJointAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointInit", _wrap_cpGearJointInit);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointNew", _wrap_cpGearJointNew);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointGetPhase", _wrap_cpGearJointGetPhase);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointSetPhase", _wrap_cpGearJointSetPhase);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointGetRatio", _wrap_cpGearJointGetRatio);
    SWIGV8_AddStaticFunction(example_obj, "cpGearJointSetRatio", _wrap_cpGearJointSetRatio);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorGetClass", _wrap_cpSimpleMotorGetClass);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorAlloc", _wrap_cpSimpleMotorAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorInit", _wrap_cpSimpleMotorInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorNew", _wrap_cpSimpleMotorNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorGetRate", _wrap_cpSimpleMotorGetRate);
    SWIGV8_AddStaticFunction(example_obj, "cpSimpleMotorSetRate", _wrap_cpSimpleMotorSetRate);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAlloc", _wrap_cpSpaceAlloc);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceInit", _wrap_cpSpaceInit);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceNew", _wrap_cpSpaceNew);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceDestroy", _wrap_cpSpaceDestroy);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceFree", _wrap_cpSpaceFree);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetIterations", _wrap_cpSpaceGetIterations);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetIterations", _wrap_cpSpaceSetIterations);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetGravity", _wrap_cpSpaceGetGravity);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetGravity", _wrap_cpSpaceSetGravity);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetDamping", _wrap_cpSpaceGetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetDamping", _wrap_cpSpaceSetDamping);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetIdleSpeedThreshold", _wrap_cpSpaceGetIdleSpeedThreshold);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetIdleSpeedThreshold", _wrap_cpSpaceSetIdleSpeedThreshold);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetSleepTimeThreshold", _wrap_cpSpaceGetSleepTimeThreshold);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetSleepTimeThreshold", _wrap_cpSpaceSetSleepTimeThreshold);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetCollisionSlop", _wrap_cpSpaceGetCollisionSlop);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetCollisionSlop", _wrap_cpSpaceSetCollisionSlop);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetCollisionBias", _wrap_cpSpaceGetCollisionBias);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetCollisionBias", _wrap_cpSpaceSetCollisionBias);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetCollisionPersistence", _wrap_cpSpaceGetCollisionPersistence);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetCollisionPersistence", _wrap_cpSpaceSetCollisionPersistence);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetEnableContactGraph", _wrap_cpSpaceGetEnableContactGraph);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetEnableContactGraph", _wrap_cpSpaceSetEnableContactGraph);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetUserData", _wrap_cpSpaceGetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetUserData", _wrap_cpSpaceSetUserData);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetStaticBody", _wrap_cpSpaceGetStaticBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceGetCurrentTimeStep", _wrap_cpSpaceGetCurrentTimeStep);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceIsLocked", _wrap_cpSpaceIsLocked);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSetDefaultCollisionHandler", _wrap_cpSpaceSetDefaultCollisionHandler);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddCollisionHandler", _wrap_cpSpaceAddCollisionHandler);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceRemoveCollisionHandler", _wrap_cpSpaceRemoveCollisionHandler);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddShape", _wrap_cpSpaceAddShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddStaticShape", _wrap_cpSpaceAddStaticShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddBody", _wrap_cpSpaceAddBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddConstraint", _wrap_cpSpaceAddConstraint);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceRemoveShape", _wrap_cpSpaceRemoveShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceRemoveStaticShape", _wrap_cpSpaceRemoveStaticShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceRemoveBody", _wrap_cpSpaceRemoveBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceRemoveConstraint", _wrap_cpSpaceRemoveConstraint);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceContainsShape", _wrap_cpSpaceContainsShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceContainsBody", _wrap_cpSpaceContainsBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceContainsConstraint", _wrap_cpSpaceContainsConstraint);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceConvertBodyToStatic", _wrap_cpSpaceConvertBodyToStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceConvertBodyToDynamic", _wrap_cpSpaceConvertBodyToDynamic);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceAddPostStepCallback", _wrap_cpSpaceAddPostStepCallback);
    SWIGV8_AddStaticFunction(example_obj, "cpSpacePointQuery", _wrap_cpSpacePointQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpacePointQueryFirst", _wrap_cpSpacePointQueryFirst);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceNearestPointQuery", _wrap_cpSpaceNearestPointQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceNearestPointQueryNearest", _wrap_cpSpaceNearestPointQueryNearest);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSegmentQuery", _wrap_cpSpaceSegmentQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceSegmentQueryFirst", _wrap_cpSpaceSegmentQueryFirst);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceBBQuery", _wrap_cpSpaceBBQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceShapeQuery", _wrap_cpSpaceShapeQuery);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceActivateShapesTouchingShape", _wrap_cpSpaceActivateShapesTouchingShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceEachBody", _wrap_cpSpaceEachBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceEachShape", _wrap_cpSpaceEachShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceEachConstraint", _wrap_cpSpaceEachConstraint);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceReindexStatic", _wrap_cpSpaceReindexStatic);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceReindexShape", _wrap_cpSpaceReindexShape);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceReindexShapesForBody", _wrap_cpSpaceReindexShapesForBody);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceUseSpatialHash", _wrap_cpSpaceUseSpatialHash);
    SWIGV8_AddStaticFunction(example_obj, "cpSpaceStep", _wrap_cpSpaceStep);
    SWIGV8_AddStaticFunction(example_obj, "cpInitChipmunk", _wrap_cpInitChipmunk);
    SWIGV8_AddStaticFunction(example_obj, "cpEnableSegmentToSegmentCollisions", _wrap_cpEnableSegmentToSegmentCollisions);
    SWIGV8_AddStaticFunction(example_obj, "cpMomentForCircle", _wrap_cpMomentForCircle);
    SWIGV8_AddStaticFunction(example_obj, "cpAreaForCircle", _wrap_cpAreaForCircle);
    SWIGV8_AddStaticFunction(example_obj, "cpMomentForSegment", _wrap_cpMomentForSegment);
    SWIGV8_AddStaticFunction(example_obj, "cpAreaForSegment", _wrap_cpAreaForSegment);
    SWIGV8_AddStaticFunction(example_obj, "cpMomentForPoly", _wrap_cpMomentForPoly);
    SWIGV8_AddStaticFunction(example_obj, "cpAreaForPoly", _wrap_cpAreaForPoly);
    SWIGV8_AddStaticFunction(example_obj, "cpCentroidForPoly", _wrap_cpCentroidForPoly);
    SWIGV8_AddStaticFunction(example_obj, "cpRecenterPoly", _wrap_cpRecenterPoly);
    SWIGV8_AddStaticFunction(example_obj, "cpMomentForBox", _wrap_cpMomentForBox);
    SWIGV8_AddStaticFunction(example_obj, "cpMomentForBox2", _wrap_cpMomentForBox2);
    SWIGV8_AddStaticFunction(example_obj, "cpConvexHull", _wrap_cpConvexHull);
    
    
    /* register classes */
    example_obj->Set(v8::String::NewSymbol("MyStruct"), _MyStruct_obj);
    example_obj->Set(v8::String::NewSymbol("MyData"), _MyData_obj);
    example_obj->Set(v8::String::NewSymbol("cpVect"), _cpVect_obj);
    example_obj->Set(v8::String::NewSymbol("cpMat2x2"), _cpMat2x2_obj);
    example_obj->Set(v8::String::NewSymbol("cpBB"), _cpBB_obj);
    example_obj->Set(v8::String::NewSymbol("cpSpatialIndex"), _cpSpatialIndex_obj);
    example_obj->Set(v8::String::NewSymbol("cpSpatialIndexClass"), _cpSpatialIndexClass_obj);
    example_obj->Set(v8::String::NewSymbol("cpComponentNode"), _cpComponentNode_obj);
    example_obj->Set(v8::String::NewSymbol("cpBody"), _cpBody_obj);
    example_obj->Set(v8::String::NewSymbol("cpNearestPointQueryInfo"), _cpNearestPointQueryInfo_obj);
    example_obj->Set(v8::String::NewSymbol("cpSegmentQueryInfo"), _cpSegmentQueryInfo_obj);
    example_obj->Set(v8::String::NewSymbol("cpShapeClass"), _cpShapeClass_obj);
    example_obj->Set(v8::String::NewSymbol("cpShape"), _cpShape_obj);
    example_obj->Set(v8::String::NewSymbol("cpCircleShape"), _cpCircleShape_obj);
    example_obj->Set(v8::String::NewSymbol("cpSegmentShape"), _cpSegmentShape_obj);
    example_obj->Set(v8::String::NewSymbol("cpSplittingPlane"), _cpSplittingPlane_obj);
    example_obj->Set(v8::String::NewSymbol("cpPolyShape"), _cpPolyShape_obj);
    example_obj->Set(v8::String::NewSymbol("cpConstraintClass"), _cpConstraintClass_obj);
    example_obj->Set(v8::String::NewSymbol("cpConstraint"), _cpConstraint_obj);
    example_obj->Set(v8::String::NewSymbol("cpPinJoint"), _cpPinJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpSlideJoint"), _cpSlideJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpPivotJoint"), _cpPivotJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpGrooveJoint"), _cpGrooveJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpDampedSpring"), _cpDampedSpring_obj);
    example_obj->Set(v8::String::NewSymbol("cpDampedRotarySpring"), _cpDampedRotarySpring_obj);
    example_obj->Set(v8::String::NewSymbol("cpRotaryLimitJoint"), _cpRotaryLimitJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpRatchetJoint"), _cpRatchetJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpGearJoint"), _cpGearJoint_obj);
    example_obj->Set(v8::String::NewSymbol("cpSimpleMotor"), _cpSimpleMotor_obj);
    example_obj->Set(v8::String::NewSymbol("cpSpace"), _cpSpace_obj);
    
    
    /* create and register namespace objects */
    global_obj->Set(v8::String::NewSymbol("example"), example_obj);
  }
  
#if defined(BUILDING_NODE_EXTENSION)
  NODE_MODULE(example, example_initialize);
#endif
  
  
  
} // extern "C"

